{
  "comment": "This file is generated by the tmlanguage-generator script.",
  "name": "Workshop",
  "scopeName": "source.ow",
  "fileTypes": [
    "ow",
    "overwatch",
    "workshop",
    "ws"
  ],
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#settings"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#subroutines"
    },
    {
      "include": "#rule"
    },
    {
      "include": "#action-list"
    },
    {
      "include": "#condition-list"
    },
    {
      "include": "#action"
    },
    {
      "include": "#expression"
    }
  ],
  "firstLineMatch": "settings|variables|subroutines|rule|\\[[0-9]{2}:[0-9]{2}:[0-9]{2}\\]",
  "repository": {
    "comment": {
      "patterns": [
        {
          "name": "comment.line.double-slash",
          "begin": "\\/\\/",
          "beginCaptures": {},
          "end": "(?=$)",
          "endCaptures": {}
        },
        {
          "name": "comment.block.documentation",
          "begin": "\\/\\*",
          "beginCaptures": {},
          "end": "\\*\\/",
          "endCaptures": {}
        },
        {
          "name": "comment.block.documentation",
          "match": "#",
          "captures": {}
        },
        {
          "name": "comment.block.documentation markup.error invalid.illegal",
          "match": "\\[[0-9]{2}:[0-9]{2}:[0-9]{2}\\]",
          "captures": {}
        }
      ]
    },
    "action": {
      "patterns": [
        {
          "begin": "disabled\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.flow.disabled"
            }
          },
          "end": "(?<=;)",
          "endCaptures": {},
          "patterns": [
            {
              "include": "#action"
            }
          ]
        },
        {
          "begin": "(Abort If|Skip If|Skip|While|If|Else If)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow"
            },
            "2": {
              "name": "meta.brace.round"
            }
          },
          "end": "(\\));",
          "endCaptures": {
            "1": {
              "name": "meta.brace.round"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "(\\bFor Global Variable)\\s*(\\()\\s*([a-zA-Z0-9_]+)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow"
            },
            "2": {
              "name": "meta.brace.round"
            },
            "3": {
              "name": "variable"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "(\\bFor Player Variable)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow"
            },
            "2": {
              "name": "meta.brace.round"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round"
            }
          },
          "patterns": [
            {
              "begin": "(,)\\s*([a-zA-Z0-9_]+)\\s*(,)",
              "beginCaptures": {
                "1": {
                  "name": "punctuation.separator.comma"
                },
                "2": {
                  "name": "variable.parameter"
                },
                "3": {
                  "name": "punctuation.separator.comma"
                }
              },
              "end": "(?=\\))",
              "endCaptures": {},
              "patterns": [
                {
                  "include": "#expression"
                }
              ]
            },
            {
              "include": "#expression"
            }
          ]
        },
        {
          "match": "(\\bEnd|Loop If Condition Is True|Loop If Condition Is False|Loop|Else|Break|Continue|Abort);",
          "captures": {
            "1": {
              "name": "keyword.control.flow"
            }
          }
        },
        {
          "match": "(\\b(?![\\s(),;0-9])[^/\\\\\\+\\*\\\"\\';:<>=(),\\{\\}\\[\\]\\.#`]+\\b)\\s*;",
          "captures": {
            "1": {
              "name": "entity.name.function"
            }
          }
        },
        {
          "match": "(Call Subroutine)\\s*(\\()\\s*([a-zA-Z0-9_]+)(\\))\\s*;",
          "captures": {
            "1": {
              "name": "entity.name.function"
            },
            "2": {
              "name": "meta.brace.round"
            },
            "3": {
              "name": "entity.name.function"
            },
            "4": {
              "name": "meta.brace.round"
            }
          }
        },
        {
          "begin": "(\\b(Modify|Set) Global Variable( At Index)?)\\s*(\\()\\s*([a-zA-Z0-9_]+)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.assignment"
            },
            "4": {
              "name": "meta.brace.round"
            },
            "5": {
              "name": "variable"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "(\\b(Modify|Set) Player Variable( At Index)?)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.assignment"
            },
            "4": {
              "name": "meta.brace.round"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round"
            }
          },
          "patterns": [
            {
              "begin": "(,)\\s*([a-zA-Z0-9_]+)\\s*(,)",
              "beginCaptures": {
                "1": {
                  "name": "punctuation.separator.comma"
                },
                "2": {
                  "name": "variable.parameter"
                },
                "3": {
                  "name": "punctuation.separator.comma"
                }
              },
              "end": "(?=\\))",
              "endCaptures": {},
              "patterns": [
                {
                  "include": "#expression"
                }
              ]
            },
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "(\\bChase Global Variable (Over Time|At Rate))\\s*(\\()\\s*([a-zA-Z0-9_]+)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.assignment"
            },
            "3": {
              "name": "meta.brace.round"
            },
            "4": {
              "name": "variable"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "(\\bChase Player Variable (Over Time|At Rate)?)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.assignment"
            },
            "3": {
              "name": "meta.brace.round"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round"
            }
          },
          "patterns": [
            {
              "begin": "(,)\\s*([a-zA-Z0-9_]+)\\s*(,)",
              "beginCaptures": {
                "1": {
                  "name": "punctuation.separator.comma"
                },
                "2": {
                  "name": "variable.parameter"
                },
                "3": {
                  "name": "punctuation.separator.comma"
                }
              },
              "end": "(?=\\))",
              "endCaptures": {},
              "patterns": [
                {
                  "include": "#expression"
                }
              ]
            },
            {
              "include": "#expression"
            }
          ]
        },
        {
          "patterns": [
            {
              "name": "comment.block.documentation",
              "match": "\\\"\\\"",
              "captures": {}
            },
            {
              "name": "comment.block.documentation",
              "begin": "\"",
              "beginCaptures": {},
              "end": "((?:^|[^\\\\])(?:\\\\{2})*)\"",
              "endCaptures": {}
            }
          ]
        },
        {
          "begin": "\\+=|-=|\\/=|\\*=|%=",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.assignment.compound"
            }
          },
          "end": ";",
          "endCaptures": {
            "0": {
              "name": "punctuation.terminator.statement"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#expression"
        },
        {
          "name": "keyword.operator.assignment",
          "match": "=",
          "captures": {}
        }
      ]
    },
    "action-list": {
      "begin": "\\bactions\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.end"
        }
      },
      "patterns": [
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.dictionary.begin"
            }
          },
          "end": "(?=})",
          "endCaptures": {},
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#action"
            }
          ]
        }
      ]
    },
    "condition-list": {
      "begin": "\\bconditions\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.end"
        }
      },
      "patterns": [
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.dictionary.begin"
            }
          },
          "end": "(?=})",
          "endCaptures": {},
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "begin": "disabled\\b",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control.flow.disabled"
                }
              },
              "end": "(?=;|})",
              "endCaptures": {},
              "patterns": [
                {
                  "include": "#expression"
                }
              ]
            },
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "expression": {
      "name": "meta.expr",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "match": "(,)",
          "captures": {
            "1": {
              "name": "punctuation.separator.comma"
            }
          }
        },
        {
          "match": "(-?[0-9]+(\\.[0-9]+)?)",
          "captures": {
            "1": {
              "name": "constant.numeric"
            }
          }
        },
        {
          "begin": "(\\bString|Custom String\\b)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "constant"
            },
            "2": {
              "name": "meta.brace.round"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "meta.brace.round"
            }
          },
          "patterns": [
            {
              "include": "#string-literal"
            },
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#string-literal"
        },
        {
          "name": "constant.language.boolean.true",
          "match": "\\bTrue\\b",
          "captures": {}
        },
        {
          "name": "constant.language.boolean.false",
          "match": "\\bFalse\\b",
          "captures": {}
        },
        {
          "name": "constant.language.null",
          "match": "\\bNull\\b",
          "captures": {}
        },
        {
          "match": "(Global)((\\.)([a-zA-Z0-9_]+)?)?",
          "captures": {
            "1": {
              "name": "variable.language.super"
            },
            "3": {
              "name": "punctuation.accessor"
            },
            "4": {
              "name": "variable"
            }
          }
        },
        {
          "match": "(\\.)([a-zA-Z0-9_]+)",
          "captures": {
            "1": {
              "name": "punctuation.accessor"
            },
            "2": {
              "name": "variable.parameter"
            }
          }
        },
        {
          "begin": "\\[",
          "beginCaptures": {
            "0": {
              "name": "punctuation.squarebracket.open"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.squarebracket.close"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "keyword.operator.arithmetic",
          "match": "\\+|-|\\*|\\/|%",
          "captures": {}
        },
        {
          "name": "keyword.operator.comparison",
          "match": "==|!=",
          "captures": {}
        },
        {
          "name": "keyword.operator.logical",
          "match": "\\|\\||&&|!",
          "captures": {}
        },
        {
          "name": "keyword.operator.relational",
          "match": "<=|>=|<|>",
          "captures": {}
        },
        {
          "name": "keyword.operator.ternary",
          "match": "\\?|:",
          "captures": {}
        },
        {
          "contentName": "meta.expr.group",
          "begin": "\\(",
          "beginCaptures": {},
          "end": "\\)",
          "endCaptures": {},
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#function"
        },
        {
          "name": "support.constant",
          "match": "(?![\\s(),;0-9])[^/\\\\\\+\\*\\\"\\';:<>=(),\\{\\}\\[\\]\\.#`]+",
          "captures": {}
        }
      ]
    },
    "function": {
      "patterns": [
        {
          "contentName": "meta.parameter-list",
          "begin": "((?![\\s(),;0-9])[^/\\\\\\+\\*\\\"\\';:<>=(),\\{\\}\\[\\]\\.#`]+)(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function"
            },
            "2": {
              "name": "meta.brace.round"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "variable.other.constant",
          "match": "(?![\\s(),;0-9])[^/\\\\\\+\\*\\\"\\';:<>=(),\\{\\}\\[\\]\\.#`]+",
          "captures": {}
        }
      ]
    },
    "string-literal": {
      "patterns": [
        {
          "name": "string.quoted.double",
          "match": "\\\"\\\"",
          "captures": {}
        },
        {
          "name": "string.quoted.double",
          "begin": "\"",
          "beginCaptures": {},
          "end": "((?:^|[^\\\\])(?:\\\\{2})*)\"",
          "endCaptures": {}
        }
      ]
    },
    "settings": {
      "begin": "\\bsettings\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.end"
        }
      },
      "patterns": [
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.dictionary.begin"
            }
          },
          "end": "(?=})",
          "endCaptures": {},
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "begin": "\\blobby\\b",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.dictionary.end"
                }
              },
              "patterns": [
                {
                  "begin": "\\{",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.dictionary.begin"
                    }
                  },
                  "end": "(?=})",
                  "endCaptures": {},
                  "patterns": [
                    {
                      "include": "#comment"
                    },
                    {
                      "include": "#lobby-settings-group"
                    }
                  ]
                }
              ]
            },
            {
              "begin": "\\bmodes\\b",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.dictionary.end"
                }
              },
              "patterns": [
                {
                  "begin": "\\{",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.dictionary.begin"
                    }
                  },
                  "end": "(?=})",
                  "endCaptures": {},
                  "patterns": [
                    {
                      "include": "#comment"
                    },
                    {
                      "include": "#lobby-settings-group"
                    }
                  ]
                }
              ]
            },
            {
              "begin": "\\bheroes\\b",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.dictionary.end"
                }
              },
              "patterns": [
                {
                  "begin": "\\{",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.dictionary.begin"
                    }
                  },
                  "end": "(?=})",
                  "endCaptures": {},
                  "patterns": [
                    {
                      "include": "#comment"
                    },
                    {
                      "include": "#lobby-settings-group"
                    }
                  ]
                }
              ]
            },
            {
              "begin": "\\bextensions\\b",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.dictionary.end"
                }
              },
              "patterns": [
                {
                  "begin": "\\{",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.dictionary.begin"
                    }
                  },
                  "end": "(?=})",
                  "endCaptures": {},
                  "patterns": [
                    {
                      "include": "#comment"
                    },
                    {
                      "match": "(?![\\s(),;0-9])[^/\\\\\\+\\*\\\"\\';:<>=(),\\{\\}\\[\\]\\.#`]+",
                      "captures": {}
                    }
                  ]
                }
              ]
            },
            {
              "begin": "\\bmain\\b",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.dictionary.end"
                }
              },
              "patterns": [
                {
                  "begin": "\\{",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.dictionary.begin"
                    }
                  },
                  "end": "(?=})",
                  "endCaptures": {},
                  "patterns": [
                    {
                      "include": "#comment"
                    },
                    {
                      "include": "#lobby-settings-group"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "variables": {
      "begin": "\\bvariables\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.end"
        }
      },
      "patterns": [
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.dictionary.begin"
            }
          },
          "end": "(?=})",
          "endCaptures": {},
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "name": "keyword.control",
              "begin": "\\bglobal\\s*:",
              "beginCaptures": {},
              "end": "(?=}|player\\s*:)",
              "endCaptures": {},
              "patterns": [
                {
                  "match": "([0-9]+)\\s*(:)\\s*([a-zA-Z0-9_]+)",
                  "captures": {
                    "1": {
                      "name": "constant.numeric"
                    },
                    "2": {
                      "name": "punctuation.separator.dictionary.key-value"
                    },
                    "3": {
                      "name": "variable"
                    }
                  }
                }
              ]
            },
            {
              "name": "keyword.control",
              "begin": "\\bplayer\\s*:",
              "beginCaptures": {},
              "end": "(?=}|global\\s*:)",
              "endCaptures": {},
              "patterns": [
                {
                  "match": "([0-9]+)\\s*(:)\\s*([a-zA-Z0-9_]+)",
                  "captures": {
                    "1": {
                      "name": "constant.numeric"
                    },
                    "2": {
                      "name": "punctuation.separator.dictionary.key-value"
                    },
                    "3": {
                      "name": "variable.parameter"
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    "subroutines": {
      "begin": "\\bsubroutines\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.end"
        }
      },
      "patterns": [
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.dictionary.begin"
            }
          },
          "end": "(?=})",
          "endCaptures": {},
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "match": "([0-9]+)\\s*(:)\\s*([a-zA-Z0-9_]+)",
              "captures": {
                "1": {
                  "name": "constant.numeric"
                },
                "2": {
                  "name": "punctuation.separator.dictionary.key-value"
                },
                "3": {
                  "name": "entity.name.function"
                }
              }
            }
          ]
        }
      ]
    },
    "rule": {
      "begin": "(disabled\\s+)?rule(?=\\s*\\()",
      "beginCaptures": {
        "0": {
          "name": "keyword.control"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block"
        }
      },
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {},
          "end": "\\)",
          "endCaptures": {},
          "patterns": [
            {
              "include": "#string-literal"
            }
          ]
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.block"
            }
          },
          "end": "(?=})",
          "endCaptures": {},
          "patterns": [
            {
              "begin": "\\bevent\\b",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.dictionary.end"
                }
              },
              "patterns": [
                {
                  "begin": "\\{",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.dictionary.begin"
                    }
                  },
                  "end": "(?=})",
                  "endCaptures": {},
                  "patterns": [
                    {
                      "include": "#comment"
                    },
                    {
                      "begin": "(Subroutine)\\s*;",
                      "beginCaptures": {
                        "1": {
                          "name": "storage.type.function"
                        }
                      },
                      "end": "([a-zA-Z0-9_]+)\\s*;",
                      "endCaptures": {
                        "1": {
                          "name": "entity.name.function"
                        }
                      }
                    },
                    {
                      "name": "meta.trait",
                      "match": "(?![\\s(),;0-9])[^/\\\\\\+\\*\\\"\\';:<>=(),\\{\\}\\[\\]\\.#`]+",
                      "captures": {}
                    },
                    {
                      "match": ";",
                      "captures": {}
                    }
                  ]
                }
              ]
            },
            {
              "include": "#action-list"
            },
            {
              "include": "#condition-list"
            },
            {
              "include": "#comment"
            }
          ]
        }
      ]
    },
    "lobby-settings-group": {
      "patterns": [
        {
          "name": "meta.ostw.settings-group",
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.dictionary.begin"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.dictionary.end"
            }
          },
          "patterns": [
            {
              "include": "#lobby-settings-group"
            }
          ]
        },
        {
          "begin": "((?![\\s(),;0-9])[^/\\\\\\+\\*\\\"\\';:<>=(),\\{\\}\\[\\]\\.#`]+)\\s*(:)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.yaml"
            },
            "2": {
              "name": "punctuation.separator.key-value.mapping"
            }
          },
          "end": "(?=$)",
          "endCaptures": {},
          "patterns": [
            {
              "include": "#string-literal"
            },
            {
              "match": "(-?[0-9]+(\\.[0-9]+)?%?)",
              "captures": {
                "1": {
                  "name": "constant.numeric"
                }
              }
            }
          ]
        },
        {
          "match": "((disabled)\\s*)?(?![\\s(),;0-9])[^/\\\\\\+\\*\\\"\\';:<>=(),\\{\\}\\[\\]\\.#`]+",
          "captures": {
            "0": {
              "name": "keyword.control"
            },
            "2": {
              "name": "keyword.control.flow.disabled"
            }
          }
        },
        {
          "include": "#comment"
        }
      ]
    }
  }
}