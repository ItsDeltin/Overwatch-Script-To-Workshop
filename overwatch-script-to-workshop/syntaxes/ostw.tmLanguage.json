{
  "comment": "This file is generated by the tmlanguage-generator script.",
  "name": "Overwatch Script To Workshop",
  "scopeName": "source.del",
  "fileTypes": [
    "ostw",
    "del",
    "workshop"
  ],
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#new"
    },
    {
      "include": "#import"
    },
    {
      "include": "#class-struct-declaration"
    },
    {
      "include": "#enum-declaration"
    },
    {
      "include": "source.ow#rule"
    },
    {
      "include": "source.ow#settings"
    },
    {
      "include": "source.ow#variables"
    },
    {
      "include": "source.ow#subroutines"
    },
    {
      "include": "#rule"
    },
    {
      "include": "#function-declaration"
    },
    {
      "include": "#variable-declaration"
    },
    {
      "include": "#statement"
    }
  ],
  "firstLineMatch": "\\brule\\b",
  "repository": {
    "import": {
      "begin": "\\bimport\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.other"
        }
      },
      "end": ";",
      "endCaptures": {
        "0": {
          "name": "punctuation.terminator.statement.ostw"
        }
      },
      "patterns": [
        {
          "include": "#string-literal"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.line.double-slash",
          "begin": "\\/\\/",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment"
            }
          },
          "end": "(?=$)",
          "endCaptures": {}
        },
        {
          "name": "comment.block",
          "begin": "\\/\\*",
          "beginCaptures": {},
          "end": "\\*\\/",
          "endCaptures": {}
        },
        {
          "begin": "#",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment"
            }
          },
          "end": "(?=^)\\s*(?!#)",
          "endCaptures": {},
          "patterns": [
            {
              "begin": "```workshop",
              "beginCaptures": {
                "0": {
                  "name": "comment.block.documentation"
                }
              },
              "end": "```|^(?!\\s*#)",
              "endCaptures": {
                "0": {
                  "name": "comment.block.documentation"
                }
              },
              "patterns": [
                {
                  "begin": "#",
                  "beginCaptures": {
                    "0": {
                      "name": "comment.block.documentation"
                    }
                  },
                  "end": "$|(?=```)",
                  "endCaptures": {},
                  "patterns": [
                    {
                      "include": "source.ow"
                    }
                  ]
                }
              ]
            },
            {
              "begin": "```overpy",
              "beginCaptures": {
                "0": {
                  "name": "comment.block.documentation"
                }
              },
              "end": "```|^(?!\\s*#)",
              "endCaptures": {
                "0": {
                  "name": "comment.block.documentation"
                }
              },
              "patterns": [
                {
                  "begin": "#",
                  "beginCaptures": {
                    "0": {
                      "name": "comment.block.documentation"
                    }
                  },
                  "end": "$|(?=```)",
                  "endCaptures": {},
                  "patterns": [
                    {
                      "include": "source.opy"
                    }
                  ]
                }
              ]
            },
            {
              "begin": "```",
              "beginCaptures": {
                "0": {
                  "name": "comment.block.documentation"
                }
              },
              "end": "```|^(?!\\s*#)",
              "endCaptures": {
                "0": {
                  "name": "comment.block.documentation"
                }
              },
              "patterns": [
                {
                  "match": "(#)(.*?($|(?=```)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.documentation"
                    },
                    "2": {
                      "patterns": [
                        {
                          "include": "$self"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            {
              "name": "comment.block.documentation",
              "match": "((?!```).+?(?=```|$))",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "match": "\\-\\s*`([a-zA-Z0-9_]+\\b)`\\s*(:)",
                      "captures": {
                        "1": {
                          "name": "variable.parameter"
                        },
                        "2": {
                          "name": "punctuation.separator.key-value"
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      ]
    },
    "expression": {
      "name": "meta.expression",
      "patterns": [
        {
          "include": "#number"
        },
        {
          "include": "#string-interpolated"
        },
        {
          "name": "constant.language.boolean.true",
          "match": "true",
          "captures": {}
        },
        {
          "name": "constant.language.boolean.false",
          "match": "false",
          "captures": {}
        },
        {
          "include": "#function-call"
        },
        {
          "include": "#new"
        },
        {
          "begin": "\\[",
          "beginCaptures": {
            "0": {
              "name": "punctuation.squarebracket.open"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.squarebracket.close"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#expression"
            },
            {
              "name": "punctuation.separator.comma",
              "match": ",",
              "captures": {}
            }
          ]
        },
        {
          "begin": "\\?",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.conditional.question-mark"
            }
          },
          "end": ":",
          "endCaptures": {
            "0": {
              "name": "keyword.operator.conditional.colon"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "meta.lambda.single",
          "match": "([a-zA-Z0-9_]+\\b)\\s*(=>)",
          "captures": {
            "1": {
              "name": "variable.parameter"
            },
            "2": {
              "name": "storage.type.function.arrow"
            }
          }
        },
        {
          "name": "meta.lambda.parenthesized",
          "match": "(\\()(\\s*((,)\\s*)?([a-zA-Z0-9_]+\\b))*\\s*(\\))\\s*(=>)",
          "captures": {
            "1": {
              "name": "punctuation.definition.parameters.begin"
            },
            "4": {
              "name": "punctuation.separator.comma"
            },
            "5": {
              "name": "variable.parameter"
            },
            "6": {
              "name": "punctuation.definition.parameters.end"
            },
            "7": {
              "name": "storage.type.function.arrow"
            }
          }
        },
        {
          "name": "meta.structorblock",
          "begin": "\\{",
          "beginCaptures": {},
          "end": "\\}",
          "endCaptures": {},
          "patterns": [
            {
              "begin": "([a-zA-Z0-9_]+\\b)\\s*(:)",
              "beginCaptures": {
                "1": {
                  "name": "variable.parameter"
                },
                "2": {
                  "name": "punctuation.separator.colon"
                }
              },
              "end": "(,)|(?=\\})",
              "endCaptures": {
                "1": {
                  "name": "punctuation.separator.comma"
                }
              },
              "patterns": [
                {
                  "include": "#expression"
                }
              ]
            },
            {
              "include": "#statement"
            }
          ]
        },
        {
          "match": "(<)\\s*(?<type>(const\\s*)?(\\(\\s*(\\g<type>\\s*(,\\s*)?)*\\)|[a-zA-Z0-9_]+\\b\\s*(<\\s*(,?\\s*\\g<type>\\s*)+>)?)\\s*(\\[\\s*\\]\\s*)*(\\|\\s*\\g<type>\\s*)*(=>\\s*\\g<type>\\s*)?)\\s*(>)",
          "captures": {
            "1": {
              "name": "punctuation.definition.typeparameters.begin"
            },
            "2": {
              "name": "meta.type",
              "patterns": [
                {
                  "include": "#type-matcher"
                }
              ]
            },
            "12": {
              "name": "punctuation.definition.typeparameters.end"
            }
          }
        },
        {
          "name": "keyword.operator.comparison",
          "match": "==|!=",
          "captures": {}
        },
        {
          "name": "keyword.operator.relational",
          "match": "<=|>=|<|>",
          "captures": {}
        },
        {
          "name": "keyword.operator.logical",
          "match": "!|&&|\\|\\|",
          "captures": {}
        },
        {
          "name": "keyword.operator.arithmetic",
          "match": "%|\\*|\\/|\\-|\\+|\\^",
          "captures": {}
        },
        {
          "name": "storage.type.function.arrow",
          "match": "=>",
          "captures": {}
        },
        {
          "name": "constant.language.null",
          "match": "\\bnull\\b",
          "captures": {}
        },
        {
          "name": "this",
          "match": "\\bthis\\b",
          "captures": {}
        },
        {
          "name": "root",
          "match": "\\broot\\b",
          "captures": {}
        },
        {
          "match": "((\\.)\\s*)?([a-zA-Z0-9_]+\\b)\\b",
          "captures": {
            "2": {
              "name": "punctuation.accessor"
            },
            "3": {
              "name": "variable"
            }
          }
        },
        {
          "match": "((\\.)\\s*)?([a-zA-Z0-9_]+\\b)(<)\\s*((,)?\\s*(?<type>(const\\s*)?(\\(\\s*(\\g<type>\\s*(,\\s*)?)*\\)|[a-zA-Z0-9_]+\\b\\s*(<\\s*(,?\\s*\\g<type>\\s*)+>)?)\\s*(\\[\\s*\\]\\s*)*(\\|\\s*\\g<type>\\s*)*(=>\\s*\\g<type>\\s*)?)\\s*)*(>)",
          "captures": {
            "2": {
              "name": "punctuation.accessor"
            },
            "3": {
              "name": "entity.name.type"
            },
            "4": {
              "name": "punctuation.definition.typeparameters.begin"
            },
            "6": {
              "name": "punctuation.separator.comma"
            },
            "7": {
              "name": "meta.type",
              "patterns": [
                {
                  "include": "#type-matcher"
                }
              ]
            },
            "17": {
              "name": "punctuation.definition.typeparameters.end"
            }
          }
        },
        {
          "include": "#block"
        }
      ]
    },
    "string-literal": {
      "match": "(\\\"(?:[^\"\\\\]|\\\\.)*\\\")|(\\'(?:[^'\\\\]|\\\\.)*\\')",
      "captures": {
        "1": {
          "name": "string.quoted.double"
        },
        "2": {
          "name": "string.quoted.single"
        }
      }
    },
    "string-interpolated": {
      "patterns": [
        {
          "name": "string.quoted.single",
          "begin": "'",
          "beginCaptures": {},
          "end": "(?<!\\\\)(?:\\\\{2})*'",
          "endCaptures": {},
          "patterns": [
            {
              "include": "#escaped-string-character"
            }
          ]
        },
        {
          "name": "string.quoted.double",
          "begin": "\"",
          "beginCaptures": {},
          "end": "(?<!\\\\)(?:\\\\{2})*\"",
          "endCaptures": {},
          "patterns": [
            {
              "include": "#escaped-string-character"
            }
          ]
        },
        {
          "name": "string.quoted.single",
          "begin": "\\$\\s*'",
          "beginCaptures": {},
          "end": "(?<!\\\\)(?:\\\\{2})*'",
          "endCaptures": {},
          "patterns": [
            {
              "include": "#escaped-string-character"
            },
            {
              "include": "#interpolated-string-inner"
            }
          ]
        },
        {
          "name": "string.quoted.double",
          "begin": "\\$\\s*\"",
          "beginCaptures": {},
          "end": "(?<!\\\\)(?:\\\\{2})*\"",
          "endCaptures": {},
          "patterns": [
            {
              "include": "#escaped-string-character"
            },
            {
              "include": "#interpolated-string-inner"
            }
          ]
        }
      ]
    },
    "escaped-string-character": {
      "name": "constant.character.escape",
      "match": "\\\\.",
      "captures": {}
    },
    "interpolated-string-inner": {
      "begin": "(?<!\\{)\\{\\{*(\\{)(?!\\{)",
      "beginCaptures": {
        "2": {
          "name": "punctuation.definition.interpolation.begin"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.interpolation.end"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "number": {
      "name": "constant.numeric",
      "match": "(([0-9]+)?\\.)?[0-9]+\\b",
      "captures": {}
    },
    "block": {
      "name": "meta.block",
      "begin": "(\\{)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.curlybrace.open"
        }
      },
      "end": "(\\})",
      "endCaptures": {
        "1": {
          "name": "punctuation.curlybrace.close"
        }
      },
      "patterns": [
        {
          "include": "#statement"
        }
      ]
    },
    "statement": {
      "name": "meta.statement",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "begin": "return",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.flow.return"
            }
          },
          "end": ";",
          "endCaptures": {
            "0": {
              "name": "punctuation.terminator.statement.ostw"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "\\bdelete\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.expression.delete"
            }
          },
          "end": ";",
          "endCaptures": {
            "0": {
              "name": "punctuation.terminator.statement.ostw"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "(for)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.loop.for"
            },
            "2": {
              "name": "punctuation.parenthesis.open"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.close"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#variable-declaration"
            },
            {
              "include": "#assignment"
            },
            {
              "include": "#expression"
            },
            {
              "include": "#statement-end"
            }
          ]
        },
        {
          "begin": "(foreach)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.loop.foreach"
            },
            "2": {
              "name": "punctuation.parenthesis.open"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.close"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "begin": "\\bin\\b",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control.loop.in"
                }
              },
              "end": "(?=\\))",
              "endCaptures": {},
              "patterns": [
                {
                  "include": "#expression"
                }
              ]
            },
            {
              "match": "(?<type>(const\\s*)?(\\(\\s*(\\g<type>\\s*(,\\s*)?)*\\)|[a-zA-Z0-9_]+\\b\\s*(<\\s*(,?\\s*\\g<type>\\s*)+>)?)\\s*(\\[\\s*\\]\\s*)*(\\|\\s*\\g<type>\\s*)*(=>\\s*\\g<type>\\s*)?)\\s*([a-zA-Z0-9_]+\\b)",
              "captures": {
                "1": {
                  "name": "meta.type",
                  "patterns": [
                    {
                      "include": "#type-matcher"
                    }
                  ]
                },
                "11": {
                  "name": "entity.name.variable.local"
                }
              }
            }
          ]
        },
        {
          "include": "#if-statement"
        },
        {
          "name": "keyword.control.conditional.else",
          "match": "\\belse\\b",
          "captures": {}
        },
        {
          "begin": "\\b((switch)|(while))\\s*(\\()",
          "beginCaptures": {
            "2": {
              "name": "keyword.control.switch"
            },
            "3": {
              "name": "keyword.control.loop.while"
            },
            "4": {
              "name": "punctuation.parenthesis.open"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.close"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "keyword.control.flow.break",
          "match": "\\bbreak\\b",
          "captures": {}
        },
        {
          "name": "keyword.control.flow.continue",
          "match": "\\bcontinue\\b",
          "captures": {}
        },
        {
          "begin": "\\bcase\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.case"
            }
          },
          "end": ":",
          "endCaptures": {
            "0": {
              "name": "punctuation.separator.colon"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#variable-declaration"
        },
        {
          "include": "#function-call"
        },
        {
          "include": "#assignment"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#block"
        },
        {
          "include": "#statement-end"
        }
      ]
    },
    "statement-end": {
      "match": ";",
      "captures": {
        "0": {
          "name": "punctuation.terminator.statement.ostw"
        }
      }
    },
    "assignment": {
      "match": "=|\\+=|\\-=|\\*=|\\/=|%=|\\^=|\\+\\+|\\-\\-",
      "captures": {
        "0": {
          "name": "keyword.operator.assignment.compound"
        }
      }
    },
    "if-statement": {
      "begin": "\\b((else)\\s*)?(if)\\s*(\\()",
      "beginCaptures": {
        "2": {
          "name": "keyword.control.conditional.else"
        },
        "3": {
          "name": "keyword.control.conditional.if"
        },
        "4": {
          "name": "punctuation.parenthesis.open"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "parameter_list": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.parenthesis.open"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close"
        }
      },
      "patterns": [
        {
          "begin": "\\[",
          "beginCaptures": {},
          "end": "\\]",
          "endCaptures": {},
          "patterns": [
            {
              "include": "#parameter-declaration"
            }
          ]
        },
        {
          "include": "#parameter-declaration"
        },
        {
          "include": "#expression"
        },
        {
          "name": "keyword.operator.assignment",
          "match": "=",
          "captures": {}
        }
      ]
    },
    "parameter-declaration": {
      "match": "((ref|in)\\s*)*(?<type>(const\\s*)?(\\(\\s*(\\g<type>\\s*(,\\s*)?)*\\)|[a-zA-Z0-9_]+\\b\\s*(<\\s*(,?\\s*\\g<type>\\s*)+>)?)\\s*(\\[\\s*\\]\\s*)*(\\|\\s*\\g<type>\\s*)*(=>\\s*\\g<type>\\s*)?)([a-zA-Z0-9_]+\\b)",
      "captures": {
        "1": {
          "name": "storage.modifier"
        },
        "3": {
          "name": "meta.type",
          "patterns": [
            {
              "include": "#type-matcher"
            }
          ]
        },
        "13": {
          "name": "variable.parameter"
        }
      }
    },
    "type": {
      "match": "(?<type>(const\\s*)?(\\(\\s*(\\g<type>\\s*(,\\s*)?)*\\)|[a-zA-Z0-9_]+\\b\\s*(<\\s*(,?\\s*\\g<type>\\s*)+>)?)\\s*(\\[\\s*\\]\\s*)*(\\|\\s*\\g<type>\\s*)*(=>\\s*\\g<type>\\s*)?)",
      "captures": {
        "1": {
          "name": "meta.type",
          "patterns": [
            {
              "include": "#type-matcher"
            }
          ]
        }
      }
    },
    "type-matcher": {
      "patterns": [
        {
          "name": "storage.modifier",
          "match": "const",
          "captures": {}
        },
        {
          "name": "keyword.other",
          "match": "define",
          "captures": {}
        },
        {
          "name": "entity.name.type",
          "match": "[a-zA-Z0-9_]+\\b",
          "captures": {}
        },
        {
          "name": "punctuation.parenthesis.open",
          "match": "\\(",
          "captures": {}
        },
        {
          "name": "punctuation.parenthesis.close",
          "match": "\\)",
          "captures": {}
        },
        {
          "name": "punctuation.squarebracket.open",
          "match": "\\[",
          "captures": {}
        },
        {
          "name": "punctuation.squarebracket.close",
          "match": "\\]",
          "captures": {}
        },
        {
          "name": "punctuation.definition.typeparameters.begin",
          "match": "<",
          "captures": {}
        },
        {
          "name": "punctuation.definition.typeparameters.end",
          "match": ">",
          "captures": {}
        },
        {
          "name": "punctuation.separator.comma",
          "match": ",",
          "captures": {}
        },
        {
          "name": "storage.type.function.arrow",
          "match": "=>",
          "captures": {}
        },
        {
          "name": "keyword.operator.type",
          "match": "\\|",
          "captures": {}
        }
      ]
    },
    "variable-declaration": {
      "name": "meta.declaration.variable",
      "begin": "(((public|private|protected|virtual|override|abstract|static|recursive|globalvar|playervar|persist)\\b\\s*)*)(?<type>(const\\s*)?(\\(\\s*(\\g<type>\\s*(,\\s*)?)*\\)|[a-zA-Z0-9_]+\\b\\s*(<\\s*(,?\\s*\\g<type>\\s*)+>)?)\\s*(\\[\\s*\\]\\s*)*(\\|\\s*\\g<type>\\s*)*(=>\\s*\\g<type>\\s*)?)([a-zA-Z0-9_]+\\b)\\s*",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier"
        },
        "4": {
          "name": "meta.type",
          "patterns": [
            {
              "include": "#type-matcher"
            }
          ]
        },
        "14": {
          "name": "entity.name.variable.field"
        }
      },
      "end": ";",
      "endCaptures": {
        "0": {
          "name": "punctuation.terminator.statement.ostw"
        }
      },
      "patterns": [
        {
          "begin": "(=)|(:)",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.assignment"
            },
            "1": {
              "name": "keyword.operator.assignment"
            },
            "2": {
              "name": "punctuation.separator.key-value"
            }
          },
          "end": "(?=;)",
          "endCaptures": {},
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "keyword.operator.assignment",
          "match": "!",
          "captures": {}
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.block"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.block"
            }
          },
          "patterns": [
            {
              "include": "#string-literal"
            },
            {
              "match": "(,)",
              "captures": {
                "1": {
                  "name": "punctuation.separator.comma"
                }
              }
            }
          ]
        }
      ]
    },
    "function-declaration": {
      "name": "meta.function",
      "begin": "(((public|private|protected|virtual|override|abstract|static|recursive|globalvar|playervar|persist)\\b\\s*)*)(?<type>(const\\s*)?(\\(\\s*(\\g<type>\\s*(,\\s*)?)*\\)|[a-zA-Z0-9_]+\\b\\s*(<\\s*(,?\\s*\\g<type>\\s*)+>)?)\\s*(\\[\\s*\\]\\s*)*(\\|\\s*\\g<type>\\s*)*(=>\\s*\\g<type>\\s*)?)([a-zA-Z0-9_]+\\b)\\s*(?=\\(|<)",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier"
        },
        "4": {
          "name": "meta.type",
          "patterns": [
            {
              "include": "#type-matcher"
            }
          ]
        },
        "14": {
          "name": "entity.name.function"
        }
      },
      "end": "(?<=\\}|;)",
      "endCaptures": {},
      "patterns": [
        {
          "include": "#type_args"
        },
        {
          "include": "#parameter_list"
        },
        {
          "include": "#block"
        },
        {
          "include": "#string-interpolated"
        },
        {
          "match": "\\b(globalvar, playervar)\\b",
          "captures": {
            "0": {
              "name": "storage.modifier"
            }
          }
        },
        {
          "begin": ":",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.assignment"
            }
          },
          "end": ";|(?={)",
          "endCaptures": {
            "0": {
              "name": "punctuation.terminator.statement.ostw"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "constructor-declaration": {
      "begin": "(((public|private|protected|virtual|override|abstract|static|recursive|globalvar|playervar|persist)\\b\\s*)*)(constructor)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier"
        },
        "4": {
          "name": "storage.type"
        }
      },
      "end": "(?<=\\})",
      "endCaptures": {},
      "patterns": [
        {
          "include": "#parameter_list"
        },
        {
          "include": "#block"
        }
      ]
    },
    "class-struct-declaration": {
      "name": "meta.declaration.type",
      "begin": "((single)\\s*)?(class)\\s*([a-zA-Z0-9_]+\\b)|((single)\\s*)?(struct)\\s*([a-zA-Z0-9_]+\\b)",
      "beginCaptures": {
        "2": {
          "name": "storage.modifier"
        },
        "3": {
          "name": "keyword.other.class"
        },
        "4": {
          "name": "entity.name.type.class"
        },
        "6": {
          "name": "storage.modifier"
        },
        "7": {
          "name": "keyword.other.struct"
        },
        "8": {
          "name": "entity.name.type.struct"
        }
      },
      "end": "(?<=\\})",
      "endCaptures": {},
      "patterns": [
        {
          "begin": "(:)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.colon"
            }
          },
          "while": "(,)",
          "whileCaptures": {
            "1": {
              "name": "punctuation.separator.comma"
            }
          },
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        {
          "include": "#type_args"
        },
        {
          "begin": "(\\{)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.curlybrace.open"
            }
          },
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.curlybrace.close"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#constructor-declaration"
            },
            {
              "include": "#function-declaration"
            },
            {
              "include": "#variable-declaration"
            }
          ]
        }
      ]
    },
    "enum-declaration": {
      "begin": "((single)\\s*)?(enum)\\s*([a-zA-Z0-9_]+\\b)",
      "beginCaptures": {
        "2": {
          "name": "storage.modifier"
        },
        "3": {
          "name": "keyword.other.enum"
        },
        "4": {
          "name": "entity.name.type.enum"
        }
      },
      "end": "(?<=\\})",
      "endCaptures": {},
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "begin": "(\\{)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.curlybrace.open"
            }
          },
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.curlybrace.close"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "begin": "[a-zA-Z0-9_]+\\b",
              "beginCaptures": {
                "0": {
                  "name": "entity.name.variable.enum-member"
                }
              },
              "end": "(,)|(?=\\})",
              "endCaptures": {
                "1": {
                  "name": "punctuation.separator.comma"
                }
              },
              "patterns": [
                {
                  "include": "#comment"
                },
                {
                  "name": "keyword.operator.assignment",
                  "match": "=",
                  "captures": {}
                },
                {
                  "include": "#expression"
                }
              ]
            }
          ]
        }
      ]
    },
    "type_args": {
      "begin": "(<)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.typeparameters.begin"
        }
      },
      "end": "(>)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.typeparameters.end"
        }
      },
      "patterns": [
        {
          "name": "entity.name.type.type-parameter",
          "match": "((single\\b\\s*)?)[a-zA-Z0-9_]+\\b",
          "captures": {
            "1": {
              "name": "storage.modifier"
            }
          }
        },
        {
          "match": "(,)",
          "captures": {
            "1": {
              "name": "punctuation.separator.comma"
            }
          }
        }
      ]
    },
    "rule": {
      "name": "meta.rule",
      "begin": "((disabled)\\s*)?(rule)\\s*(:)",
      "beginCaptures": {
        "2": {
          "name": "storage.modifier"
        },
        "3": {
          "name": "keyword.control"
        },
        "4": {
          "name": "punctuation.separator.colon"
        }
      },
      "end": "(?<=;|\\})",
      "endCaptures": {},
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string-interpolated"
        },
        {
          "include": "#number"
        },
        {
          "match": "(Event|Team|Player)\\s*(\\.)\\s*([a-zA-Z0-9_]+\\b)",
          "captures": {
            "1": {
              "name": "support.type"
            },
            "2": {
              "name": "punctuation.accessor"
            },
            "3": {
              "name": "support.variable"
            }
          }
        },
        {
          "include": "#if-statement"
        },
        {
          "include": "#block"
        }
      ]
    },
    "argument-list": {
      "name": "meta.arguments",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "begin": "([a-zA-Z0-9_]+\\b)\\s*(:)",
          "beginCaptures": {
            "1": {
              "name": "variable.parameter"
            },
            "2": {
              "name": "punctuation.separator.colon"
            }
          },
          "end": "(?=,|\\))",
          "endCaptures": {},
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#expression"
        },
        {
          "name": "punctuation.separator.comma",
          "match": ",",
          "captures": {}
        }
      ]
    },
    "function-call": {
      "name": "meta.functioncall",
      "begin": "((\\.)\\s*)?([a-zA-Z0-9_]+\\b)\\s*((<)\\s*((,)?\\s*(?<type>(const\\s*)?(\\(\\s*(\\g<type>\\s*(,\\s*)?)*\\)|[a-zA-Z0-9_]+\\b\\s*(<\\s*(,?\\s*\\g<type>\\s*)+>)?)\\s*(\\[\\s*\\]\\s*)*(\\|\\s*\\g<type>\\s*)*(=>\\s*\\g<type>\\s*)?)\\s*)*(>))?\\s*(\\()",
      "beginCaptures": {
        "2": {
          "name": "punctuation.accessor"
        },
        "3": {
          "name": "entity.name.function"
        },
        "5": {
          "name": "punctuation.definition.typeparameters.begin"
        },
        "7": {
          "name": "punctuation.separator.comma"
        },
        "8": {
          "name": "meta.type",
          "patterns": [
            {
              "include": "#type-matcher"
            }
          ]
        },
        "18": {
          "name": "punctuation.definition.typeparameters.end"
        },
        "19": {
          "name": "punctuation.parenthesis.open"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close"
        }
      },
      "patterns": [
        {
          "include": "#argument-list"
        }
      ]
    },
    "new": {
      "begin": "(new)\\s*(?<type>(const\\s*)?(\\(\\s*(\\g<type>\\s*(,\\s*)?)*\\)|[a-zA-Z0-9_]+\\b\\s*(<\\s*(,?\\s*\\g<type>\\s*)+>)?)\\s*(\\[\\s*\\]\\s*)*(\\|\\s*\\g<type>\\s*)*(=>\\s*\\g<type>\\s*)?)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.new"
        },
        "2": {
          "name": "meta.type",
          "patterns": [
            {
              "include": "#type-matcher"
            }
          ]
        },
        "12": {
          "name": "punctuation.parenthesis.open"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close"
        }
      },
      "patterns": [
        {
          "include": "#argument-list"
        }
      ]
    }
  }
}