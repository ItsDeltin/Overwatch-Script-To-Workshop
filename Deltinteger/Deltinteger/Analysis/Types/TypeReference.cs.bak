using System;
using System.Collections.Generic;
using DS.Analysis.Utility;
using DS.Analysis.Scopes;

namespace DS.Analysis.Types
{
    class TypeReference : IObservable, IObserver, IDisposable
    {
        readonly TypeReference[] _generics;

        readonly ObserverCollection _observers = new ObserverCollection();
        readonly List<IDisposable> _genericWatchers = new List<IDisposable>();

        protected TypeReference(TypeReference[] generics)
        {
            _generics = generics ?? new TypeReference[0];

            foreach (var generic in _generics)
                _genericWatchers.Add(generic.Watch(this));
        }

        public void Complete()
        {
            // TODO: set flag
        }

        public virtual void Update() => _observers.Set();

        public IDisposable Watch(IObserver observer) => _observers.Add(observer);

        public TypeReferrer MakeReferrer() => new TypeReferenceReferrer(this);

        public virtual void Dispose()
        {
            _observers.Dispose();
            foreach (var genericWatcher in _genericWatchers)
                genericWatcher.Dispose();
        }

        class TypeReferenceReferrer : TypeReferrer
        {
            readonly TypeReference _typeReference;
            public TypeReferenceReferrer(TypeReference typeReference) => _typeReference = typeReference;
            public override IDisposable Subscribe(IObserver<CodeType> observer) => _typeReference.
        }
    }

    class IdentifierTypeReference : TypeReference
    {
        readonly ScopeWatcher _identifier;

        protected IdentifierTypeReference(ScopeWatcher identifier, TypeReference[] generics) : base(generics)
        {
            _identifier = identifier;
        }

        public override void Update()
        {
            base.Update();
        }

        public override void Dispose()
        {
            base.Dispose();
            _identifier.Dispose();
        }
    }
}