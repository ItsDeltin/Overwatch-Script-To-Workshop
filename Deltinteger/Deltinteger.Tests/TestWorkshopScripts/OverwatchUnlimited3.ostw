settings
{
	main
	{
		Description: "Battle with 106 Custom Hero Classes in the FlashPoint Gamemode\r\nAll of the names are from the FGO Universe or jokes\r\nhttps://discord.com/invite/VKphWxqvj3\r - updates and discussions\nhttps://workshop.codes/RTMJ2\r - All abilities explained\nCode: RTMJ2"
		Mode Name: "Overwatch Unlimited™ 3"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Match Voice Chat: Enabled
		Max Spectators: 12
		Max Team 1 Players: 3
		Max Team 2 Players: 3
		Return To Lobby: Never
		Swap Teams After Match: No
	}

	modes
	{
		Flashpoint

		General
		{
			Capture Speed Modifier: 350%
			First Active Control Point: Random
			Game Mode Start: Immediately
			Hero Limit: Off
			Respawn Time Scalar: 80%
			Score To Win: 5
			Scoring Speed Modifier: 80%
			Skins: Off
			Spawn Health Packs: Enabled
			Tank Role Passive Health Bonus: Disabled
		}
	}

	heroes
	{
		General
		{
			Healing Dealt: 80%
			Healing Received: 80%
			Ultimate Generation - Combat: 251%
			Ultimate Generation - Passive: 170%

			Bastion
			{
				Infinite Ultimate Duration: On
				Ultimate Duration: 260%
				Ultimate Generation - Combat Configuration: Artillery: 225%
				Ultimate Generation - Passive Configuration: Artillery: 140%
				Ultimate Generation Configuration: Artillery: 155%
			}

			Brigitte
			{
				Repair Pack Cooldown Time: 120%
				Shield Bash Cooldown Time: 70%
				Ultimate Generation - Combat Rally: 55%
			}

			D.Va
			{
				Damage Dealt: 125%
				Damage Received: 120%
				Defense Matrix Recharge Rate: 90%
				Health: 80%
				Projectile Speed: 115%
				Ultimate Generation - Combat Self-Destruct: 250%
				Ultimate Generation - Passive Self-Destruct: 120%
				Ultimate Generation Self-Destruct: 160%
			}

			Doomfist
			{
				Health: 50%
				Ultimate Generation - Combat Meteor Strike: 70%
				Ultimate Generation Meteor Strike: 110%
			}

			Echo
			{
				Jump Vertical Speed: 155%
				Movement Gravity: 40%
				Movement Speed: 110%
				Projectile Speed: 500%
				Ultimate Generation - Combat Duplicate: 70%
				Ultimate Generation - Passive Duplicate: 110%
				Ultimate Generation Duplicate: 110%
			}

			Genji
			{
				Movement Speed: 95%
				Ultimate Duration: 130%
				Ultimate Generation - Combat Dragonblade: 90%
			}

			Hanzo
			{
				Storm Arrows Quantity: 3
				Ultimate Generation - Combat Dragonstrike: 90%
			}

			Illari
			{
				Damage Dealt: 200%
				Healing Pylon Cooldown Time: 120%
				Health: 235%
				Movement Speed: 115%
				Projectile Speed: 500%
				Ultimate Generation - Combat Captive Sun: 165%
				Ultimate Generation - Passive Captive Sun: 135%
			}

			Junker Queen
			{
				Damage Dealt: 130%
				Healing Received: 60%
				Health: 145%
				Jagged Blade Knockback Scalar: 400%
				Jump Vertical Speed: 110%
				Movement Speed: 115%
				Projectile Speed: 145%
				Ultimate Generation - Combat Rampage: 150%
				Ultimate Generation - Passive Rampage: 160%
			}

			Junkrat
			{
				Concussion Mine Knockback Scalar: 200%
				Damage Dealt: 95%
				Frag Launcher Knockback Scalar: 0%
				Health: 215%
				Jump Vertical Speed: 120%
				Movement Speed: 130%
				Projectile Gravity: 330%
				Projectile Speed: 330%
				Steel Trap Cooldown Time: 50%
				Ultimate Duration: 135%
				Ultimate Generation - Combat RIP-Tire: 250%
				Ultimate Generation - Passive RIP-Tire: 120%
				Ultimate Generation RIP-Tire: 130%
			}

			Kiriko
			{
				Damage Dealt: 150%
				Healing Received: 80%
				Health: 185%
				Jump Vertical Speed: 115%
				Movement Gravity: 105%
				Movement Speed: 125%
				Protection Suzu Cooldown Time: 90%
				Swift Step Distance Scalar: 300%
				Ultimate Generation - Combat Kitsune Rush: 215%
				Ultimate Generation - Passive Kitsune Rush: 145%
			}

			Lifeweaver
			{
				Ammunition Clip Size Scalar: 125%
				Damage Dealt: 155%
				Healing Dealt: 25%
				Healing Received: 90%
				Health: 175%
				Jump Vertical Speed: 105%
				Movement Speed: 130%
				Petal Platform Cooldown Time: 150%
				Projectile Speed: 360%
				Rejuvenating Dash Healing: 500%
				Tree of Life Health: 50%
				Ultimate Generation - Combat Tree of Life: 160%
				Ultimate Generation Tree of Life: 140%
			}

			Lúcio
			{
				Ultimate Generation - Combat Sound Barrier: 215%
				Ultimate Generation Sound Barrier: 110%
			}

			Mauga
			{
				Cardiac Overdrive Healing: 90%
				Damage Dealt: 135%
				Healing Received: 165%
				Health: 105%
				Incendiary Chaingun Ignite Rate: 110%
				Movement Speed: 120%
				Ultimate Generation - Combat Cage Fight: 190%
				Ultimate Generation - Passive Cage Fight: 155%
				Ultimate Generation Cage Fight: 120%
			}

			Mei
			{
				Blizzard Freeze Minimum: 40%
				Blizzard Freeze Rate Scalar: 90%
				Damage Dealt: 70%
				Ultimate Generation - Combat Blizzard: 90%
			}

			Mercy
			{
				Weapons Enabled: Caduceus Blaster Only
			}

			Orisa
			{
				Health: 80%
				Ultimate Generation - Combat Terra Surge: 250%
				Ultimate Generation - Passive Terra Surge: 120%
				Ultimate Generation Terra Surge: 115%
			}

			Pharah
			{
				Ammunition Clip Size Scalar: 250%
				Hover Jets: Off
				Jump Vertical Speed: 130%
				Movement Gravity: 50%
				Rocket Launcher Knockback Scalar: 0%
				Ultimate Generation Barrage: 95%
			}

			Ramattra
			{
				Damage Dealt: 110%
				Damage Received: 70%
				Health: 125%
				Movement Speed: 125%
				Nemesis Form Cooldown Time: 110%
				Projectile Speed: 500%
				Ultimate Generation - Combat Annihilation: 135%
				Ultimate Generation - Passive Annihilation: 180%
				Ultimate Generation Annihilation: 115%
			}

			Reaper
			{
				Ultimate Generation - Combat Death Blossom: 265%
				Ultimate Generation Death Blossom: 195%
			}

			Reinhardt
			{
				Health: 80%
				Ultimate Generation - Combat Earthshatter: 80%
				Ultimate Generation Earthshatter: 95%
			}

			Roadhog
			{
				Health: 80%
				Whole Hog Knockback Scalar: 0%
			}

			Sigma
			{
				Experimental Barrier: Off
				Health: 90%
				Projectile Gravity: 500%
				Projectile Speed: 500%
			}

			Sojourn
			{
				Damage Dealt: 130%
				Health: 155%
				Movement Speed: 115%
				Power Slide Cooldown Time: 72%
				Projectile Speed: 125%
				Railgun Alt Fire Energy Charge Rate: 128%
				Ultimate Generation - Combat Overclock: 250%
				Ultimate Generation Overclock: 180%
			}

			Soldier: 76
			{
				Projectile Speed: 500%
			}

			Sombra
			{
				Damage Dealt: 125%
				Health: 200%
				Movement Speed: 120%
				Translocator Cooldown Time: 145%
				Ultimate Generation - Combat EMP: 155%
				Ultimate Generation - Passive EMP: 115%
				Ultimate Generation EMP: 125%
			}

			Symmetra
			{
				Sentry Turret Cooldown Time: 45%
			}

			Torbjörn
			{
				Damage Dealt: 125%
				Deploy Turret Cooldown Time: 0%
				Health: 200%
				Movement Speed: 115%
				Overload Cooldown Time: 95%
				Overload Duration Scalar: 115%
				Projectile Speed: 115%
				Ultimate Generation - Combat Molten Core: 220%
				Ultimate Generation Molten Core: 160%
			}

			Tracer
			{
				Blink Cooldown Time: 67%
				Recall Cooldown Time: 60%
				Ultimate Generation - Combat Pulse Bomb: 90%
			}

			Winston
			{
				Damage Dealt: 140%
				Health: 125%
				Jump Pack Cooldown Time: 90%
				Jump Pack Knockback Scalar: 120%
				Movement Speed: 115%
				Ultimate Generation - Combat Primal Rage: 235%
				Ultimate Generation Primal Rage: 150%
			}

			Wrecking Ball
			{
				Adaptive Shield Cooldown Time: 80%
				Damage Dealt: 95%
				Damage Received: 70%
				Grappling Claw Cooldown Time: 80%
				Grappling Claw Knockback Scalar: 190%
				Health: 125%
				Minefield Knockback Scalar: 400%
				Movement Speed: 115%
				Piledriver Cooldown Time: 80%
				Ultimate Generation - Combat Minefield: 195%
				Ultimate Generation Minefield: 170%
			}

			Zarya
			{
				Damage Dealt: 135%
				Health: 125%
				Movement Gravity: 115%
				Movement Speed: 115%
				Particle Barrier Cooldown Time: 135%
				Particle Cannon Secondary Knockback Scalar: 135%
				Ultimate Generation - Combat Graviton Surge: 150%
				Ultimate Generation Graviton Surge: 150%
			}

			Zenyatta
			{
				Projectile Speed: 150%
				Ultimate Generation - Combat Transcendence: 105%
			}
		}
	}

	extensions
	{
		Beam Effects
		Buff Status Effects
		Debuff Status Effects
		Energy Explosion Effects
		Kinetic Explosion Effects
		Explosion Sounds
		Play More Effects
		Spawn More Dummy Bots
		Projectiles
	}
}

variables
{
	global:
		0: A
		7: H
		11: L
		15: P
		18: S
		26: Close_enemies_ULT_buff_array
		27: Global_ULTButton_1
		28: Spiderman_trap_list
		29: Global_ULTButton_2
		30: Global_ULTButton_3
		31: Transport_Hero
		36: Falling_floor_array
		37: Smaller_reduced_healthpack
		127: antiCrashActivated

	player:
		0: A
		1: B
		2: C
		3: D
		4: E
		5: F
		6: G
		7: H
		8: I
		9: J
		10: K
		11: L
		12: M
		13: N
		14: O
		15: P
		16: Q
		17: R
		18: S
		19: T
		20: U
		21: V
		22: W
		23: X
		24: Y
		25: Z
		26: Selected_Hero
		27: selected_hero_list_number
		28: Effects
		29: Medusa_trap
		30: Medusa_ultimate
		31: FoV_and_lineOFsight_player
		32: blood_beam_pool
		33: Medea_rule_breaker
		34: for_loop_2
		35: moctezuma_lifted
		36: Berserker_lives
		37: Snow_protection_area
		38: heal_over_time
		39: was_damaged
		40: Hassan_deathmark
		41: Nobunaga_curse
		42: selecting_HUD
		43: Holy_heal
		44: Chase_speed_para
		45: is_falling
		46: in_world_text
		47: Wallee_ing
		48: simo_haya_ab2_array
		49: Jehsus_icon
		50: Jehsus_protected_player
		51: Lanling_array
		52: Snow_protection_active
		53: Gate_of_Babylon_index
		54: Lanling_master
		55: is_tracer_marked
		56: delay_tagger
		57: enkidu_float
		58: color
		59: has_soul
		60: ozymandias_master
		61: shakespeare_master
		62: Choice_rock_paper_scissors
		63: for_loop
		64: Mahito_Transfigured
		65: is_curie_cursed
		66: Curserer_master
		67: B_3
		68: Blood_arthur_1
		69: Blood_arthur_2
		70: Blood_arthur_3
		71: Blood_arthur_4
		72: Blood_arthur_5
		73: healthpack_cursed
		74: lighting_pool
		75: Moving_ball
		76: Moving_ball_array
		77: Moving_ball_trigger
		78: Emiya_master
		79: leonidas_shield
		80: trump_wait_time
		81: trump_wait_middle
		82: ozymandias_ab1_using
		83: jehsus_master
		84: HUD_tutorial_screen
		85: garden_value
		86: saber_wind_gust
		87: vamp_absorb
		88: All_explanation_text
		89: air_area_difference_array
		90: Hassan_Hand_ULT
		91: lovecraft_ab1_resource
		92: is_player_anchored
		93: anchor_position
		94: anchor_effect
		95: size
		96: Is_Crippled
		97: moctezuma_ab1_active
		98: Vlad_effect_master
		99: filtered_array
		100: Medea_rule_breaker2
		101: Donald_chaser1
		102: Solomon_pillar_array
		103: Is_Using_Ultimate
		104: solomon_master
		105: Donald_chaser2
		106: moira_dummy
		107: gilles_de_rais_damage
		108: in_area_counter
		109: mordred_extra_armor
		110: is_healing_cursed
		111: moctezuma_attack
		112: saint_lucy_person
		113: playerSpeed
		114: raycast_hit_position
		115: raycast_hit_position2
		116: raycast_hit_player
		117: raycast_lenght
		118: hassan_near_sight_list
		119: chase_Variable_time
		120: chase_Variable_at_rate
		121: chase_variable_destination
		122: chase_variable_duration
		123: chase_variable_rate_speed
		124: chase_variable_destination2
		125: jack_the_ripper_master
		126: hokusai_check_teleport
		127: is_damage_reversing
}

subroutines
{
	1: Bedivere_ult
	2: create_dummy_of_EventPlayer
	3: Snow_storm
	4: Gilgamesh_cleaning_GOB
	8: calling_nameplates_restart
	9: saber_alter_wind_gust
	10: transfigure_victim
	11: remove_mordred_armor
	12: vlad_effect_beam_loop
	15: xuanzang_ULT_loop
	16: ultimate_ender
	17: SaintLucy_ab2_loop
	18: winston_AoE_slow
	19: Farthest_solomon_array_minion
	20: level_up_call_subroutine
	21: iskandar_cancel_animations_loop
	23: gilles_de_rais_tentacle_loop
	25: hassan_100_loop
	26: atalante_ultimate_loop
	27: charles_de_gaulle_ab2_loop
	28: sieg_ab2
	29: reaper_set_lower_HP
	31: mordred_ultimate_damage_loop
	32: can_use_blade_subroutine
	33: houdini_create_clone
	35: enkidu_ab1_loop
	36: moving_ball_ab2_loop
	37: tawara_tota_remove_armor
	38: tesla_ab1_loop
	39: karna_laser_loop
	41: ozymandias_ab2_loop
	42: salome_setup_ab2
	43: salome_ab2_damage_loop
	45: solomon_ab1_loop
	46: saint_lucy_subroutine
	47: caster_gilgamesh_ab1
	49: enkidu_ab2_loop
	51: simo_haya_invisibility_loop
	52: tesla_cooldown_reset
	54: frankenstein_good_loop
	55: stop_healing_over_time
	56: raycast_hit_position1
	58: ozymandias_ab1_loop
	59: lovecraft_start_resource_down
	60: leonidas_dash
	62: excalibur_morgan
	63: baptiste_ult_subroutine
	66: Saber_alter_ULT_ball
	67: lovecraft_ab1_resource_loop
	68: felix_faust_ab1_loop
	71: Muramasa_ab2_loop
	73: Solomon_ab2_loop
	74: raycast_hit_position2
	75: chase_player_var_time
	76: chase_player_var_speed
	77: raycast_hit_player
	78: lovecraft_clear_ab1
	79: emyia_clear_shield
	80: FoV_and_LoS_player_select
	81: caesar_melee_cooldown
	85: Enable_Buttons_sub
	86: Tracer_trigger
	87: mei_spiderwoman_loop
	88: Symmetra_AA_mine
	89: float_enemy_subroutine
	90: float_player_above_level
	91: create_nameONplayer
	92: destroy_nameONplayer
	93: Auto_tracking_variable_Rule
	94: Franken_Loop_subroutine
	95: Area_Casting_Animation
	96: Felix_ballin
}

rule("anti crash")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Server Load > 230;
		Global.antiCrashActivated == False;
	}

	actions
	{
		Wait(True, Abort When False);
		Small Message(All Players(All Teams), Custom String("Anti crash system activated"));
		Set Slow Motion(10);
		Global.antiCrashActivated = True;
	}
}

rule("disable anti crash")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.antiCrashActivated == True;
		Server Load < 200;
	}

	actions
	{
		Set Slow Motion(100);
		Global.antiCrashActivated = False;
	}
}

rule("Player Speed automator")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		"@Condition isAssemblingHeroes() == false"
		Is Between Rounds == False;
		Event Player.playerSpeed[True] != Event Player.playerSpeed[False];
	}

	actions
	{
		Event Player.playerSpeed[True] = Event Player.playerSpeed[False];
		Set Move Speed(Event Player, Event Player.playerSpeed[True]);
	}
}

rule("Healthpacks give extra life (now its 0 or -25% might make it -50% for everyone cooldown)")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Event Was Health Pack == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), Array Contains(Global.Smaller_reduced_healthpack, Event Player)
			? Ability Cooldown(Event Player, Button(Ability 2)) - Ability Cooldown(Event Player, Button(Ability 2)) / 4 : 0);
		If(!(Hero Of(Event Player) == Hero(Hanzo) && Event Player.selected_hero_list_number == Null));
			Set Ability Cooldown(Event Player, Button(Ability 1), Array Contains(Global.Smaller_reduced_healthpack, Event Player)
				? Ability Cooldown(Event Player, Button(Ability 1)) - Ability Cooldown(Event Player, Button(Ability 1)) / 4 : 0);
		End;
		Skip If(Hero Of(Event Player) == Hero(Brigitte) && Event Player.selected_hero_list_number == 1, True);
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 15);
	}
}

rule("Give extra ultimate when players near player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Array Contains(Global.Close_enemies_ULT_buff_array, Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.in_area_counter = Filtered Array(Players Within Radius(Event Player, 8, Opposite Team Of(Team Of(Event Player)), Off),
			Entity Exists(Current Array Element));
		If(Count Of(Event Player.in_area_counter) >= 1);
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Count Of(Event Player.in_area_counter) * 2);
		End;
		Wait(0.850, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Reset when spawning or re entering spawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Is In Spawn Room(Event Player) || Array Contains(Global.Transport_Hero, Event Player)) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Call Subroutine(calling_nameplates_restart);
		Destroy HUD Text(Event Player.HUD_tutorial_screen[8]);
		Create HUD Text(Event Player, Null, Event Player.All_explanation_text[Event Player.selected_hero_list_number], Null, Left, 1,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_tutorial_screen[8] = Last Text ID;
		Call Subroutine(Enable_Buttons_sub);
		Modify Global Variable(Smaller_reduced_healthpack, Remove From Array By Value, Event Player);
		Modify Global Variable(Transport_Hero, Remove From Array By Value, Event Player);
		Stop Forcing Player To Be Hero(Event Player);
		Clear Status(Event Player, Unkillable);
		Disable Voice Chat(Event Player, True, False, True);
		Set Aim Speed(Event Player, 100);
		Stop Transforming Throttle(Event Player);
		Event Player.Emiya_master = Null;
		Set Jump Vertical Speed(Event Player, 100);
		Stop Facing(Event Player);
		Event Player.is_tracer_marked[False] = False;
		Destroy Effect(Event Player.Effects[3]);
		Stop All Heal Over Time(Event Player);
		Destroy Icon(Event Player.Effects[4]);
		Destroy Effect(Event Player.Effects[True]);
		Destroy Icon(Event Player.Effects[2]);
		Destroy Effect(Event Player.Effects[2]);
		Event Player.trump_wait_middle = False;
		Event Player.vamp_absorb = False;
		Stop All Damage Over Time(Event Player);
		Event Player.healthpack_cursed[0] = False;
		Event Player.healthpack_cursed[4] = False;
		Stop Scaling Barriers(Event Player);
		Stop Chasing Player Variable(Event Player, lovecraft_ab1_resource);
		Destroy Effect(Event Player.Effects[True]);
		Destroy Icon(Event Player.Effects[2]);
		Set Invisible(Event Player, None);
		Remove All Health Pools From Player(Event Player);
		Stop Camera(Event Player);
		Destroy HUD Text(Event Player.HUD_tutorial_screen[7]);
		Destroy HUD Text(Event Player.in_world_text[1]);
		Destroy In-World Text(First Of(Event Player.in_world_text));
		Destroy Progress Bar HUD Text(Event Player.HUD_tutorial_screen[6]);
		Modify Global Variable(S, Remove From Array By Value, Event Player);
		Modify Global Variable(H, Remove From Array By Value, Event Player);
		Modify Global Variable(L, Remove From Array By Value, Event Player);
		Global.antiCrashActivated = False;
		Event Player.is_player_anchored = 0;
		Stop Forcing Throttle(Event Player);
		Event Player.Is_Using_Ultimate = False;
		Stop Scaling Player(Event Player);
		Set Damage Received(Event Player, 70);
		Set Max Health(Event Player, 100);
		Set Damage Dealt(Event Player, 100);
		Set Projectile Speed(Event Player, 100);
		Set Healing Dealt(Event Player, 100);
		Set Healing Received(Event Player, 100);
		Set Move Speed(Event Player, 100);
		Set Gravity(Event Player, 100);
		Event Player.is_healing_cursed = False;
		"current player speed"
		Event Player.playerSpeed[True] = 100;
		"value to modify"
		Event Player.playerSpeed[False] = 100;
		Enable Movement Collision With Environment(Event Player);
		Stop Chasing Player Variable(Event Player, lovecraft_ab1_resource);
		"0, 1, 2  EMPTY 4, 5 , 6 = at the indexes its the hero of event player"
		Global.A[Team Of(Event Player) == Team 1 ? Slot Of(Event Player) : Slot Of(Event Player) + 4] = Hero Of(Event Player);
		Event Player.selecting_HUD = True;
		Destroy HUD Text(Event Player.in_world_text[1]);
		"explanation text"
		Destroy In-World Text(First Of(Event Player.HUD_tutorial_screen));
		Call Subroutine(calling_nameplates_restart);
		Skip If(Event Player.Mahito_Transfigured[3] == False, 4);
		Wait(0.089, Ignore Condition);
		Event Player.selected_hero_list_number = Event Player.Mahito_Transfigured[2];
		Stop Forcing Player To Be Hero(Event Player);
		Event Player.Mahito_Transfigured[0] = False;
		Create In-World Text(Local Player, Custom String("- - - - - - - TUTORIAL - - - - - - -\n{0}", Custom String(
			"Objective: Kill the enemies\r\n(back) {1} : {2} (forward)\r\n{0}", Custom String(
			"\r\nPress ({1}) to select the class\r\nCrouch 2s in Spawn for Random Class\r\n{0}", Custom String(
			"Game has 106! Custom Hero SubClasses\r\n{0}", Custom String("All abilities are explained at https://workshop.codes/RTMJ2\r")),
			Input Binding String(Button(Interact))), Input Binding String(Button(Primary Fire)), Input Binding String(Button(
			Secondary Fire)))), Facing Direction Of(Event Player) + Eye Position(Event Player), True, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Event Player.HUD_tutorial_screen[0] = Last Text ID;
		Wait(0.016, Ignore Condition);
		"create the first text ui"
		Create HUD Text(Event Player, Event Player.Selected_Hero[Event Player.selected_hero_list_number], Custom String("{0} / {1}",
			Event Player.selected_hero_list_number, Count Of(Event Player.Selected_Hero) - 1), Null, Top, True, Color(Yellow), Color(
			White), Null, Visible To and String, Default Visibility);
		"delete this if it doesnt work ( it worked)"
		Event Player.in_world_text[1] = Last Text ID;
		"create the above player hud"
		Create In-World Text(All Players(All Teams), Custom String("{0}{1}", Hero Icon String(Hero Of(Event Player)),
			Event Player.Selected_Hero[Event Player.selected_hero_list_number]), Event Player, True, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Event Player.in_world_text[False] = Last Text ID;
		Event Player.selecting_HUD = 2;
		Wait Until(Global.A[Team Of(Event Player) == Team 1 ? Slot Of(Event Player) : Slot Of(Event Player) + 4] != Hero Of(Event Player)
			|| !Is In Spawn Room(Event Player) || Is Button Held(Event Player, Button(Interact)), 99999);
		"explanation text"
		Destroy In-World Text(First Of(Event Player.HUD_tutorial_screen));
		Event Player.selecting_HUD = False;
		Wait Until(Global.A[Team Of(Event Player) == Team 1 ? Slot Of(Event Player) : Slot Of(Event Player) + 4] != Hero Of(Event Player)
			|| !Is In Spawn Room(Event Player), 99999);
		Start Heal Over Time(Event Player, Null, 1, 9000);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Array list for All servants")
{
	event
	{
		Subroutine;
		calling_nameplates_restart;
	}

	actions
	{
		Event Player.All_explanation_text = Empty Array;
		Event Player.Selected_Hero = Empty Array;
		If(Hero Of(Event Player) == Hero(Roadhog));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Caesar"), Custom String(
				" Moctezuma II")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Teleport to victim\r\nAb2: Speed boost\r\n'Melee': Grab enemies\r\nULT: Pull victims to you"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: First punch fully heals\r\nAb2: Confuse enemies around you\r\nULT: 50% fall damage and AoE healing-curse\r\naround you"));
		Else If(Hero Of(Event Player) == Hero(Echo));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Enkidu"), Custom String(
				"Archangel Michael")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"'R.Click':Fly forward\r\n'Jump':Change gravity\r\nAb2: Chain barrage\r\n'Ab1': Shoot a chain\r\n'ULT': Chain enemies&Anti-heal them"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Go through walls, looking at you damages enemies\nULT: Everyone NOT under a roof dies (not you lol)"));
		Else If(Hero Of(Event Player) == Hero(Mercy));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Jeanne D'Arc")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: +DMG & Resistence\r\nAb2: Teleport\r\nULT: Start absorbing all Damage\r\nPress (ULT) again to release IT around you"));
		Else If(Hero Of(Event Player) == Hero(Pharah));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Ishtar"), Custom String("David")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"'Ab1': (HOLD) Fly to where you look\n'Crouch': Stop all movement\nAb2: Big Speed boost\nUltimate: Friendly-fire Nuke on mouse"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"'Ab1': Dash to where you look (3 charges)\nAb2: Damage and stun very close enemies\n'ULT': Instant projectile makes enemies 1HP"));
		Else If(Hero Of(Event Player) == Hero(Mei));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Marie Antoinette"), Custom String(
				"Mahito"), Custom String("Surtr")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"'Shoot+Crouch': Fly\r\nAb1: Hipnotize enemy\r\nAn2: Stick to an enemy\r\nULT: Create Orb\r\nFreeze enemies looking at it"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab2: (Punch)Transform enemy\nULT: Become GigaBuffed Rein\n(EarthShatter Kills people on the ground)"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: IceBlock Smash\nULT: Become drone that spits fire"));
		Else If(Hero Of(Event Player) == Hero(Tracer));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Teodor Kazynsky")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Damage and stun marked enemies\r\nPunch: To mark enemy\r\nULT: EXPLODE all marked enemies"));
		Else If(Hero Of(Event Player) == Hero(D.Va));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Kazuhiko Nagata")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Become Invisible\r\nMatrix: Dodge enemies attacks\r\nULT: One-shot Forward Dash\r\n(Has loading time)"));
		Else If(Hero Of(Event Player) == Hero(Doomfist));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Hassan of the Great Hand"),
				Custom String("Quetzalcoatl"), Custom String("Tamamo Cat"), Custom String("Shinji Hakari")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Invisible\r\nAb2: Dash into enemy\r\nPassive: Backstab +Ult charge\r\nUltimate: RocketPunch to mark enemy\r\nULT again to kill him"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"'Ab1': Knockdown enemies hit\nAb2: Lower gravity and speed buff\nUltimate: Instakill people"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"'Ab1': Invincible 4s after hit\r\nAb2(Toggle)Take 0.1% damage, get pushed instead\r\nPassive: Punch very fast\r\n'ULT': Hyper Punch"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab2: -50%HP or 6s infinite healing\n(50-50 chance)\nULT: Kill a random person in the Match"));
		Else If(Hero Of(Event Player) == Hero(Baptiste));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Jensus Chrust"), Custom String(
				"Starlin")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab2: Temporary armor\nUltimate: Select an ally\nYou and him share Damage & Heal\nIF you are LAST player ALIVE ULT gives\n+Speed&Dmg"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Absorb Life\nAb2: Release Life to Heal \n&Damage around you\nULT:(Hold)\nSteal life from everyone you can SEE"));
		Else If(Hero Of(Event Player) == Hero(Moira));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Medea"), Custom String("Vlad Tepes"),
				Custom String("Felix Faust"), Custom String("Asclepius"), Custom String("Salome"), Custom String("Paracelsus von Hohenheim")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Orb Barrage\nAb2: Absorb then release damage as projectile\nCrouch+Jump:Dash Forward\nULT: 6xDamage"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Super Speed boost\nAb2: Steal ULT charge when damaged\nULT: Create Vampire Orb"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Damage people in LoS\n(Cancels when moved)\nAb2: Throw stun sphere\nULT: Shoot after to release ball\nFloor eats enemy hit"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Charge Orb\nSpin=+Speed&Damage\nPr.Fire:Fire Orb\nSec.Fire: Orb follows enemy\nAb2: Suck enemy ULT\nULT:(PRESS)Revive&Damage ene"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Swap location with a player\nAb2: Create protection area\nULT: Black Hole"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Shoot laser\nAb2: Man Eating Ball\nDamage, Moving CANCELS it\nUltimate: Energy Tsunami"));
		Else If(Hero Of(Event Player) == Hero(Zenyatta));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Adrumf Himler"), Custom String(
				"Ereshkigal"), Custom String("Tristan"), Custom String("Ozymandias")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Gives temporary armor to Ally\nAb2: Hit enemy to confuse him\n(After ability Active)\nULT: Burns enemies"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Stun and damage enemy\nAb2: Starts charging balls\nIt steals ult charge from enemy hit\nULT: Create shrinking prison"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Heal yourself (uses ULT charge)\nAb2: Damage around you\nULT: If they move they die"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: (HOLD) Charge Sunbeam damage\nAb2: Create defensive orb on you\nULT: Kill everyone around you"));
		Else If(Hero Of(Event Player) == Hero(Symmetra));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Gilles de Rais"), Custom String(
				"Donald Drump"), Custom String("Gordon Freeman"), Custom String("Sherlock Holmes")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab2: Deploy 4 damage areas\nPress again after setup to explode them\nULT: Create giant trap on yourself"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Create a Laser Turret-Camera\nPr.Fire to shoot lasers\nAb2: Stun Laser from Camera (if active)\nULT: Real Wall or Double Camer"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: No-clip mode\nAb2: Reverse bouncy castle \nSec.Fire: Capture an enemy\nPr.Fire: Throw enemy away\nULT: Force Push.Cancels ULTs"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab2: Steal Life from enemy\nAnd blind enemy\nSec.Fire: Shoot heal orb\nULT: Cripple enemies around you"));
		Else If(Hero Of(Event Player) == Hero(Brigitte));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Medusa"), Custom String(
				"Mash Kyrielight"), Custom String("Astolfo"), Custom String("Saint Lucia"), Custom String("Hannibal Barca")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Enemy +5s cooldown & rooted\nShield: Stop HOLDING to Freeze enemies that look at You\n(freezes you too)\nULT: (shoot) Fall on "));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Dmg&Push around you\nAb2: Push around Healee\nULT: Pr.Fire becomes whippShot"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Hit enemy to heal\nAb2: +Speed&Dmg\n(smaller life)\nULT: 2* 50% DMG WhipShots"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Push enemy\nAb2: Unkillable Link to ally\nSec.Fire: (HOLD) Give armor to Allies in LoS\nULT: Become giant woman"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Poison enemy&Heal yourself\nAb2: Chain enemy\nPassive: Kills=DMG&Speed Buff\nULT: Unkillable 4s & Temp +1 LEVEL"));
		Else If(Hero Of(Event Player) == Hero(Genji));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Saber Alter"), Custom String(
				"Jack the Ripper"), Custom String("Sasaki Kojiro"), Custom String("Katsushika Hokusai"), Custom String("Hassan of the 100"),
				Custom String("Miyamoto Musashi"), Custom String("Bedivere"), Custom String("Lanling Wang"), Custom String("Nero"),
				Custom String("Senji Muramasa"), Custom String("Siegfried"), Custom String("Mordred"), Custom String("Charlemagne")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Omnidirectional dash\nAb2: Shoot wind gust\nUltimate: Shoot Energy Pillars"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Double dash\nAb2: Go backwards and invisible\nULT: Mark an enemy\nEach hit on target heals +1s invincible"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: AimAssist Dash\nAb2: Dodge while deflecting\nUltimate: 3 hits * 1/3 of enemy MaxHp\n(in front of you)"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Teleport\nAb2: Teleport behind an enemy\n(Backstab =+ damage)\nUltimate: Create tower prison"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Enemy hit starts bleeding\nAb2: Root bleeding victims\nULT: Genji assasins spawn on enemy"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Add elemental effect on enemy hit\nAb2: Switch element type\n     Fire or Ice\nUltimate: Root and Burn enemies hit"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Big enemy ult=Big dmg\nAb2: Immortal & reverse damage\nULT: Spam Dash that slice enemy HP in half"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Steal enemy ULT for a few seconds\nAb2: Shoot a stun projectile \nULT: Force close enemies to look where you look\nAoE Healing"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Burn enemy\nAb2: Take 0 damage from that enemy for 2s\nULT: Can't die + DMG Buff in Area created"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Remove extra armor or life cancel ULTs\nAb2: Create burning area\nULT: Cancel ULTs, Double Fire Damage"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Short speed buff \nAb2: Shoot laser beam\n     press to cancel\nULT: Sec.Fire to shoot (3) energy attacks"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Short poison for enemy\nAb2: Drop extra-armor\n+Speed&Dmg\n(Ab2) now stuns close enemies\nUltimate: Shoot DeathBalls"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Lower HP, Bigger DMG\nAb2: Force an enemy to look at you\nand heal\nUltimate: Homming Shuriken Tornado"));
		Else If(Hero Of(Event Player) == Hero(Reinhardt));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Hercules"), Custom String("Iskandar"),
				Custom String("Frankenstein"), Custom String("Genghis Korn"), Custom String("Avicebron"), Custom String("Mahoraga")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Buff speed and damage\n'Passive': Revive after death\nULT: Heal +1 Life (max 12)"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Cancel animations around you\nAb2: Pull enemy to you\nUltimate: Death ChooChoo Train"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Discharge ULT, damage around you\nAb2: Root enemy for 3s\nPassive:Give ULT to allies in area\nSec.Fire: Big Speed & Armor\nUlti"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: ChangeSize\nBig: big life,big damage\nSmall: big speed, low damage\nULT: Enemies in range become small"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ultimate: Spawn a Rein minion\nAb1: Select farthest rein and move him\nAb2: Teleport Selected rein to you"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Adapt to +15% of enemy DMG\nAb2: +5s cooldowns\nHammer: 2s anti-healing\nULT: +100% Adapt to enemy"));
		Else If(Hero Of(Event Player) == Hero(Orisa));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Charles de Gaulle"), Custom String(
				"Marcus Aurelius")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Sec.Fire: Create a LandMine\nAb2: Enemies can't get inside\nUltimate: Create a Sphere on you\n(Pushes back enemies)"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Passive: Can't die, Only Frozen\nAb1: Transfer HP to allies in circle\nULT:Chain everyone around you to You"));
		Else If(Hero Of(Event Player) == Hero(Hanzo));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Emyia"), Custom String("Gilgamesh"),
				Custom String("Chiron"), Custom String("Atalanta"), Custom String("Chen Gong"), Custom String("Tawara Tōta"), Custom String(
				"Nikola Tesla")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Toggle shield ON|OFF\nAb2: First arrow AoE stun\nULT: Pr.Fire to shoot lasers"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Root enemies around you\nAb2(HOLD): Laser barrage\nUses ULT\nUltimate: Deletes people in area"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Arrow Follows enemy in LoS\nDamage enemy to mark him\nUltimate: Bouncing Homming Arrow"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Track enemy through walls\nAb2: Slow tracked enemy\nPassive:Arrows slow enemies\nULT: Meteor Shower"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Push away close enemies\nAb2: Create a damage tower\nULT: Bouncing DeathBall"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Short punching barrage\nAb2: Each hit gives armor & pushes enemies\nUltimate: One shot dragon"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Defense lightning orb\nAb2: Shoot lightning arcs\nUltimate: Respawn all players in an area\n(click on a location)"));
		Else If(Hero Of(Event Player) == Hero(Lúcio));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Amadeus Mozart"), Custom String(
				"H.P.Lovecraft")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Close Allies big Speed Buff\nAb2: Close Allies heal burst\nULT: Spawn Damage Area on mouse\n(slows enemies inside it)"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Switch to Invulnerable mode\nAb2: Create Clone\n(Clone reverses damage 45/hit)\nULT: Stun Homming Lucio Missile"));
		Else If(Hero Of(Event Player) == Hero(Cassidy));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Billy the Kid"), Custom String(
				"Abigail Williams")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Freeze very close enemies\nAb2: Double damage against armor\nULT: First bullet hit kills the enemy"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Speed buff and stun remove\nAb2: Create stun trap\nULT: Players close to you get damaged"));
		Else If(Hero Of(Event Player) == Hero(Reaper));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Solomon"), Custom String(
				"Charles-Henri Sanson")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Steal or give Ally ULT\nAb2: Create healing and ULT generators\nULT: Poison enemy"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Transfer HP to ally\nAb2: Clone freezes attacker when killed\nULT: Switch HP with enemy"));
		Else If(Hero Of(Event Player) == Hero(Ashe));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Nobunaga"), Custom String(
				"Xuanzang Sanzang"), Custom String("Caster Gilgamesh"), Custom String("William Tell")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Fly to where you look\nAb2: Shoot rockets\nULT: Cancel ULTs and burn enemies inside"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Pull enemies to you\nAb2: Punch enemies away\n'Crouch+Jump':Dash Forward\nULT: Heals|Clear debuff|Cancel enemy ULTs|Fast punch"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Spawn lightning storm\nAb2: Spawn 3 homming projectiles\nULT: Friendly-fire airstrike"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: GrappleHook to close walls\nAb2: Place a trap\nULT: Start charging Railgun\n(Shoot to fire it,Body-shots deals more DMG"));
		Else If(Hero Of(Event Player) == Hero(Soldier: 76));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Cu Chulainn"), Custom String("Achilles"),
				Custom String("Diarmuid Ua Duibhne"), Custom String("Leonidas"), Custom String("Karna"), Custom String("Shakespeare")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Fly\nAb2: Heal&remove stuns\nSec.Fire: 1/5 of enemy life as damage\nULT: First Rocket hit kills the enemy"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Forward-only dash + Unkillable\nAb2: Shoot stun rockets\nULT: Damage dash through walls"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"'Ab1': Switch rocket mode\n(PoisonStack or Invincible cancel)\nAb2: Very close enemy push away \n{0}", Custom String(
				"(remove his invincible)\n'ULT': Disable healing + Double damage\nfor enemies around you")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Dash & Stun\nAb2: Toggle shield\nPassive: LowHP=FastPunches\nULT: Shoot laser+Unkillable"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Fly upwards \nAb2: Laser beam\nSec.Fire: Slow enemy\nULT: Throw a Red Bomb"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Trap starts shooting enemy\nAb2: Create soldier trap\nULT: You and the enemy get poison\nLast alive gets fully healed"));
		Else If(Hero Of(Event Player) == Hero(Ana));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Simo Häyhä"), Custom String(
				"Robin Hood"), Custom String("Semiramis")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Stun enemy + speed buff\nAb2: Invisible while in snow area\n(Area steals ULT charge)\nULT: First bullet shot is a One Shot"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Burn enemy +5s Cooldown to abilities\nAb2: Napalm grenade (Hacks enemies)\nULT: Create a time-bomb"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Go through walls\nAb2:+Damage resistence\nSec.Fire: Removes enemy armor & anti-heal\nUltimate: Shoot laser beam"));
		Else If(Hero Of(Event Player) == Hero(Sigma));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Albert Einstein"), Custom String(
				"The Old Man of the Mountain")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Slow down time\n+Damage while active\nAb2: Enemy gets pushed down\nULT: Push enemies around where you want"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Move fast&Punch people to stun them\nAb2: Victim bleeding\nULT: Enemies hit become 1HP for a few seconds"));
		Else If(Hero Of(Event Player) == Hero(Sombra));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Houdini"), Custom String("Junji Ito")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Sombra clone\nRevives you\n'F' to destroy it\nAb2: Remove all stuns\nULT: Explode clone& confuse enemies"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Passive: Extra damage if the enemy has a lot of kills +SMG Dmg * [(His Kills - Your kills) / 2]\nULT: Become parasite and reverse"));
		Else If(Hero Of(Event Player) == Hero(Widowmaker));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("L.M.Pavlichenko")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Stick to a surface\nAb2: Stuns enemy\nULT: +DMG\nHeadshot stuns enemies\nVenomMine instakills"));
		Else If(Hero Of(Event Player) == Hero(Bastion));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Alfried Krupp von Bohlen"),
				Custom String("Lancelot")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab2: Don't die for a few seconds\nULT: Start charging Railgun\nShoot to release it"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Slow attackers\nAb2: Reverse enemy damage\nULT:  Bastions spam grenades"));
		Else If(Hero Of(Event Player) == Hero(Ramattra));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Gahandhi"), Custom String(
				"Marie Curista")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Hit enemies for 2s of immortality\nULT: Damage heals you"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Curse:Healing, Slow&dmg enemy\nAb1(punch)/Ab2: Curse enemy in LoS\nULT: Double Damage & Infinite Heal while Totem alive"));
		Else If(Hero Of(Event Player) == Hero(Zarya));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Ivan the Terrible"), Custom String(
				"Choso")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"PASSIVE: LifeSteal&ULTSteal\nULT:  Create Clone|If one survives 10s\nGigaBuffed for 6.5s"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: (HOLD)Aimbot Laser\nAb2:AoE Heal(uses HP)\nPASSIVE: LifeSteal Punch\nULT:+45%MAXhp & FREE abilities"));
		Else If(Hero Of(Event Player) == Hero(Winston));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Jack and Hyde")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"'Passive': Enemies around him get slowed\n'RightClick': More damage = more healing\n'Ultimate':  Steal enemy ULT charge "));
		Else If(Hero Of(Event Player) == Hero(Torbjörn));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Winston ChurchHill"), Custom String(
				"Higurama")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab2: Can't die while active\nULT:  Turret has 8x DMG & Resistence"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"PASSIVE: Dies by punching only\nULT:  Rock, Paper, Scissors"));
		Else If(Hero Of(Event Player) == Hero(Sojourn));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("L.H. Osvald")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Unkillable +healing\nAb2: Chain enemy to the ground\nULT: Share Freedom with Enemies"));
		Else If(Hero Of(Event Player) == Hero(Kiriko));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Popa Francesco"), Custom String(
				"Kento Nanami")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Almost infinite range\nAb2: +Heal&ULT to Healee\nULT:First Kunai Headshot Kills\nPASSIVE: Hitscan Kunai"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Passive: If enemy between the rings, he takes 3*Damage\nPassive2: You get 35DMG*TeamScore difference\nAb2: Cleanse curses"));
		Else If(Hero Of(Event Player) == Hero(Junkrat));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Osmama Bindalen")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Give fall damage to enemy\nAb2: Trap damage makes enemy 50%HP\nULT: Inverted Floor Is Lava"));
		Else If(Hero Of(Event Player) == Hero(Junker Queen));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Jeffen Einstein")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab2: Faster while using\nPASSIVE: More bleeding lifesteal\nPASSIVE#2: Knife Grab is very strong"));
		Else If(Hero Of(Event Player) == Hero(Wrecking Ball));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Bunny Musoulini")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab2: The closer the enemy, the less DMG you take\nULT: Pull people around you in Minefield"));
		Else If(Hero Of(Event Player) == Hero(Lifeweaver));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Merlin"), Custom String(
				"Queen Elizabeth II")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1:Invisible & Faster\nAb2: Lock/Revert All players HP\nULT: Clear debuffs & buff allies"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Pr.Fire: Enemy hit takes damage from HP Packs\nAb2: Invert enemy controls\nULT: Invert all enemy healing into Damage"));
		Else If(Hero Of(Event Player) == Hero(Illari));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Cuauhtémoc"), Custom String(
				"Leonardo da Vinci")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Duel an enemy\nOnly you two can damage each other\nULT:Create an explosion"));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Pr.Fire: AirBurst bullets\nSec.Fire: Give Unkillable to Healee\nPassive: Many enemies around you=Big resistence"));
		Else If(Hero Of(Event Player) == Hero(Mauga));
			Modify Player Variable(Event Player, Selected_Hero, Append To Array, Array(Custom String("Maui")));
			Modify Player Variable(Event Player, All_explanation_text, Append To Array, Custom String(
				"Ab1: Root, Cancel Ults, +2s Cooldowns\nAb2: 100% lifesteal\nULT: Unkillable "));
			Modify Global Variable(Smaller_reduced_healthpack, Append To Array, Event Player);
		End;
	}
}

rule("Become All Heroes 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.selecting_HUD == 2;
		Array Contains(Array(Hero(Hanzo), Hero(Orisa), Hero(Reinhardt), Hero(Roadhog), Hero(Sigma), Hero(Ashe), Hero(Cassidy), Hero(
			Doomfist), Hero(Echo), Hero(Genji)), Hero Of(Event Player)) == True;
	}

	actions
	{
		Wait Until(Global.A[Team Of(Event Player) == Team 1 ? Slot Of(Event Player) : Slot Of(Event Player) + 4] != Hero Of(Event Player)
			|| !Is In Spawn Room(Event Player), 99999);
		Skip If(Is In Spawn Room(Event Player), 453);
		If(Hero Of(Event Player) == Hero(Hanzo));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 30;
				Set Max Health(Event Player, 215);
				Set Damage Dealt(Event Player, 105);
				Set Projectile Speed(Event Player, 1000);
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ultimate));
				Global.P = Event Player;
				Global.P.T = False;
				Global.P.X = True;
				Event Player.T = False;
				"players inside UBW"
				Event Player.M = Empty Array;
				Event Player.X = True;
				Modify Global Variable(L, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.playerSpeed[False] += 20;
				Set Max Health(Event Player, 230);
				Set Ultimate Charge(Event Player, 30);
				Set Damage Dealt(Event Player, 130);
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ultimate));
			Else If(Event Player.selected_hero_list_number == 2);
				Event Player.playerSpeed[False] += 20;
				Set Max Health(Event Player, 260);
				Set Damage Dealt(Event Player, 120);
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 1));
				Set Projectile Speed(Event Player, 175);
				Event Player.O = Empty Array;
				Modify Global Variable(S, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 3);
				Event Player.playerSpeed[False] += 45;
				Set Max Health(Event Player, 225);
				Set Damage Dealt(Event Player, 110);
				Set Jump Vertical Speed(Event Player, 145);
				Set Gravity(Event Player, 95);
				Set Projectile Speed(Event Player, 175);
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ability 1));
				Modify Global Variable(S, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 4);
				Event Player.playerSpeed[False] += 45;
				Set Max Health(Event Player, 225);
				Set Damage Dealt(Event Player, 115);
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ultimate));
				Event Player.Is_Using_Ultimate = False;
				Set Projectile Speed(Event Player, 150);
				Disallow Button(Event Player, Button(Ability 2));
				Set Projectile Speed(Event Player, 400);
				Modify Global Variable(L, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 5);
				Event Player.playerSpeed[False] += 45;
				Set Max Health(Event Player, 180);
				Set Damage Dealt(Event Player, 110);
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Secondary Fire));
				Set Projectile Speed(Event Player, 150);
				Allow Button(Event Player, Button(Ability 2));
				Modify Global Variable(S, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 6);
				Event Player.playerSpeed[False] += 45;
				Set Max Health(Event Player, 180);
				Set Damage Dealt(Event Player, 125);
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ultimate));
				Event Player.U = False;
				Set Projectile Speed(Event Player, 150);
				Event Player.H = False;
				Event Player.Z = 6;
				Event Player.X = Vector(222, -999, 44);
				Modify Global Variable(S, Append To Array, Event Player);
			End;
		Else If(Hero Of(Event Player) == Hero(Orisa));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 25;
				Set Max Health(Event Player, 215);
				Set Damage Dealt(Event Player, 120);
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 2));
				Event Player.N = Vector(123, -222, False);
				Event Player.C = False;
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.playerSpeed[False] += 5;
				Set Max Health(Event Player, 310);
				Set Damage Dealt(Event Player, 110);
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ultimate));
				Set Projectile Speed(Event Player, 1000);
				Create Effect(All Players(Team Of(Event Player)), Ring, Color(Lime Green), Event Player, 16, Visible To Position and Radius);
				Event Player.Effects[1] = Last Created Entity;
			End;
		Else If(Hero Of(Event Player) == Hero(Reinhardt));
			If(Event Player.selected_hero_list_number == Null);
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 1));
				Event Player.playerSpeed[False] += 11;
				Set Max Health(Event Player, 147);
				Set Damage Dealt(Event Player, 165);
				Event Player.garden_value = 160;
				Set Projectile Speed(Event Player, 160);
				Event Player.Berserker_lives = 1;
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
				Modify Global Variable(L, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.playerSpeed[False] += 50;
				Set Max Health(Event Player, 180);
				Set Damage Dealt(Event Player, 110);
				Set Projectile Speed(Event Player, 6500);
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 1));
				Event Player.D = False;
				Event Player.Q = False;
			Else If(Event Player.selected_hero_list_number == 2);
				Event Player.playerSpeed[False] += 11;
				Set Max Health(Event Player, 263);
				Set Damage Dealt(Event Player, 145);
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 1));
				Start Rule(frankenstein_good_loop, Restart Rule);
				Create Effect(All Players(Team Of(Event Player)), Ring, Color(Yellow), Event Player, 11, Visible To Position and Radius);
				Event Player.Effects[2] = Last Created Entity;
				Set Projectile Speed(Event Player, 200);
			Else If(Event Player.selected_hero_list_number == 3);
				Event Player.playerSpeed[False] += 50;
				Set Max Health(Event Player, 170);
				Set Damage Dealt(Event Player, 125);
				Disallow Button(Event Player, Button(Ultimate));
				Set Projectile Speed(Event Player, 60);
				Disallow Button(Event Player, Button(Ability 1));
				Event Player.U = False;
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Secondary Fire));
				Event Player.X = 1;
				Event Player.A = 1;
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 4);
				Event Player.playerSpeed[False] += 25;
				Set Max Health(Event Player, 158);
				Set Damage Dealt(Event Player, 90);
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ability 2));
				Set Projectile Speed(Event Player, 300);
				Set Ultimate Charge(Event Player, 100);
				Start Scaling Player(Event Player, 0.750, True);
				Modify Global Variable(H, Append To Array, Event Player);
				Modify Global Variable(L, Append To Array, Event Player);
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 5);
				Event Player.playerSpeed[False] += 35;
				Set Max Health(Event Player, 215);
				Set Damage Dealt(Event Player, 135);
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ultimate));
				Set Projectile Speed(Event Player, 200);
				Modify Global Variable(H, Append To Array, Event Player);
				Modify Global Variable(L, Append To Array, Event Player);
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
				Event Player.A = 0;
				Event Player.FoV_and_lineOFsight_player = Null;
				Modify Global Variable(Smaller_reduced_healthpack, Append To Array, Event Player);
			End;
		Else If(Hero Of(Event Player) == Hero(Roadhog));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 11;
				Set Max Health(Event Player, 146);
				Set Damage Dealt(Event Player, 230);
				Allow Button(Event Player, Button(Primary Fire));
				Event Player.D = False;
				Disallow Button(Event Player, Button(Ability 2));
				Modify Global Variable(H, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.playerSpeed[False] += 60;
				Set Max Health(Event Player, 145);
				Set Damage Dealt(Event Player, 130);
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Primary Fire));
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 2));
				Event Player.D = 1;
				Set Healing Received(Event Player, 499);
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			End;
		Else If(Hero Of(Event Player) == Hero(Sigma));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 20;
				Set Max Health(Event Player, 120);
				Set Damage Dealt(Event Player, 135);
				Disallow Button(Event Player, Button(Primary Fire));
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ultimate));
				Set Projectile Speed(Event Player, 1100);
				Modify Global Variable(L, Append To Array, Event Player);
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.playerSpeed[False] += 55;
				Set Max Health(Event Player, 187);
				Set Damage Dealt(Event Player, 145);
				Disallow Button(Event Player, Button(Primary Fire));
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ability 1));
				Set Projectile Speed(Event Player, 300);
				Event Player.R = 100;
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			End;
		Else If(Hero Of(Event Player) == Hero(Ashe));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 35;
				Set Max Health(Event Player, 250);
				Set Damage Dealt(Event Player, 155);
				Modify Global Variable(L, Append To Array, Event Player);
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 2));
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.playerSpeed[False] += 45;
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Primary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Secondary Fire));
				Set Damage Dealt(Event Player, 266);
				Set Max Health(Event Player, 200);
				Modify Global Variable(L, Append To Array, Event Player);
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 2);
				Event Player.playerSpeed[False] += 10;
				Set Max Health(Event Player, 285);
				Set Damage Dealt(Event Player, 150);
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ability 2));
			Else If(Event Player.selected_hero_list_number == 3);
				Event Player.playerSpeed[False] += 38;
				Set Max Health(Event Player, 230);
				Set Damage Dealt(Event Player, 155);
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ability 2));
			End;
		Else If(Hero Of(Event Player) == Hero(Cassidy));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 45;
				Set Max Health(Event Player, 180);
				Set Damage Dealt(Event Player, 50);
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ability 2));
				Add Health Pool To Player(Event Player, Armor, 125, True, True);
			Else If(Event Player.selected_hero_list_number == 1);
				Set Damage Dealt(Event Player, 125);
				Set Max Health(Event Player, 242);
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ability 1));
				Event Player.playerSpeed[False] += 15;
				Event Player.U = False;
				Modify Global Variable(L, Append To Array, Event Player);
			End;
		Else If(Hero Of(Event Player) == Hero(Doomfist));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 55;
				Set Max Health(Event Player, 228);
				Set Damage Dealt(Event Player, 85);
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Primary Fire));
				Disallow Button(Event Player, Button(Ability 2));
				Event Player.L = False;
				Event Player.Hassan_deathmark = Empty Array;
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
				Modify Global Variable(L, Append To Array, Event Player);
				Modify Global Variable(H, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.playerSpeed[False] += 35;
				Set Damage Dealt(Event Player, 100);
				Disallow Button(Event Player, Button(Primary Fire));
				Disallow Button(Event Player, Button(Ability 2));
				Set Max Health(Event Player, 229);
				Modify Global Variable(S, Append To Array, Event Player);
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 2);
				Allow Button(Event Player, Button(Primary Fire));
				Set Max Health(Event Player, 231);
				Set Damage Dealt(Event Player, 105);
				Disallow Button(Event Player, Button(Ability 2));
				Event Player.X = 1;
				Event Player.U = False;
				Disallow Button(Event Player, Button(Ultimate));
				Event Player.playerSpeed[False] += 55;
				Modify Global Variable(H, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 3);
				Allow Button(Event Player, Button(Primary Fire));
				Set Max Health(Event Player, 233);
				Set Damage Dealt(Event Player, 120);
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ultimate));
				Event Player.playerSpeed[False] += 55;
				Modify Global Variable(H, Append To Array, Event Player);
			End;
		Else If(Hero Of(Event Player) == Hero(Echo));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 50;
				Set Max Health(Event Player, 230);
				Set Damage Dealt(Event Player, 90);
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Set Projectile Speed(Event Player, 250);
				Event Player.C = 1;
				"flight left"
				Event Player.I = 1;
				"chains off"
				Event Player.F = False;
				"chains on"
				Event Player.X = False;
				Modify Global Variable(L, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.playerSpeed[False] += 50;
				Set Max Health(Event Player, 235);
				Set Damage Dealt(Event Player, 90);
				Allow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ultimate));
				Modify Global Variable(L, Append To Array, Event Player);
				Modify Global Variable(H, Append To Array, Event Player);
			End;
		Else If(Hero Of(Event Player) == Hero(Genji));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 30;
				Set Max Health(Event Player, 183);
				Set Damage Dealt(Event Player, 165);
				Event Player.D = False;
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Secondary Fire));
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.playerSpeed[False] += 20;
				Set Max Health(Event Player, 165);
				Set Damage Dealt(Event Player, 150);
				Disallow Button(Event Player, Button(Ultimate));
				Allow Button(Event Player, Button(Ability 2));
			Else If(Event Player.selected_hero_list_number == 2);
				Event Player.playerSpeed[False] += 50;
				Set Max Health(Event Player, 195);
				Set Damage Dealt(Event Player, 165);
				Disallow Button(Event Player, Button(Primary Fire));
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Set Jump Vertical Speed(Event Player, 1);
				Disallow Button(Event Player, Button(Jump));
				Disallow Button(Event Player, Button(Ability 1));
			Else If(Event Player.selected_hero_list_number == 3);
				Event Player.playerSpeed[False] += 30;
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ability 1));
				Set Damage Dealt(Event Player, 155);
				Set Max Health(Event Player, 200);
				Set Ability Cooldown(Event Player, Button(Ability 2), 10);
				Set Jump Vertical Speed(Event Player, 100);
			Else If(Event Player.selected_hero_list_number == 4);
				Event Player.playerSpeed[False] += 55;
				Set Max Health(Event Player, 251);
				Set Damage Dealt(Event Player, 110);
				Disallow Button(Event Player, Button(Ultimate));
			Else If(Event Player.selected_hero_list_number == 5);
				Event Player.playerSpeed[False] += 45;
				Set Max Health(Event Player, 257);
				Set Damage Dealt(Event Player, 110);
				Allow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Primary Fire));
				Disallow Button(Event Player, Button(Ability 2));
				Set Jump Vertical Speed(Event Player, 100);
				Event Player.G = 1;
			Else If(Event Player.selected_hero_list_number == 6);
				Event Player.playerSpeed[False] += 60;
				Set Max Health(Event Player, 250);
				Set Damage Dealt(Event Player, 110);
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Primary Fire));
				Set Jump Vertical Speed(Event Player, 100);
			Else If(Event Player.selected_hero_list_number == 7);
				Event Player.playerSpeed[False] += 30;
				Set Max Health(Event Player, 187);
				Set Damage Dealt(Event Player, 110);
				Disallow Button(Event Player, Button(Primary Fire));
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 8);
				Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String("Selected Enemy:"), Hero Icon String(Hero Of(
					Event Player.FoV_and_lineOFsight_player)), Event Player.FoV_and_lineOFsight_player), Null, Null, Top, False, Color(White),
					Null, Null, Visible To and String, Default Visibility);
				Event Player.HUD_tutorial_screen[7] = Last Text ID;
				Event Player.playerSpeed[False] += 30;
				Set Max Health(Event Player, 221);
				Set Damage Dealt(Event Player, 58);
				Disallow Button(Event Player, Button(Ability 2));
				Allow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Primary Fire));
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 9);
				Event Player.playerSpeed[False] += 35;
				Set Max Health(Event Player, 232);
				Set Damage Dealt(Event Player, 110);
				Set Projectile Speed(Event Player, 250);
				Allow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Primary Fire));
				Event Player.X = 1;
				Event Player.A = 1;
				Set Jump Vertical Speed(Event Player, 100);
				Modify Global Variable(L, Append To Array, Event Player);
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 10);
				Event Player.playerSpeed[False] += 30;
				Set Max Health(Event Player, 264);
				Set Damage Dealt(Event Player, 100);
				Disallow Button(Event Player, Button(Ability 2));
				Allow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Set Projectile Speed(Event Player, 250);
				Disallow Button(Event Player, Button(Primary Fire));
				Modify Global Variable(H, Append To Array, Event Player);
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 11);
				Event Player.playerSpeed[False] += 15;
				Set Max Health(Event Player, 127);
				Set Damage Dealt(Event Player, 115);
				Disallow Button(Event Player, Button(Ability 2));
				Allow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Primary Fire));
				Add Health Pool To Player(Event Player, Armor, 365, True, True);
				Event Player.mordred_extra_armor = Last Created Health Pool;
				Event Player.K = False;
				Set Status(Event Player, Null, Unkillable, 9999);
			Else If(Event Player.selected_hero_list_number == 12);
				Event Player.playerSpeed[False] += 30;
				Set Max Health(Event Player, 170);
				Set Damage Dealt(Event Player, 100);
				Disallow Button(Event Player, Button(Ultimate));
				Set Projectile Speed(Event Player, 250);
				Disallow Button(Event Player, Button(Primary Fire));
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			End;
		End;
		Event Player.HUD_tutorial_screen[6] = Last Text ID;
		Skip If(!Is In Spawn Room(Event Player), 1);
		Wait Until(Is In Spawn Room(Event Player), 99999);
	}
}

rule("Become All Heroes 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.selecting_HUD == 2;
		Array Contains(Array(Hero(Mei), Hero(Pharah), Hero(Soldier: 76), Hero(Sombra), Hero(Symmetra), Hero(Widowmaker), Hero(Ana), Hero(
			Baptiste), Hero(Brigitte), Hero(Lúcio), Hero(Mercy), Hero(Moira)), Hero Of(Event Player)) == True;
	}

	actions
	{
		Wait Until(Global.A[Team Of(Event Player) == Team 1 ? Slot Of(Event Player) : Slot Of(Event Player) + 4] != Hero Of(Event Player)
			|| !Is In Spawn Room(Event Player), 99999);
		Skip If(Is In Spawn Room(Event Player), 399);
		If(Hero Of(Event Player) == Hero(Mei));
			Disallow Button(Event Player, Button(Ultimate));
			If(Event Player.selected_hero_list_number == Null);
				Set Ability Cooldown(Event Player, Button(Ability 2), 10);
				Set Move Speed(Event Player, 120);
				Set Max Health(Event Player, 220);
				Disallow Button(Event Player, Button(Ability 1));
				Set Damage Dealt(Event Player, 175);
				Set Projectile Speed(Event Player, 300);
				Disallow Button(Event Player, Button(Ability 2));
				Modify Global Variable(H, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 1);
				Set Damage Dealt(Event Player, 195);
				Set Max Health(Event Player, 255);
				Disallow Button(Event Player, Button(Ability 2));
			Else If(Event Player.selected_hero_list_number == 2);
				Set Projectile Speed(Event Player, 500);
				Set Damage Dealt(Event Player, 275);
				Set Max Health(Event Player, 185);
				Disallow Button(Event Player, Button(Primary Fire));
			End;
		Else If(Hero Of(Event Player) == Hero(Pharah));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 35;
				Set Max Health(Event Player, 210);
				Set Damage Dealt(Event Player, 90);
				Set Projectile Speed(Event Player, 500);
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Jump));
			Else If(Event Player.selected_hero_list_number == 1);
				Create HUD Text(Event Player, Custom String("{0} {1}", Event Player.X, Custom String("/3 dashes")), Null, Null, Top, False, Color(
					White), Null, Null, Visible To and String, Default Visibility);
				Event Player.HUD_tutorial_screen[7] = Last Text ID;
				Stop Chasing Player Variable(Event Player, X);
				Event Player.X = 3;
				Event Player.playerSpeed[False] += 21;
				Set Max Health(Event Player, 110);
				Set Damage Dealt(Event Player, 125);
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Set Projectile Speed(Event Player, 105);
				Add Health Pool To Player(Event Player, Armor, 80, True, True);
				Event Player.Effects[2] = Last Created Health Pool;
				Event Player.D = 3;
				Disallow Button(Event Player, Button(Ability 2));
				"circle area"
				Event Player.C = 1;
				"initial position"
				Event Player.W = Vector(-444, -9999, 1568);
				Event Player.U = False;
				Event Player.Z = False;
				Disallow Button(Event Player, Button(Ability 1));
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			End;
		Else If(Hero Of(Event Player) == Hero(Soldier: 76));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 30;
				Set Max Health(Event Player, 200);
				Set Damage Dealt(Event Player, 100);
				Disallow Button(Event Player, Button(Ultimate));
				Set Projectile Speed(Event Player, 1000);
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ability 2));
				Set Jump Vertical Speed(Event Player, 130);
				Set Gravity(Event Player, 150);
				Modify Global Variable(L, Append To Array, Event Player);
				Modify Global Variable(S, Append To Array, Event Player);
				Modify Global Variable(Smaller_reduced_healthpack, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 2);
				Event Player.playerSpeed[False] += 60;
				Set Max Health(Event Player, 310);
				Set Damage Dealt(Event Player, 35);
				Disallow Button(Event Player, Button(Primary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 1));
				Event Player.D = 1;
				Disallow Button(Event Player, Button(Ability 2));
				Event Player.Q = Empty Array;
				Disallow Button(Event Player, Button(Secondary Fire));
				Set Invisible(Event Player, None);
				Set Projectile Speed(Event Player, 1000);
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.playerSpeed[False] += 35;
				Set Max Health(Event Player, 215);
				Set Damage Dealt(Event Player, 100);
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ability 1));
				Set Projectile Speed(Event Player, 500);
				Modify Global Variable(H, Append To Array, Event Player);
				Modify Global Variable(Smaller_reduced_healthpack, Append To Array, Event Player);
				Event Player.D = False;
			Else If(Event Player.selected_hero_list_number == 3);
				Event Player.playerSpeed[False] += 45;
				Set Max Health(Event Player, 200);
				Set Damage Dealt(Event Player, 125);
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Primary Fire));
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Modify Global Variable(S, Append To Array, Event Player);
				Wait Until(!Is In Spawn Room(Event Player), 0.100);
				Event Player.D = False;
				Event Player.J = Null;
				Event Player.leonidas_shield = 2;
				Event Player.M = 0.600;
				Event Player.Y = False;
			Else If(Event Player.selected_hero_list_number == 4);
				Event Player.playerSpeed[False] += 50;
				Set Max Health(Event Player, 170);
				Set Damage Dealt(Event Player, 135);
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ability 1));
				Allow Button(Event Player, Button(Primary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Set Projectile Speed(Event Player, 250);
				Modify Global Variable(S, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 5);
				Event Player.playerSpeed[False] += 35;
				Set Max Health(Event Player, 280);
				Set Damage Dealt(Event Player, 115);
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ability 1));
				Modify Global Variable(L, Append To Array, Event Player);
				Modify Global Variable(S, Append To Array, Event Player);
			End;
		Else If(Hero Of(Event Player) == Hero(Sombra));
			If(Event Player.selected_hero_list_number == Null);
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 2));
				Modify Global Variable(L, Append To Array, Event Player);
			Else;
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Secondary Fire));
			End;
		Else If(Hero Of(Event Player) == Hero(Symmetra));
			Disallow Button(Event Player, Button(Ability 2));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 35;
				Set Max Health(Event Player, 215);
				Set Damage Dealt(Event Player, 110);
				Set Projectile Speed(Event Player, 500);
				Disallow Button(Event Player, Button(Ultimate));
				Event Player.T[False] = Vector(-222, 2222, False);
				Event Player.T[True] = Vector(-222, 2222, False);
				Event Player.T[2] = Vector(-222, 2222, False);
				Event Player.T[3] = Vector(-222, 2222, False);
				Set Gravity(Event Player, 75);
				Modify Global Variable(H, Append To Array, Event Player);
				Event Player.C = False;
				Event Player.gilles_de_rais_damage = 1;
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.playerSpeed[False] += 35;
				Set Max Health(Event Player, 237);
				Set Damage Dealt(Event Player, 130);
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Primary Fire));
				Disallow Button(Event Player, Button(Ability 1));
				Event Player.U = False;
				Event Player.trump_wait_time = 0.250;
				Event Player.trump_wait_middle = 0.100;
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 2);
				Event Player.playerSpeed[False] += 45;
				Set Max Health(Event Player, 165);
				Set Damage Dealt(Event Player, 130);
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ultimate));
			Else If(Event Player.selected_hero_list_number == 3);
				Event Player.playerSpeed[False] += 30;
				Set Max Health(Event Player, 215);
				Set Damage Dealt(Event Player, 115);
				Disallow Button(Event Player, Button(Ultimate));
				Modify Global Variable(Smaller_reduced_healthpack, Append To Array, Event Player);
			End;
		Else If(Hero Of(Event Player) == Hero(Widowmaker));
			Allow Button(Event Player, Button(Primary Fire));
			Set Move Speed(Event Player, 135);
			Set Max Health(Event Player, 280);
			Set Damage Dealt(Event Player, 125);
			Event Player.E = False;
			Modify Global Variable(L, Append To Array, Event Player);
		Else If(Hero Of(Event Player) == Hero(Ana));
			If(Event Player.selected_hero_list_number == Null);
				Set Projectile Speed(Event Player, 350);
				Event Player.playerSpeed[False] += 10;
				Set Max Health(Event Player, 200);
				Disallow Button(Event Player, Button(Ability 2));
				Set Damage Dealt(Event Player, 150);
				Disallow Button(Event Player, Button(Ultimate));
				Event Player.R = False;
				Event Player.Snow_protection_area = Vector(-222, -222, 132);
				Modify Global Variable(Smaller_reduced_healthpack, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.playerSpeed[False] += 45;
				Set Max Health(Event Player, 205);
				Set Projectile Speed(Event Player, 150);
				Disallow Button(Event Player, Button(Secondary Fire));
				Set Damage Dealt(Event Player, 110);
				Disallow Button(Event Player, Button(Ultimate));
				Modify Global Variable(Smaller_reduced_healthpack, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 2);
				Event Player.playerSpeed[False] += 55;
				Set Max Health(Event Player, 216);
				Set Damage Dealt(Event Player, 115);
				Set Jump Vertical Speed(Event Player, 115);
				Set Gravity(Event Player, 60);
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Set Projectile Speed(Event Player, 350);
				Event Player.C = False;
				Disallow Button(Event Player, Button(Ability 1));
				Event Player.U = False;
				Event Player.J = False;
			End;
		Else If(Hero Of(Event Player) == Hero(Baptiste));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 35;
				Set Max Health(Event Player, 235);
				Disallow Button(Event Player, Button(Ability 2));
				Set Damage Dealt(Event Player, 255);
				Skip If(Number Of Players(Team Of(Event Player)) <= 1, 1);
				Set Ultimate Charge(Event Player, 100);
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Primary Fire));
				Disallow Button(Event Player, Button(Secondary Fire));
				Modify Global Variable(L, Append To Array, Event Player);
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 1);
				Create HUD Text(Event Player, Custom String("{0} {1}", Custom String("Absorbed:"), Event Player.H), Null, Null, Left, False, Color(
					White), Null, Null, Visible To and String, Default Visibility);
				Event Player.HUD_tutorial_screen[7] = Last Text ID;
				Event Player.playerSpeed[False] += 50;
				Set Max Health(Event Player, 170);
				Set Damage Dealt(Event Player, 110);
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Set Projectile Speed(Event Player, 250);
				Event Player.H = Null;
				Event Player.U = False;
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			End;
		Else If(Hero Of(Event Player) == Hero(Brigitte));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 95;
				Set Max Health(Event Player, 195);
				Set Damage Dealt(Event Player, 145);
				Disallow Button(Event Player, Button(Ultimate));
				Modify Global Variable(L, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.playerSpeed[False] += 30;
				Set Max Health(Event Player, 253);
				Set Damage Dealt(Event Player, 130);
				Disallow Button(Event Player, Button(Ability 1));
				Modify Global Variable(H, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 2);
				Event Player.playerSpeed[False] += 50;
				Event Player.Q = 180;
				Set Max Health(Event Player, Event Player.Q);
				Set Damage Dealt(Event Player, 125);
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Set Projectile Speed(Event Player, 250);
				Event Player.U = False;
				Modify Global Variable(L, Append To Array, Event Player);
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 3);
				Event Player.playerSpeed[False] += 50;
				Set Max Health(Event Player, 220);
				Set Damage Dealt(Event Player, 125);
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ultimate));
				Set Projectile Speed(Event Player, 250);
				Event Player.U = False;
				Modify Global Variable(H, Append To Array, Event Player);
				Start Scaling Barriers(Event Player, 2, True);
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 4);
				Event Player.playerSpeed[False] += 30;
				Set Max Health(Event Player, 220);
				Set Damage Dealt(Event Player, 130);
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ultimate));
				Event Player.K = 0;
			End;
		Else If(Hero Of(Event Player) == Hero(Lúcio));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 35;
				Set Max Health(Event Player, 242);
				Set Damage Dealt(Event Player, 130);
				Disallow Button(Event Player, Button(Primary Fire));
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 1));
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.HUD_tutorial_screen[7] = Last Text ID;
				Event Player.playerSpeed[False] += 20;
				Set Max Health(Event Player, 205);
				Set Damage Dealt(Event Player, 120);
				Event Player.X = 1;
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Primary Fire));
				Set Projectile Speed(Event Player, 40);
				Create Progress Bar HUD Text(Event Player, Event Player.lovecraft_ab1_resource, Custom String("Void Resource"), Left, 0, Color(
					Green), Color(White), Visible To Values and Color, Default Visibility);
				Event Player.lovecraft_ab1_resource = 100;
				Modify Global Variable(S, Append To Array, Event Player);
				Modify Global Variable(Close_enemies_ULT_buff_array, Append To Array, Event Player);
			End;
		Else If(Hero Of(Event Player) == Hero(Mercy));
			Event Player.playerSpeed[False] += 35;
			Set Max Health(Event Player, 205);
			Set Damage Dealt(Event Player, 155);
			Disallow Button(Event Player, Button(Ultimate));
			Disallow Button(Event Player, Button(Ability 1));
			Disallow Button(Event Player, Button(Primary Fire));
			Disallow Button(Event Player, Button(Secondary Fire));
		Else If(Hero Of(Event Player) == Hero(Moira));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 30;
				Set Max Health(Event Player, 240);
				Set Projectile Speed(Event Player, 60);
				Set Damage Dealt(Event Player, 60);
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Primary Fire));
				Event Player.Medea_rule_breaker = False;
				Event Player.Medea_rule_breaker2 = False;
				Event Player.B = False;
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.playerSpeed[False] += 55;
				Set Max Health(Event Player, 130);
				Set Damage Dealt(Event Player, 150);
				Set Gravity(Event Player, 45);
				Set Jump Vertical Speed(Event Player, 195);
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 2));
			Else If(Event Player.selected_hero_list_number == 2);
				Event Player.playerSpeed[False] += 45;
				Set Max Health(Event Player, 230);
				Set Damage Dealt(Event Player, 145);
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ultimate));
				Event Player.Emiya_master = 1;
				Event Player.U = False;
				Set Projectile Speed(Event Player, 150);
				Modify Global Variable(L, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 3);
				Event Player.playerSpeed[False] += 55;
				Set Max Health(Event Player, 238);
				Set Damage Dealt(Event Player, 125);
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Primary Fire));
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Event Player.P = Null;
				Event Player.A = 1;
				Event Player.U = False;
				Set Projectile Speed(Event Player, 55);
				Event Player.H = 1500;
				Allow Button(Event Player, Button(Ability 2));
				Modify Global Variable(L, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 4);
				Event Player.playerSpeed[False] += 10;
				Set Max Health(Event Player, 90);
				Set Damage Dealt(Event Player, 120);
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ultimate));
				Set Projectile Speed(Event Player, 10);
				Add Health Pool To Player(Event Player, Armor, 200, True, True);
				Event Player.Effects[2] = Last Created Health Pool;
				Event Player.D = 3;
				Disallow Button(Event Player, Button(Ability 2));
				"circle area"
				Event Player.C = 1;
				Disallow Button(Event Player, Button(Primary Fire));
				"initial position"
				Event Player.W = Vector(-444, -9999, 1568);
				Event Player.U = False;
				Event Player.Z = False;
				Modify Global Variable(L, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 5);
				Event Player.playerSpeed[False] += 45;
				Set Max Health(Event Player, 216);
				Set Damage Dealt(Event Player, 125);
				Disallow Button(Event Player, Button(Ultimate));
				Modify Global Variable(L, Append To Array, Event Player);
				Event Player.B = False;
			End;
		End;
		Event Player.HUD_tutorial_screen[6] = Last Text ID;
		Skip If(!Is In Spawn Room(Event Player), 1);
		Wait Until(Is In Spawn Room(Event Player), 99999);
	}
}

rule("become All Heroes 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.selecting_HUD == 2;
		Array Contains(Array(Hero(Zenyatta), Hero(Reaper), Hero(Tracer), Hero(D.Va), Hero(Bastion), Hero(Zarya), Hero(Winston), Hero(
			Wrecking Ball), Hero(Sojourn), Hero(Kiriko), Hero(Junker Queen), Hero(Junkrat), Hero(Ramattra), Hero(Torbjörn), Hero(
			Lifeweaver), Hero(Illari)), Hero Of(Event Player)) == True;
	}

	actions
	{
		Wait Until(Global.A[Team Of(Event Player) == Team 1 ? Slot Of(Event Player) : Slot Of(Event Player) + 4] != Hero Of(Event Player)
			|| !Is In Spawn Room(Event Player), 99999);
		Skip If(Is In Spawn Room(Event Player), 185);
		If(Hero Of(Event Player) == Hero(Zenyatta));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 33;
				Set Max Health(Event Player, 328);
				Disallow Button(Event Player, Button(Ability 2));
				Set Damage Dealt(Event Player, 110);
				Set Projectile Speed(Event Player, 110);
				Modify Global Variable(L, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.playerSpeed[False] += 40;
				Set Max Health(Event Player, 245);
				Set Damage Dealt(Event Player, 105);
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 1));
				Set Projectile Speed(Event Player, 350);
			Else If(Event Player.selected_hero_list_number == 2);
				Event Player.playerSpeed[False] += 10;
				Set Max Health(Event Player, 268);
				Set Damage Dealt(Event Player, 90);
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ultimate));
				Set Projectile Speed(Event Player, 70);
				Modify Global Variable(L, Append To Array, Event Player);
				Modify Global Variable(S, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 3);
				Create HUD Text(Event Player, Custom String("{0} {1} {2}", Custom String("Charge: "), Event Player.K, Custom String("/60")), Null,
					Null, Top, False, Color(White), Null, Null, Visible To and String, Default Visibility);
				Event Player.HUD_tutorial_screen[7] = Last Text ID;
				Event Player.playerSpeed[False] += 10;
				Set Max Health(Event Player, 297);
				Set Damage Dealt(Event Player, 80);
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Set Projectile Speed(Event Player, 99999);
				Event Player.D = 3;
				"circle area"
				Event Player.C = 1;
				Allow Button(Event Player, Button(Primary Fire));
				"initial position"
				Event Player.W = Vector(-444, -9999, 1568);
				Event Player.U = False;
				Event Player.Z = False;
				Disallow Button(Event Player, Button(Ability 1));
				Event Player.B = Null;
				Event Player.F = True;
				Event Player.V = True;
				Event Player.K = Null;
				Event Player.P = 7;
				Event Player.A = True;
			End;
		Else If(Hero Of(Event Player) == Hero(Tracer));
			Event Player.playerSpeed[False] += 30;
			Set Max Health(Event Player, 290);
			Set Damage Dealt(Event Player, 140);
			Event Player.U = True;
			Event Player.B = False;
			Disallow Button(Event Player, Button(Ultimate));
			Disallow Button(Event Player, Button(Ability 2));
		Else If(Hero Of(Event Player) == Hero(Reaper));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 25;
				Set Max Health(Event Player, 240);
				Set Damage Dealt(Event Player, 40);
				Disallow Button(Event Player, Button(Ability 2));
				Set Projectile Speed(Event Player, 250);
				Event Player.D = 3;
				Disallow Button(Event Player, Button(Ability 2));
				"circle area"
				Event Player.C = 1;
				Disallow Button(Event Player, Button(Primary Fire));
				"initial position"
				Event Player.W = Vector(-444, -9999, 1568);
				Event Player.U = False;
				Event Player.Z = False;
				Event Player.L = False;
				Disallow Button(Event Player, Button(Ability 1));
				Event Player.Solomon_pillar_array = Empty Array;
				Modify Global Variable(L, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.playerSpeed[False] += 40;
				Set Max Health(Event Player, 230);
				Set Damage Dealt(Event Player, 130);
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ultimate));
			End;
		Else If(Hero Of(Event Player) == Hero(D.Va));
			Event Player.playerSpeed[False] += 35;
			Set Max Health(Event Player, 185);
			Set Damage Dealt(Event Player, 120);
			Set Projectile Speed(Event Player, 500);
			Disallow Button(Event Player, Button(Ability 1));
			Disallow Button(Event Player, Button(Ultimate));
			Event Player.S = False;
			Event Player.A = False;
			Event Player.Is_Using_Ultimate = False;
		Else If(Hero Of(Event Player) == Hero(Bastion));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.playerSpeed[False] += 30;
				Set Max Health(Event Player, 201);
				Set Damage Dealt(Event Player, 120);
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ultimate));
				Allow Button(Event Player, Button(Primary Fire));
				Set Projectile Speed(Event Player, 125);
				Event Player.Is_Using_Ultimate = False;
				Event Player.D = 100;
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.playerSpeed[False] += 30;
				Set Max Health(Event Player, 240);
				Set Damage Dealt(Event Player, 105);
				Disallow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Ultimate));
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ability 1));
				Event Player.R = Null;
				Event Player.P = Null;
			End;
		Else If(Hero Of(Event Player) == Hero(Wrecking Ball));
		Else If(Hero Of(Event Player) == Hero(Junker Queen));
			Set Healing Dealt(Event Player, 500);
		Else If(Hero Of(Event Player) == Hero(Junkrat));
			Disallow Button(Event Player, Button(Ultimate));
		Else If(Hero Of(Event Player) == Hero(Kiriko));
			If(Event Player.selected_hero_list_number);
				Disallow Button(Event Player, Button(Ability 1));
				Create Effect(Event Player, Ring, Color(Red), Event Player, 7, Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Create Effect(Event Player, Ring, Color(Turquoise), Event Player, 3, Visible To Position and Radius);
				Event Player.Effects[2] = Last Created Entity;
				Set Max Health(Event Player, 150);
			Else;
				Disallow Button(Event Player, Button(Ultimate));
				Set Max Health(Event Player, 90);
				Set Projectile Speed(Event Player, 500);
				Modify Global Variable(Smaller_reduced_healthpack, Append To Array, Event Player);
			End;
		Else If(Hero Of(Event Player) == Hero(Sojourn));
			Disallow Button(Event Player, Button(Ultimate));
		Else If(Hero Of(Event Player) == Hero(Torbjörn));
			If(Event Player.selected_hero_list_number);
				Set Projectile Speed(Event Player, 1);
				Event Player.playerSpeed[False] += 20;
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ultimate));
			End;
		Else If(Hero Of(Event Player) == Hero(Winston));
			Create Effect(All Players(All Teams), Ring, Color(Red), Event Player, 13, Visible To Position and Radius);
			Event Player.Effects[2] = Last Created Entity;
			Start Rule(winston_AoE_slow, Restart Rule);
		Else If(Hero Of(Event Player) == Hero(Zarya));
			Disallow Button(Event Player, Button(Ultimate));
			If(Event Player.selected_hero_list_number);
				Set Max Health(Event Player, 155);
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Primary Fire));
				Event Player.playerSpeed[False] += 30;
			Else;
				Modify Global Variable(H, Append To Array, Event Player);
			End;
		Else If(Hero Of(Event Player) == Hero(Ramattra));
			If(Event Player.selected_hero_list_number);
				Disallow Button(Event Player, Button(Ability 2));
				Disallow Button(Event Player, Button(Ultimate));
			Else;
				Set Max Health(Event Player, 130);
			End;
		Else If(Hero Of(Event Player) == Hero(Illari));
			If(Event Player.selected_hero_list_number);
			Else;
				Disallow Button(Event Player, Button(Ability 1));
				Disallow Button(Event Player, Button(Ultimate));
			End;
		Else If(Hero Of(Event Player) == Hero(Lifeweaver));
			Modify Global Variable(Smaller_reduced_healthpack, Append To Array, Event Player);
			Disallow Button(Event Player, Button(Ability 2));
			If(Event Player.selected_hero_list_number);
				Modify Global Variable(S, Append To Array, Event Player);
				Disallow Button(Event Player, Button(Ultimate));
			Else;
				Disallow Button(Event Player, Button(Ability 1));
				Event Player.garden_value = 1.150;
			End;
		End;
		Event Player.HUD_tutorial_screen[6] = Last Text ID;
		Skip If(!Is In Spawn Room(Event Player), 1);
		Wait Until(Is In Spawn Room(Event Player), 99999);
	}
}

rule("Select a Random hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Crouching(Event Player) == True;
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Wait(2, Abort When False);
		Start Forcing Player To Be Hero(Event Player, Random Value In Array(All Heroes));
		Wait(0.016, Ignore Condition);
		Stop Forcing Player To Be Hero(Event Player);
		Wait(0.125, Ignore Condition);
		Call Subroutine(calling_nameplates_restart);
		Event Player.selected_hero_list_number = Random Integer(0, Count Of(Event Player.Selected_Hero) - 1);
		Press Button(Event Player, Button(Interact));
		Wait(1, Ignore Condition);
	}
}

rule("start and stop heal over time")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Event Player != Attacker;
	}

	actions
	{
		Stop Heal Over Time(Event Player.heal_over_time);
		Wait(6, Restart When True);
		Start Heal Over Time(Event Player, Event Player, 9999, 30);
		Event Player.heal_over_time = Last Heal Over Time ID;
		Start Rule(stop_healing_over_time, Restart Rule);
	}
}

rule("Set the players that get ultimate faster and disable inspector")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"All players that have is using ultimate"
		Global.Global_ULTButton_1 = Array(Hero(Sojourn), Hero(Ana), Hero(Lúcio), Hero(Illari), Hero(Hanzo), Hero(Pharah), Hero(Baptiste),
			Hero(Kiriko), Hero(Wrecking Ball), Hero(Lifeweaver), Hero(Zarya), Hero(Torbjörn), Hero(Tracer), Hero(D.Va), Hero(Junkrat),
			Hero(Orisa), Hero(Ashe), Hero(Zenyatta), Hero(Sombra));
		"All players that have is using ultimate"
		Global.Global_ULTButton_2 = Array(Hero(Cassidy), Hero(Symmetra), Hero(Soldier: 76), Hero(Genji), Hero(Moira), Hero(Doomfist));
		"All players that have is using ultimate"
		Global.Global_ULTButton_3 = Array(Hero(Echo), Hero(Mercy), Hero(Roadhog), Hero(Mei), Hero(Sigma), Hero(Bastion), Hero(Brigitte),
			Hero(Reaper), Hero(Reinhardt), Hero(Ramattra), Hero(Mauga));
	}
}

rule("Ultimate faster for some servants")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		"Large , Hedium, Small"
		Array Contains(Global.L || Global.S || Global.H, Event Player) == True;
		Event Player != Victim;
	}

	actions
	{
		If(Array Contains(Global.L, Event Player));
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Event Damage / 10);
		End;
		If(Array Contains(Global.H, Event Player));
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Event Damage / 13);
		End;
		If(Array Contains(Global.S, Event Player));
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Event Damage / 15);
	}
}

rule("dummy bots command for test + Rein auto use hammer (and pharah rockets)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Entity Exists(Event Player) == True;
		(Event Player.ozymandias_master || Event Player.shakespeare_master || Event Player.solomon_master) == False;
		Hero Of(Event Player) != Hero(Hanzo);
		Hero Of(Event Player) != Hero(Sombra);
		Hero Of(Event Player) != Hero(Reaper);
		Hero Of(Event Player) != Hero(Soldier: 76);
		Hero Of(Event Player) != Hero(Doomfist);
		Hero Of(Event Player) != Hero(Mercy);
	}

	actions
	{
		Wait(True, Ignore Condition);
		Allow Button(Event Player, Button(Primary Fire));
		Start Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("Team 1 and team 2 UI hp")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == False;
		Is Moving(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		If(Team Of(Event Player) == Team 1);
			Create HUD Text(All Players(All Teams), Custom String("{0} {1} {2}", Hero Icon String(Hero Of(Event Player)), Event Player, Health(
				Event Player)), Null, Null, Right, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
		Else If(Team Of(Event Player) == Team 2);
			Create HUD Text(All Players(All Teams), Custom String("{0} {1} {2}", Hero Icon String(Hero Of(Event Player)), Event Player, Health(
				Event Player)), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
		End;
		Event Player.HUD_tutorial_screen[5] = Last Text ID;
		Wait Until(Is In Spawn Room(Event Player), 99999);
		Destroy HUD Text(Event Player.HUD_tutorial_screen[5]);
	}
}

rule("Travel through hero selection list")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))) == True;
		Event Player.selecting_HUD == 2;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Secondary Fire)));
			Event Player.selected_hero_list_number += True;
		Else If(Is Button Held(Event Player, Button(Primary Fire)));
			Event Player.selected_hero_list_number -= True;
	}
}

rule("bug fix for under 0 list")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.selected_hero_list_number < Null;
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Event Player.selected_hero_list_number = Count Of(Event Player.Selected_Hero) - True;
	}
}

rule("bug fix for above max list")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.selected_hero_list_number > Count Of(Event Player.Selected_Hero) - True;
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Event Player.selected_hero_list_number = Null;
	}
}

rule("Emiya Hanzo caradobolg ab2 || Tesla no bug")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Event Player.Is_Using_Ultimate == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(!Event Player.selected_hero_list_number);
			Create Effect(All Players(All Teams), Bad Aura, Color(Red), Event Player, True, Visible To Position and Radius);
			Event Player.Effects[3] = Last Created Entity;
			Wait Until(Is Button Held(Event Player, Button(Primary Fire)) || !Is Using Ability 2(Event Player) || Is In Spawn Room(
				Event Player) || !Entity Exists(Event Player), 99999);
			Skip If(!Is Using Ability 2(Event Player), 8);
			Call Subroutine(raycast_hit_position1);
			Event Player.trump_wait_middle = Players Within Radius(Event Player.raycast_hit_position, 3.300, Opposite Team Of(Team Of(
				Event Player)), Surfaces And Enemy Barriers);
			Set Status(Event Player.trump_wait_middle, Event Player, Stunned, 1.500);
			Damage(Event Player.trump_wait_middle, Event Player, 50);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Event Player.raycast_hit_position, 6);
			Play Effect(All Players(All Teams), Explosion Sound, Color(Red), Event Player.raycast_hit_position, 100);
			Wait(0.150, Ignore Condition);
			Press Button(Event Player, Button(Ability 2));
			Destroy Effect(Event Player.Effects[3]);
			Set Ability Cooldown(Event Player, Button(Ability 2), 10);
		Else If(Event Player.selected_hero_list_number == 6);
			Disallow Button(Event Player, Button(Primary Fire));
			Wait Until(!Is Using Ability 2(Event Player), 99999);
			Allow Button(Event Player, Button(Primary Fire));
	}
}

rule("defense shield ability 1/3 (setup)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Event Player.selected_hero_list_number == Null;
		Is Alive(Event Player) == True;
		Event Player.X == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Ability 2));
		Destroy HUD Text(Event Player.Effects[True]);
		Skip If(Event Player.H != 0, 1);
		Event Player.H = 400;
		Chase Player Variable At Rate(Event Player, H, 0, 10, Destination and Rate);
		Set Ability Cooldown(Event Player, Button(Ability 1), 9999);
		Create Effect(All Players(All Teams), Sphere, Color(Purple), Event Player, 2, Visible To Position and Radius);
		Event Player.Effects[False] = Last Created Entity;
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{0}: {1}", Custom String("Shield Life"), Event Player.H), Null, Null, Left, 2, Color(
			White), Null, Null, Visible To and String, Default Visibility);
		Event Player.Effects[True] = Last Text ID;
		Set Status(Event Player, Null, Unkillable, 9999);
		Event Player.T = True;
		Event Player.X = False;
		Wait(0.250, Ignore Condition);
		Wait Until(Is In Spawn Room(Event Player) || !Entity Exists(Event Player) || Is Button Held(Event Player, Button(Ability 1))
			|| Event Player.H <= 0, 99999);
		Stop Chasing Player Variable(Event Player, H);
		Clear Status(Event Player, Unkillable);
		Destroy Effect(First Of(Event Player.Effects));
		Destroy HUD Text(Event Player.Effects[True]);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Red), Event Player, 100);
		Event Player.T = False;
		Event Player.X = True;
		Allow Button(Event Player, Button(Ability 2));
		Skip If(Event Player.H <= 0, 1);
		Set Ability Cooldown(Event Player, Button(Ability 1), 3);
		Skip If(Event Player.H > 0, 2);
		Call Subroutine(emyia_clear_shield);
		Event Player.X = True;
	}
}

rule("defense shield ability 2/3 (negate damage)")
{
	event
	{
		Player Took Damage;
		All;
		Hanzo;
	}

	conditions
	{
		Event Player.T == True;
		Event Player.selected_hero_list_number == Null;
	}

	actions
	{
		Event Player.H -= Event Damage;
		Set Player Health(Event Player, Health(Event Player) + Event Damage);
		If(Event Player.H < 1);
			Call Subroutine(emyia_clear_shield);
			Small Message(Event Player, Custom String("Shield Broken"));
			Wait Until(Is Dead(Event Player) || Is Assembling Heroes || Ability Cooldown(Event Player, Button(Ability 1)) == 0, 99999);
			Event Player.X = True;
	}
}

rule("hanzo unlimited blade works 2/3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.selected_hero_list_number == Null;
		Event Player.Is_Using_Ultimate == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Call Subroutine(raycast_hit_position2);
		Call Subroutine(raycast_hit_player);
		If(Entity Exists(Event Player.raycast_hit_player));
			Damage(Event Player.raycast_hit_player, Event Player, 55);
		Else;
			Damage(Players Within Radius(Event Player.raycast_hit_position2, 3, Opposite Team Of(Team Of(Event Player)), Off), Event Player,
				40);
		End;
		Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Event Player.raycast_hit_position2, 0.750);
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(Orange), Event Player.raycast_hit_position2, 100);
		Create Beam Effect(All Players(All Teams), Bad Beam, Event Player, Event Player.raycast_hit_position2, Color(Orange), None);
		Event Player.Effects[4] = Last Created Entity;
		Wait(0.080, Ignore Condition);
		Destroy Effect(Event Player.Effects[4]);
		Wait(0.020, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("hanzo unlimited blade works 3/3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Emiya_master.Is_Using_Ultimate == True;
		Distance Between(Event Player, Event Player.Emiya_master.E) >= 20;
		Array Contains(Event Player.Emiya_master.M, Event Player) == True;
		Hero Of(Event Player.Emiya_master) == Hero(Hanzo);
	}

	actions
	{
		Set Status(Event Player, Null, Rooted, 0.200);
		Apply Impulse(Event Player, Direction Towards(Event Player, Event Player.Emiya_master.E), 33, To World,
			Incorporate Contrary Motion);
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("gilgamesh key of babylon  ab 2 1/3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ultimate Charge Percent(Event Player) >= 1;
		Ability Cooldown(Event Player, Button(Ability 2)) <= 0;
		Has Status(Event Player, Frozen) == False;
		Is Alive(Event Player) == True;
		Event Player.selected_hero_list_number == 1;
		Event Player.Is_Using_Ultimate == False;
	}

	actions
	{
		Set Gravity(Event Player, 10);
		Start Forcing Throttle(Event Player, False, False, False, False, False, False);
		Call Subroutine(raycast_hit_position1);
		Call Subroutine(raycast_hit_player);
		Event Player.L = Event Player + Vector(Random Integer(-8, 8), Random Integer(True, 8), False);
		Create Beam Effect(All Players(All Teams), Bad Beam, Event Player.L, Event Player.raycast_hit_position, Color(Yellow), None);
		Event Player.Effects[Count Of(Event Player.Effects) + True] = Last Created Entity;
		Create Effect(All Players(All Teams), Sphere, Color(Yellow), Event Player.L, 0.850, None);
		Modify Player Variable(Event Player, Effects, Append To Array, Last Created Entity);
		Play Effect(All Players(All Teams), DVa Micro Missiles Explosion Effect, Color(Team 2), Event Player.raycast_hit_position, 2);
		Play Effect(All Players(All Teams), Explosion Sound, Color(Orange), Event Player.raycast_hit_position, 125);
		If(Entity Exists(Event Player.raycast_hit_player));
			Damage(Event Player.raycast_hit_player, Event Player, 30);
			Damage(Remove From Array(Players Within Radius(Event Player.raycast_hit_player, 3, All Teams, Surfaces), Array(Event Player,
				Event Player.raycast_hit_player)), Event Player, 14);
		Else;
			Damage(Remove From Array(Players Within Radius(Event Player.raycast_hit_position, 3, All Teams, Surfaces), Event Player),
				Event Player, 14);
		End;
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) - 0.700);
		Wait(0.020, Ignore Condition);
		Call Subroutine(Gilgamesh_cleaning_GOB);
		Wait(0.025, Abort When False);
		Loop If Condition Is True;
	}
}

rule("gilgamesh key of babylon  ab 2 2/3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == False;
		Event Player.selected_hero_list_number == 1;
	}

	actions
	{
		Call Subroutine(Gilgamesh_cleaning_GOB);
		Stop Forcing Throttle(Event Player);
		Set Gravity(Event Player, 100);
	}
}

rule("gilgamesh key of babylon  ab 2 3/3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ultimate Charge Percent(Event Player) <= 0;
		Event Player.selected_hero_list_number == 1;
	}

	actions
	{
		Set Status(Event Player, Event Player, Stunned, 0.450);
		Small Message(Event Player, Custom String("Not enough ultimate charge"));
		Set Ability Cooldown(Event Player, Button(Ability 2), 3);
		Wait(0.016, Ignore Condition);
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 35);
		Call Subroutine(Gilgamesh_cleaning_GOB);
	}
}

rule("hanzo gilgamesh cleaning gate of babylon TEST")
{
	event
	{
		Subroutine;
		Gilgamesh_cleaning_GOB;
	}

	actions
	{
		For Player Variable(Event Player, Gate_of_Babylon_index, 0, Count Of(Event Player.Effects), True);
			Destroy Effect(Event Player.Effects[Event Player.Gate_of_Babylon_index]);
		End;
		Event Player.Effects = Empty Array;
		Abort;
	}
}

rule("Caesar E faster for a few seconds to run")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == Null;
		Event Player.selected_hero_list_number == Null;
	}

	actions
	{
		Disallow Button(Event Player, Button(Melee));
		Event Player.playerSpeed[False] += 125;
		Start Heal Over Time(Event Player, Event Player, 3, 125);
		Wait Until(Is In Spawn Room(Event Player), 3);
		Event Player.playerSpeed[False] -= 125;
		Allow Button(Event Player, Button(Melee));
		Set Ability Cooldown(Event Player, Button(Ability 2), 7);
	}
}

rule("Nobunaga shift of what is going on")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Event Player.selected_hero_list_number == Null;
	}

	actions
	{
		Wait Until(Is Assembling Heroes, 0.650);
		Apply Impulse(Event Player, Facing Direction Of(Event Player), 35, To World, Cancel Contrary Motion);
		Set Gravity(Event Player, False);
		Set Ability Cooldown(Event Player, Button(Ability 1), 11);
		Wait Until(Is Assembling Heroes, 2.300);
		Set Gravity(Event Player, 100);
	}
}

rule("All Ashe ab 2 Nobunaga, Caster Gill, Xuanzang, William Tell")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 0);
			For Player Variable(Event Player, for_loop_2, 0, 5, 1);
				Create Projectile(Pharah Rocket, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 45, 1, 3,
					Bad Explosion, Explosion Sound, 0.030, 42, 15, 0, 0, 0);
				Wait(0.250, Ignore Condition);
			End;
			Set Ability Cooldown(Event Player, Button(Ability 2), 11);
			Wait Until(!Is Using Ability 2(Event Player), 99999);
		Else If(Event Player.selected_hero_list_number == 1);
			Set Ability Cooldown(Event Player, Button(Ability 2), 10);
			Event Player.J = True;
			Event Player.playerSpeed[False] += 35;
			Set Damage Received(Event Player, 20);
			Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), Event Player, True, Visible To Position and Radius);
			Event Player.Effects[True] = Last Created Entity;
			Wait(4, Ignore Condition);
			Destroy Effect(Event Player.Effects[True]);
			Event Player.playerSpeed[False] -= 35;
			Set Damage Received(Event Player, 70);
			Event Player.J = False;
		Else If(Event Player.selected_hero_list_number == 2);
			For Player Variable(Event Player, for_loop, 0, 3, True);
				Call Subroutine(FoV_and_LoS_player_select);
				Create Homing Projectile(Bastion A-36 Tactical Grenade, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(
					Event Player)), 42, 0.700, 3, Bad Explosion, Explosion Sound, 0.009, 25, 8, 8, Event Player.FoV_and_lineOFsight_player, 1);
				Skip If(Is Dead(Event Player) || Is In Spawn Room(Event Player), 2);
				Wait(0.650, Ignore Condition);
			End;
			Set Ability Cooldown(Event Player, Button(Ability 2), 8);
		Else If(Event Player.selected_hero_list_number == 3);
			Event Player.C = Color(White);
			Event Player.P = Nearest Walkable Position(Event Player);
			Create Effect(All Players(All Teams), Ring, Color(Orange), Event Player.P, 4, Visible To Position and Radius);
			Event Player.Effects[True] = Last Created Entity;
			Create Icon(All Players(All Teams), Event Player.P + Vector(False, 1.250, False), Exclamation Mark, Visible To Position and Color,
				Event Player.C, False);
			Event Player.Effects[2] = Last Created Entity;
			Wait(1.500, Ignore Condition);
			Event Player.C = Color(Red);
			Wait Until(Is Button Held(Event Player, Button(Ability 2)) || Count Of(Players Within Radius(Event Player.P, 4, Opposite Team Of(
				Team Of(Event Player)), Surfaces)) > 0, 7);
			Event Player.W = Players Within Radius(Event Player.P, 4, Opposite Team Of(Team Of(Event Player)), Surfaces);
			Set Status(Event Player.W, Event Player, Stunned, 2);
			Damage(Event Player.W, Event Player, 155);
			Destroy Effect(Event Player.Effects[True]);
			Destroy Icon(Event Player.Effects[2]);
			Set Ability Cooldown(Event Player, Button(Ability 2), 6);
	}
}

rule("Doom Hassan of the great hand ultimate (mark and kill)")
{
	event
	{
		Player Dealt Damage;
		All;
		Doomfist;
	}

	conditions
	{
		Event Ability == Button(Secondary Fire);
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null && Event Player.Hassan_Hand_ULT == True);
			Event Player.Hassan_deathmark = Victim;
			Create Icon(All Players(All Teams), Victim, Skull, Visible To and Position, Color(Red), True);
			Event Player.Effects[3] = Last Created Entity;
			Wait(0.016, Ignore Condition);
			Event Player.L = True;
			Wait Until((Is Button Held(Event Player, Button(Ultimate)) && Ultimate Charge Percent(Event Player) == 100) || (Is Dead(
				Event Player) || Is Dead(Event Player.Hassan_deathmark) || !Entity Exists(Event Player.Hassan_deathmark) || Is In Spawn Room(
				Event Player) || !Event Player.Is_Using_Ultimate), 99999);
			Skip If(!Entity Exists(Event Player.Hassan_deathmark), 1);
			Wait Until(!Has Status(Event Player, Knocked Down) && !Has Status(Event Player, Asleep) && !Has Status(Event Player, Frozen)
				&& !Has Status(Event Player, Stunned) && !Has Status(Event Player, Hacked), 99999);
			Skip If(!Event Player.Is_Using_Ultimate, 4);
			Clear Status(Event Player.Hassan_deathmark, Unkillable);
			Clear Status(Event Player.Hassan_deathmark, Invincible);
			Clear Status(Event Player.Hassan_deathmark, Phased Out);
			Kill(Event Player.Hassan_deathmark, Event Player);
			Event Player.Is_Using_Ultimate = False;
			Set Ultimate Charge(Event Player, 0);
			Event Player.Hassan_deathmark = Null;
			Event Player.L = False;
			Event Player.Hassan_Hand_ULT = False;
	}
}

rule("Hassan of the great hand in the shadows ab1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == Null;
		Event Player.selected_hero_list_number == Null;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Call Subroutine(destroy_nameONplayer);
		Small Message(Event Player, Custom String("Invisibile"));
		Set Gravity(Event Player, 75);
		Set Status(Event Player, Event Player, Hacked, 4.016);
		Set Invisible(Event Player, Enemies);
		Event Player.playerSpeed[False] += 65;
		Wait Until(Is Assembling Heroes, 4);
		Small Message(Event Player, Custom String("Visibile"));
		Set Invisible(Event Player, None);
		Event Player.playerSpeed[False] -= 65;
		Set Ability Cooldown(Event Player, Button(Ability 1), 5);
		Set Gravity(Event Player, 100);
		Call Subroutine(create_nameONplayer);
	}
}

rule("Hassan of the great hand backstabing parsive")
{
	event
	{
		Player Dealt Damage;
		All;
		Doomfist;
	}

	conditions
	{
		Event Ability == Button(Melee);
		Is In View Angle(Event Player, Victim, 90) == True;
		Is In View Angle(Victim, Event Player, 90) == False;
		Event Player.selected_hero_list_number == Null;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Damage(Victim, Event Player, 20);
		Start Damage Over Time(Victim, Event Player, 3, 20);
		Small Message(Victim, Custom String("Backstabbed"));
	}
}

rule("Hassan of the great hand faster knife")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.selected_hero_list_number == Null;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Melee), False);
		Press Button(Event Player, Button(Melee));
		Wait(0.100, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.230, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Jean D'Arc ultimate 2/2")
{
	event
	{
		Player Took Damage;
		All;
		Mercy;
	}

	conditions
	{
		Event Player.Is_Using_Ultimate == True;
		Event Player.selected_hero_list_number == Null;
	}

	actions
	{
		Event Player.D += Event Damage;
		Heal(Event Player, Event Player, Event Damage * 1.600);
		Wait(0.016, Ignore Condition);
	}
}

rule("Jean D'Arc ab 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Game In Progress == True;
		Is Assembling Heroes == False;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Red), Event Player, 1);
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(Red), Event Player, 90);
		Event Player.playerSpeed[False] += 40;
		Set Ability Cooldown(Event Player, Button(Ability 1), 9);
		Set Damage Received(Event Player, 25);
		Set Damage Dealt(Event Player, 230);
		Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player), 4);
		Set Damage Dealt(Event Player, 155);
		Set Damage Received(Event Player, 70);
		Event Player.playerSpeed[False] -= 40;
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Red), Event Player, 90);
	}
}

rule("Jean D'Arc ab 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Red), Event Player, 90);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player + Vector(False, 1.500, False), 2);
		Call Subroutine(raycast_hit_position1);
		Set Status(Event Player, Null, Rooted, True);
		Teleport(Event Player, Event Player.raycast_hit_position);
		Set Ability Cooldown(Event Player, Button(Ability 2), 10);
		Wait(10, Ignore Condition);
	}
}

rule("Jean D'Arc melee steal ult")
{
	event
	{
		Player Dealt Damage;
		All;
		Mercy;
	}

	conditions
	{
		Event Ability == Button(Melee);
		Event Player.selected_hero_list_number == Null;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Set Ultimate Charge(Victim, Ultimate Charge Percent(Victim) - 3);
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 3);
	}
}

rule("Jean D'Arc fast melee")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.selected_hero_list_number == Null;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Melee), False);
		Press Button(Event Player, Button(Melee));
		Wait(0.520, Ignore Condition);
		Cancel Primary Action(Event Player);
		Loop If Condition Is True;
	}
}

rule("Golem movement 3 (all golems)")
{
	event
	{
		Player Took Damage;
		All;
		Reinhardt;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Primary Fire));
		Stop Facing(Event Player);
		Stop Throttle In Direction(Event Player);
		Start Throttle In Direction(Event Player, Direction Towards(Event Player, Attacker), 1, To World, Replace existing throttle,
			Direction and Magnitude);
		Start Facing(Event Player, Direction Towards(Event Player, Attacker), 1000, To World, Direction and Turn Rate);
		Wait Until(Is Button Held(Event Player.solomon_master, Button(Ability 1)), 15);
	}
}

rule("Avicebron ab2 teleport help golem")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Event Player.selected_hero_list_number == 4;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Call Subroutine(Farthest_solomon_array_minion);
		Teleport(Event Player.G, Event Player);
		Stop Throttle In Direction(Event Player.G);
		Wait(5, Ignore Condition);
		Small Message(Event Player, Custom String("Golem teleport ready"));
	}
}

rule("Avicebron ab1 (make golem move to mouse)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Event Player.selected_hero_list_number == 4;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		Call Subroutine(Farthest_solomon_array_minion);
		Start Holding Button(Event Player.G, Button(Primary Fire));
		Stop Facing(Event Player.G);
		Stop Throttle In Direction(Event Player.G);
		Call Subroutine(raycast_hit_position1);
		Start Facing(Event Player.G, Facing Direction Of(Event Player), 1000, To Player, Direction and Turn Rate);
		Start Throttle In Direction(Event Player.G, Direction Towards(Event Player.G, Event Player.raycast_hit_position), 1, To World,
			Replace existing throttle, Direction and Magnitude);
		Create Effect(All Players(All Teams), Ring, Color(Sky Blue), Event Player.raycast_hit_position, True,
			Visible To Position and Radius);
		Event Player.Effects[True] = Last Created Entity;
		Create Icon(All Players(All Teams), Event Player.raycast_hit_position + Vector(False, 0.125, False), Arrow: Down,
			Visible To and Position, Color(White), False);
		Event Player.Effects[2] = Last Created Entity;
		Wait(0.250, Ignore Condition);
		Destroy Effect(Event Player.Effects[True]);
		Destroy Icon(Event Player.Effects[2]);
	}
}

rule("Avicebron deletion on hero changed || ALL that has solomon master bot's will delete the dummy on leave")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Entity Exists(Event Player) == True;
		Entity Exists(Event Player.solomon_master) == True;
	}

	actions
	{
		Skip If(Array Contains(Array(Hero(Sombra), Hero(Mei)), Hero Of(Event Player.solomon_master)), 1);
		Wait Until(Is In Spawn Room(Event Player.solomon_master) || !Entity Exists(Event Player.solomon_master) || Is In Spawn Room(
			Event Player) || Is Dead(Event Player) || Is Dead(Event Player.solomon_master)
			|| Event Player.solomon_master.Mahito_Transfigured[3], 99999);
		Skip If(!Array Contains(Array(Hero(Sombra), Hero(Mei)), Hero Of(Event Player.solomon_master)), 1);
		Wait Until(Is In Spawn Room(Event Player) || !Entity Exists(Event Player.solomon_master), 99999);
		Modify Player Variable(Event Player.solomon_master, Solomon_pillar_array, Remove From Array By Value, Event Player);
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
		Wait(0.016, Ignore Condition);
	}
}

rule("Albert Einstein time is relative  || Hassan of the mountain ab1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Alive(Event Player) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null);
			Event Player.playerSpeed[False] += 1100;
			Set Damage Dealt(Event Player, 600);
			Set Damage Received(Event Player, 10);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player, 100);
			Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Yellow), Event Player, 10000);
			Set Slow Motion(25);
			Wait(1.100, Ignore Condition);
			Set Slow Motion(100);
			Set Damage Received(Event Player, 70);
			Set Damage Dealt(Event Player, 145);
			Event Player.playerSpeed[False] -= 1100;
			Set Ability Cooldown(Event Player, Button(Ability 1), 12);
		Else If(Event Player.selected_hero_list_number == 1);
			Set Ability Cooldown(Event Player, Button(Ability 1), 10);
			Event Player.V = True;
			Event Player.playerSpeed[False] += 250;
			Set Damage Dealt(Event Player, 600);
			Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(Team 2), Event Player, True, Visible To Position and Radius);
			Event Player.Effects[2] = Last Created Entity;
			Create Progress Bar HUD Text(Event Player, Event Player.R, Custom String("Speed Resource"), Left, 0, Color(Sky Blue), Color(White),
				Visible To Values and Color, Default Visibility);
			Event Player.Effects[3] = Last Text ID;
			Wait(0.500, Ignore Condition);
			Wait Until(Event Player.R <= 0 || Is In Spawn Room(Event Player) || Is Button Held(Event Player, Button(Ability 1)), 6);
			Event Player.playerSpeed[False] -= 250;
			Set Damage Dealt(Event Player, 100);
			Event Player.V = False;
			Destroy Effect(Event Player.Effects[2]);
			Destroy Progress Bar HUD Text(Event Player.Effects[3]);
			Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 200);
			Event Player.R = 100;
	}
}

rule("Albert Einstein hyper projectile 1/2 (coordown)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Is Alive(Event Player) == True;
		Event Player.selected_hero_list_number == Null;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Set Projectile Speed(Event Player, 1200);
		Wait Until(!Is Using Ability 2(Event Player), 99999);
		Set Ability Cooldown(Event Player, Button(Ability 2), 7);
	}
}

rule("All Sigma Damage dealt (+ultamate)")
{
	event
	{
		Player Dealt Damage;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Ability == Button(Melee));
			If(Event Player.V && Event Player.selected_hero_list_number);
				Apply Impulse(Victim, Facing Direction Of(Event Player), 70, To World, Cancel Contrary Motion);
				Set Status(Victim, Event Player, Knocked Down, 1);
				Set Damage Dealt(Event Player, 145);
				Event Player.R -= Is Moving(Event Player) ? 10 : Null;
			Else;
				Damage(Victim, Null, 85);
			End;
		End;
		If(Event Player.selected_hero_list_number == Null && Event Ability == Button(Ability 2));
			Apply Impulse(Victim, Facing Direction Of(Event Player), 10000, To World, Cancel Contrary Motion);
			Set Gravity(Victim, False);
			Wait(0.950, Ignore Condition);
			Apply Impulse(Victim, Down, 5000, To World, Cancel Contrary Motion);
			Wait(True, Ignore Condition);
			Set Gravity(Victim, 100);
		Else If(Event Player.selected_hero_list_number == 1);
			If(Event Ability == Button(Ability 2) && Event Player.V == False);
				Set Status(Remove From Array(Victim, Event Player), Event Player, Burning, 3);
				Start Damage Over Time(Remove From Array(Victim, Event Player), Null, 6, 10);
			Else If(Event Ability == Button(Ultimate));
				Modify Player Variable(Event Player, A, Append To Array, Victim);
				Set Max Health(Victim, 1);
				Set Status(Victim, Null, Invincible, 3);
	}
}

rule("All Mei Ab1 (marie pull and surtr smash)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		((Is Button Held(Event Player, Button(Ability 1)) && Ability Cooldown(Event Player, Button(Ability 1)) == 0) || Is Using Ability 1(
			Event Player)) == True;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null);
			Call Subroutine(FoV_and_LoS_player_select);
			Small Message(All Players(All Teams), Custom String("{0} is charmed", Event Player.FoV_and_lineOFsight_player));
			Set Facing(Event Player.FoV_and_lineOFsight_player, Direction Towards(Event Player.FoV_and_lineOFsight_player, Event Player),
				To World);
			Start Throttle In Direction(Event Player.FoV_and_lineOFsight_player, Direction Towards(Event Player.FoV_and_lineOFsight_player,
				Event Player), 1, To World, Replace existing throttle, Direction and Magnitude);
			Wait Until(Is Dead(Event Player), 3.500);
			Stop Throttle In Direction(Event Player.FoV_and_lineOFsight_player);
			Set Ability Cooldown(Event Player, Button(Ability 1), 8);
		Else If(Event Player.selected_hero_list_number == 2);
			Skip If(Event Player.Is_Using_Ultimate, 9);
			Set Gravity(Event Player, 0);
			Apply Impulse(Event Player, Up, 30, To World, Cancel Contrary Motion);
			Wait(0.600, Ignore Condition);
			Set Gravity(Event Player, 7000);
			Wait Until(Is On Ground(Event Player), 99999);
			Skip If(!Is Using Ability 1(Event Player), 2);
			Damage(Players Within Radius(Event Player, 5, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 200);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Event Player, 5);
			Set Gravity(Event Player, 100);
	}
}

rule("Marie Antoinette ice slide")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Is Moving(Event Player) == True;
		Event Player.selected_hero_list_number == Null;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Is Firing Primary(Event Player) && Is Button Held(Event Player, Button(Crouch)));
			Set Gravity(Event Player, False);
			Apply Impulse(Event Player, Facing Direction Of(Event Player), 2, To World, Incorporate Contrary Motion);
		Else;
			Set Gravity(Event Player, 100);
		End;
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Xuanzang Sanzang faster melee")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		(Has Status(Event Player, Frozen) || Has Status(Event Player, Rooted) || Has Status(Event Player, Stunned) || Has Status(
			Event Player, Knocked Down)) == False;
		Event Player.selected_hero_list_number == 1;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Player.Is_Using_Ultimate == False);
			Press Button(Event Player, Button(Melee));
			Wait(0.600, Ignore Condition);
			Cancel Primary Action(Event Player);
			Set Ability Cooldown(Event Player, Button(Melee), False);
			Loop If Condition Is True;
		Else If(Event Player.Is_Using_Ultimate == True);
			Press Button(Event Player, Button(Melee));
			Set Ability Cooldown(Event Player, Button(Melee), False);
			Wait(0.080, Ignore Condition);
			Cancel Primary Action(Event Player);
			Loop If Condition Is True;
	}
}

rule("Xuanzang Sanzang ab 1 (pull people)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Event Player.selected_hero_list_number == 1;
		Event Player.selecting_HUD == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.N = Position Of(Event Player) + Vector(False, 8, False);
		Event Player.M = Players Within Radius(Event Player.N, 20, Opposite Team Of(Team Of(Event Player)), Off);
		Small Message(Event Player.M, Custom String("{0} {1} towards me", Hero Icon String(Hero(Ashe)), Event Player));
		Set Status(Event Player.M, Event Player, Rooted, 1);
		For Player Variable(Event Player, for_loop, 0, Count Of(Event Player.M), True);
			Apply Impulse(Event Player.M[Event Player.for_loop], Direction Towards(Event Player.M[Event Player.for_loop], Eye Position(
				Event Player)), 20, To World, Cancel Contrary Motion);
		End;
		Wait(0.300, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 1), 10);
	}
}

rule("Xuanzang Sanzang ultimate loop (subroutine)")
{
	event
	{
		Subroutine;
		xuanzang_ULT_loop;
	}

	actions
	{
		Event Player.Z = Players Within Radius(Event Player.chase_Variable_at_rate, 6, Team Of(Event Player), Off);
		Event Player.G = Players Within Radius(Event Player.chase_Variable_at_rate, 6, Opposite Team Of(Team Of(Event Player)), Off);
		Event Player.Z.is_player_anchored = 0;
		Event Player.G.Is_Using_Ultimate = False;
		Detach Players(Event Player.Z);
		Stop Forcing Player Position(Event Player.Z);
		Clear Status(Event Player.G, Unkillable);
		Clear Status(Event Player.G, Invincible);
		Clear Status(Event Player.G, Phased Out);
		Set Status(Event Player.Z, Null, Frozen, 9999);
		Clear Status(Event Player.Z, Frozen);
		Start Heal Over Time(Event Player.Z, Event Player, 2, 85);
		Set Status(Event Player.Z, Null, Invincible, 1.500);
		Cancel Primary Action(Event Player.G);
		Wait(0.100, Ignore Condition);
		Abort If(Is In Spawn Room(Event Player)
			|| !Event Player.Is_Using_Ultimate || Event Player.chase_Variable_at_rate == Event Player.raycast_hit_position);
		Loop;
	}
}

rule("Gilles ab2 create effects (L) || Sherlock Holmes LifeSteal || Gordon AA ability")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 3);
			Call Subroutine(FoV_and_LoS_player_select);
			Event Player.E = Position Of(Event Player) - Vector(0, 35, 0);
			Skip If(!Entity Exists(Event Player.FoV_and_lineOFsight_player), 5);
			Start Damage Over Time(Event Player.FoV_and_lineOFsight_player, Null, 3, 60);
			Start Heal Over Time(Event Player, Event Player, 3, 40);
			Start Camera(Event Player.FoV_and_lineOFsight_player, Event Player.E, Down, 0);
			Create Effect(All Players(All Teams), Cassidy Flashbang Stunned Effect, Color(White), Eye Position(
				Event Player.FoV_and_lineOFsight_player), 2, Visible To Position and Radius);
			Event Player.Effects[1] = Last Created Entity;
			Wait(1.250, Ignore Condition);
			Stop Camera(Event Player.FoV_and_lineOFsight_player);
			Set Ability Cooldown(Event Player, Button(Ability 2), 15);
			Destroy Effect(Event Player.Effects[1]);
		Else If(Event Player.selected_hero_list_number == Null);
			Event Player.C = True;
			Start Rule(gilles_de_rais_tentacle_loop, Restart Rule);
			For Player Variable(Event Player, for_loop, 0, 4, True);
				Call Subroutine(raycast_hit_position1);
				Event Player.T[Event Player.for_loop] = Event Player.raycast_hit_position;
				Create Effect(All Players(All Teams), Ring, Color(Purple), Event Player.T[Event Player.for_loop], 7, None);
				Event Player.Effects[Event Player.for_loop] = Last Created Entity;
				Create Icon(All Players(All Teams), Event Player.T[Event Player.for_loop], Warning, None, Color(White), False);
				Event Player.Effects[8 - Event Player.for_loop] = Last Created Entity;
				Wait(0.600, Ignore Condition);
			End;
			Event Player.delay_tagger = True;
			Event Player.gilles_de_rais_damage = 45;
			Wait Until(Is In Spawn Room(Event Player) || !Event Player.C || Is Dead(Event Player), 7);
			Small Message(Event Player, Custom String("Tentacles disabled"));
			Event Player.delay_tagger = False;
			Event Player.L = Empty Array;
			Event Player.C = False;
			For Player Variable(Event Player, for_loop, 0, 9, True);
				Destroy Icon(Event Player.Effects[Event Player.for_loop]);
				Destroy Effect(Event Player.Effects[Event Player.for_loop]);
			End;
			Event Player.T = Null;
			Event Player.gilles_de_rais_damage = 1;
		Else If(Event Player.selected_hero_list_number == 2 && Is On Ground(Event Player));
			Event Player.X = Position Of(Event Player);
			Create Effect(All Players(All Teams), Light Shaft, Color(Blue), Event Player.X, 20, Visible To Position and Radius);
			Event Player.Effects[11] = Last Created Entity;
			Create In-World Text(All Players(All Teams), Custom String("[NO JUMPING AREA]"), Event Player.X + Vector(0, 1.500, 0), 3,
				Do Not Clip, Visible To Position and String, Color(Sky Blue), Default Visibility);
			Event Player.Effects[12] = Last Text ID;
			Start Rule(Symmetra_AA_mine, Restart Rule);
			Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player), 10);
			Set Ability Cooldown(Event Player, Button(Ability 2), 10);
			Destroy Effect(Event Player.Effects[11]);
			Destroy In-World Text(Event Player.Effects[12]);
			Event Player.X = Null;
	}
}

rule("Ab2 Gilles Tentacles (T,C)")
{
	event
	{
		Subroutine;
		gilles_de_rais_tentacle_loop;
	}

	actions
	{
		For Player Variable(Event Player, for_loop_2, 0, 4, 1);
			Damage(Players Within Radius(Event Player.T[Event Player.for_loop_2], 7, Opposite Team Of(Team Of(Event Player)), Off), Null,
				Event Player.gilles_de_rais_damage);
		End;
		Wait(0.550, Ignore Condition);
		Abort If(!Event Player.C);
		Loop;
	}
}

rule("Moctezuma faster melee")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.selected_hero_list_number == 1;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Melee), False);
		Press Button(Event Player, Button(Melee));
		Wait(0.400, Ignore Condition);
		Cancel Primary Action(Event Player);
		Loop If Condition Is True;
	}
}

rule("Moctezuma ab1 melee")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Event Player.selected_hero_list_number == 1;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 1), 5.500);
		Event Player.moctezuma_ab1_active = True;
		Event Player.moctezuma_attack = True;
		Set Damage Dealt(Event Player, 220);
		Cancel Primary Action(Event Player);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Button(Melee));
		Wait(0.500, Ignore Condition);
		Set Damage Dealt(Event Player, 130);
		Event Player.moctezuma_attack = False;
		Wait(3, Ignore Condition);
		Event Player.moctezuma_ab1_active = False;
	}
}

rule("ALL ROADHOG damage done")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	actions
	{
		If(Event Player.moctezuma_attack == True && Event Player.selected_hero_list_number == 1 && Event Ability == Button(Melee));
			Set Status(Event Player, Null, Unkillable, 3);
			Start Heal Over Time(Event Player, Event Player, 5, 135);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Victim, 2);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Black), Victim, 2);
			Play Effect(All Players(All Teams), Good Explosion, Color(Red), Victim, 2);
			Damage(Victim, Event Player, 80);
			Small Message(Array(Attacker, Players Within Radius(Victim, 8, Team Of(Victim), Off)), Custom String("{0} Get Moctezumaed!",
				Hero Icon String(Hero Of(Event Player))));
			Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Eye Position(Victim), 8);
			Start Damage Over Time(Players Within Radius(Victim, 8, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 3, 9);
			Wait Until(Event Player.moctezuma_ab1_active == False, 5);
		Else If(Event Player.selected_hero_list_number == Null);
			If(Event Ability == Button(Melee));
				Modify Player Variable(Event Player, V, Append To Array, Victim);
				Attach Players(Victim, Event Player, Vector(False, 2, False));
				Set Status(Victim, Null, Knocked Down, 9999);
				Set Status(Victim, Null, Phased Out, 9999);
			Else If(Event Ability == Button(Ability 1));
				Set Status(Event Player, Null, Stunned, 0.016);
				Small Message(Victim, Custom String("Here I come :3"));
				Event Player.P = Position Of(Victim);
				Disallow Button(Event Player, Button(Melee));
				Teleport(Event Player, Nearest Walkable Position(Event Player.P));
				Wait(True, Ignore Condition);
				Allow Button(Event Player, Button(Melee));
			End;
			If(Event Ability == Button(Ultimate));
				Apply Impulse(Victim, Direction Towards(Victim, Event Player), 35, To World, Incorporate Contrary Motion);
				Set Status(Victim, Event Player, Rooted, True);
	}
}

rule("Charlles ab2 1/2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		(Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned) || Has Status(Event Player, Knocked Down)) == False;
		Is Alive(Event Player) == True;
		Event Player.selected_hero_list_number == Null;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), 12);
		Event Player.L = Position Of(Event Player);
		Event Player.B = True;
		Create Effect(All Players(All Teams), Sphere, Color(Orange), Event Player.L, 7, Visible To Position and Radius);
		Event Player.Effects[True] = Last Created Entity;
		Start Rule(charles_de_gaulle_ab2_loop, Restart Rule);
		Wait(5, Ignore Condition);
		Event Player.L += Vector(False, 999, False);
		Event Player.B = False;
		Destroy Effect(Event Player.Effects[True]);
	}
}

rule("Charlles ab2  2/2 (if outsider)")
{
	event
	{
		Subroutine;
		charles_de_gaulle_ab2_loop;
	}

	actions
	{
		Event Player.V = Players Within Radius(Event Player.L, 7, Opposite Team Of(Team Of(Event Player)), Off);
		Set Status(Event Player.V, Null, Rooted, 0.200);
		For Player Variable(Event Player, for_loop, 0, Count Of(Event Player.V), True);
			Apply Impulse(Event Player.V[Event Player.for_loop], Direction Towards(Position Of(Event Player.L),
				Event Player.V[Event Player.for_loop]) * Vector(True, False, True), 10, To World, Cancel Contrary Motion);
			Apply Impulse(Event Player.V[Event Player.for_loop], Direction Towards(Position Of(Event Player.L),
				Event Player.V[Event Player.for_loop]) * Vector(True, False, True), 10, To World, Incorporate Contrary Motion);
		End;
		Wait(0.016, Ignore Condition);
		Abort If(Event Player.B == False);
		Loop If Condition Is True;
	}
}

rule("Charlles  sec.fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		(Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned) || Has Status(Event Player, Knocked Down)) == False;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == Null;
		Is Alive(Event Player) == True;
		Event Player.selected_hero_list_number == Null;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Event Player.color = Color(White);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 11);
		Event Player.M = True;
		Event Player.N = Position Of(Event Player);
		Create Effect(All Players(All Teams), Ring, Color(Green), Event Player.N, 5, Visible To Position and Radius);
		Event Player.Effects[3] = Last Created Entity;
		Create Icon(All Players(All Teams), Event Player.N, Warning, Visible To Position and Color, Event Player.color, False);
		Event Player.Effects[4] = Last Created Entity;
		Wait(1.250, Ignore Condition);
		Event Player.color = Color(Red);
		Wait Until(Count Of(Players Within Radius(Event Player.N, 6, Opposite Team Of(Team Of(Event Player)), Surfaces)) >= 1, 6);
		Event Player.M = Players Within Radius(Event Player.N, 6, Opposite Team Of(Team Of(Event Player)), Surfaces);
		Apply Impulse(Event Player.M, Direction Towards(Last Of(Event Player.M), Event Player.N - Vector(False, 2.500, False)) * -1, 25,
			To World, Cancel Contrary Motion);
		Damage(Event Player.M, Event Player, 280);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Green), Event Player.N, 1);
		Play Effect(All Players(All Teams), Explosion Sound, Color(Green), Event Player.N, 100);
		Set Status(Event Player.M, Event Player, Knocked Down, 1.250);
		Destroy Effect(Event Player.Effects[3]);
		Destroy Icon(Event Player.Effects[4]);
		Event Player.M = False;
		Event Player.N = Vector(123, -222, False);
	}
}

rule("(Kinkku) Symmetra ult wall")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Symmetra);
		Is Using Ultimate(Event Player) == True;
		Event Player.U == False;
		Event Player.selected_hero_list_number == 1;
	}

	actions
	{
		Wait(0.050, Ignore Condition);
		Apply Impulse(Filtered Array(All Players(All Teams), (X Component Of(Event Player.R + Event Player.S) - X Component Of(
			Event Player.R)) * (Z Component Of(Position Of(Current Array Element)) - Z Component Of(Event Player.R)) - (X Component Of(
			Position Of(Current Array Element)) - X Component Of(Event Player.R)) * (Z Component Of(Event Player.R + Event Player.S)
			- Z Component Of(Event Player.R)) < 1 && (X Component Of(Event Player.R + Event Player.S) - X Component Of(Event Player.R)) * (
			Z Component Of(Position Of(Current Array Element)) - Z Component Of(Event Player.R)) - (X Component Of(Position Of(
			Current Array Element)) - X Component Of(Event Player.R)) * (Z Component Of(Event Player.R + Event Player.S) - Z Component Of(
			Event Player.R)) > 0), Vector(Z Component Of(Event Player.S) * -1, False, X Component Of(Event Player.S)), 55, To World,
			Cancel Contrary Motion);
		Apply Impulse(Filtered Array(All Players(All Teams), (X Component Of(Event Player.R + Event Player.S) - X Component Of(
			Event Player.R)) * (Z Component Of(Position Of(Current Array Element)) - Z Component Of(Event Player.R)) - (X Component Of(
			Position Of(Current Array Element)) - X Component Of(Event Player.R)) * (Z Component Of(Event Player.R + Event Player.S)
			- Z Component Of(Event Player.R)) < 0 && (X Component Of(Event Player.R + Event Player.S) - X Component Of(Event Player.R)) * (
			Z Component Of(Position Of(Current Array Element)) - Z Component Of(Event Player.R)) - (X Component Of(Position Of(
			Current Array Element)) - X Component Of(Event Player.R)) * (Z Component Of(Event Player.R + Event Player.S) - Z Component Of(
			Event Player.R)) > -1), Vector(Z Component Of(Event Player.S), False, X Component Of(Event Player.S) * -1), 55, To World,
			Cancel Contrary Motion);
		Loop If Condition Is True;
	}
}

rule("(Kinkku) Symmetra ult second")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Event Player.U == False;
		Is Button Held(Event Player, Button(Primary Fire)) == False;
		Event Player.selected_hero_list_number == 1;
		Hero Of(Event Player) == Hero(Symmetra);
	}

	actions
	{
		Set Status(Event Player, Null, Rooted, 1.500);
		Disallow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Ultimate));
		Press Button(Event Player, Button(Ultimate));
		"was 0.018"
		Wait(0.018, Ignore Condition);
		Disallow Button(Event Player, Button(Ultimate));
		"was 0.08"
		Wait(0.080, Ignore Condition);
		Allow Button(Event Player, Button(Ultimate));
		Press Button(Event Player, Button(Ultimate));
		"was 0.018"
		Wait(0.018, Ignore Condition);
		Disallow Button(Event Player, Button(Ultimate));
		"was 0.08"
		Wait(0.080, Ignore Condition);
		Allow Button(Event Player, Button(Primary Fire));
		Press Button(Event Player, Button(Primary Fire));
	}
}

rule("D Trump damage beam")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		(Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned) || Has Status(Event Player, Knocked Down)) == False;
		Event Player.U == True;
		Is Alive(Event Player) == True;
		Event Player.selected_hero_list_number == 1;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Event Player.Donald_chaser1 = Position Of(Event Player.raycast_hit_position);
		Chase Player Variable Over Time(Event Player, Donald_chaser1, Event Player.I, Event Player.trump_wait_middle,
			Destination and Duration);
		Wait Until(Event Player.Donald_chaser1 == Event Player.I || Is Assembling Heroes || Count Of(Players Within Radius(
			Event Player.Donald_chaser1, 2.650, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers)) >= 1, 99999);
		Create Beam Effect(All Players(All Teams), Good Beam, Event Player.raycast_hit_position, Event Player.Donald_chaser1, Color(Red),
			Visible To Position and Radius);
		Event Player.Effects[True] = Last Created Entity;
		Damage(Players Within Radius(Event Player.Donald_chaser1, 2.650, Opposite Team Of(Team Of(Event Player)),
			Surfaces And Enemy Barriers), Event Player, 33);
		Play Effect(All Players(All Teams), Good Explosion, Color(White), Event Player.Donald_chaser1, 1);
		Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player.Donald_chaser1, 70);
		Stop Chasing Player Variable(Event Player, Donald_chaser1);
		Wait(0.050, Ignore Condition);
		Destroy Effect(Event Player.Effects[True]);
		Wait(Event Player.trump_wait_time, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("D trump stun camera damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		(Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned) || Has Status(Event Player, Knocked Down)) == False;
		Event Player.U == True;
		Is Alive(Event Player) == True;
		Event Player.selected_hero_list_number == 1;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), 3.150);
		Event Player.Donald_chaser2 = Position Of(Event Player.raycast_hit_position);
		Chase Player Variable Over Time(Event Player, Donald_chaser2, Event Player.I, 0.050, Destination and Duration);
		Wait Until(Event Player.Donald_chaser2 == Event Player.I || Is Assembling Heroes || Count Of(Players Within Radius(
			Event Player.Donald_chaser2, 5, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers)) >= 1, 99999);
		Create Beam Effect(All Players(All Teams), Good Beam, Event Player.raycast_hit_position, Event Player.Donald_chaser2, Color(
			Turquoise), Visible To Position and Radius);
		Event Player.Effects[2] = Last Created Entity;
		Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Event Player.Donald_chaser2, 2.500);
		Damage(Players Within Radius(Event Player.Donald_chaser2, 5, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers),
			Event Player, 110);
		Set Status(Players Within Radius(Event Player.Donald_chaser2, 5, Opposite Team Of(Team Of(Event Player)), Off), Null, Knocked Down,
			True);
		Apply Impulse(Players Within Radius(Event Player.Donald_chaser2, 5, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Up + Backward, 20, To Player, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player.Donald_chaser2, 70);
		Stop Chasing Player Variable(Event Player, Donald_chaser2);
		Wait(0.050, Ignore Condition);
		Destroy Effect(Event Player.Effects[2]);
		Wait(4, Ignore Condition);
		Small Message(Event Player, Custom String("Stun beam ready"));
	}
}

rule("D Trump facing direction camera loop")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Event Player.U == True;
		Event Player.selected_hero_list_number == 1;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Event Player.I = Ray Cast Hit Position(Event Player.raycast_hit_position, Event Player.raycast_hit_position + Facing Direction Of(
			Event Player) * 150, All Players(All Teams), Event Player, True);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("D Trump ab1 cam activation || Gordon Freeman Sym No Clip activate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Is Alive(Event Player) == True;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 1);
			Wait Until(Is Button Held(Event Player, Button(Ability 1)) || Is In Spawn Room(Event Player), 99999);
			Event Player.moira_dummy = Facing Direction Of(Event Player);
			Call Subroutine(raycast_hit_position1);
			Start Camera(Event Player, Event Player.raycast_hit_position, Event Player.raycast_hit_position + Facing Direction Of(Event Player)
				* 50, 50);
			Set Facing(Event Player, Facing Direction Of(Event Player) * -1, To World);
			Create Icon(Remove From Array(All Players(All Teams), Event Player), Event Player.raycast_hit_position, Eye,
				Visible To and Position, Color(Sky Blue), True);
			Event Player.Effects[6] = Last Created Entity;
			Create Beam Effect(Remove From Array(All Players(All Teams), Event Player), Good Beam, Event Player.raycast_hit_position,
				Event Player, Color(Sky Blue), Visible To Position and Radius);
			Event Player.Effects[7] = Last Created Entity;
			Small Message(Event Player, Custom String("Active"));
			Event Player.U = True;
			Set Status(Event Player, Null, Rooted, 9999);
			Set Aim Speed(Event Player, 200);
			Create Effect(All Players(All Teams), Sphere, Color(Orange), Event Player.raycast_hit_position, 0.450,
				Visible To Position and Radius);
			Event Player.Effects[3] = Last Created Entity;
			Wait(0.250, Ignore Condition);
			Wait Until(Is Button Held(Event Player, Button(Ability 1)) || Is In Spawn Room(Event Player) || Is Dead(Event Player), 99999);
			Disallow Button(Event Player, Button(Primary Fire));
			Destroy Effect(Event Player.Effects[3]);
			Destroy Icon(Event Player.Effects[6]);
			Destroy Effect(Event Player.Effects[7]);
			Set Aim Speed(Event Player, 100);
			Clear Status(Event Player, Rooted);
			Small Message(Event Player, Custom String("Not active"));
			Event Player.U = False;
			Stop Camera(Event Player);
			Set Facing(Event Player, Event Player.moira_dummy, To World);
			Wait(0.150, Ignore Condition);
			Loop If(Is Alive(Event Player) && Entity Exists(Event Player) && !Is In Spawn Room(Event Player));
		Else If(Event Player.selected_hero_list_number == 2);
			Set Move Speed(Event Player, 330);
			Disable Movement Collision With Environment(Event Player, True);
			Disable Movement Collision With Players(Event Player);
			Event Player.N = True;
			Start Rule(float_player_above_level, Restart Rule);
			Wait(0.300, Ignore Condition);
			Wait Until(Is Button Held(Event Player, Button(Ability 1)) || Is Dead(Event Player) || Is In Spawn Room(Event Player), 4);
			Set Ability Charge(Event Player, Button(Ability 1), False);
			Event Player.N = False;
			Enable Movement Collision With Environment(Event Player);
			Enable Movement Collision With Players(Event Player);
			Set Move Speed(Event Player, 145);
			Wait(11, Ignore Condition);
			Small Message(Event Player, Custom String("No-clip ready"));
	}
}

rule("The Old Man of the Mountain ultimate")
{
	event
	{
		Player Dealt Damage;
		All;
		Sigma;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
		Event Player.selected_hero_list_number == 1;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Wait Until(Is In Spawn Room(Event Player) || !Entity Exists(Event Player), 8);
		Set Max Health(Event Player.A, 180);
		Event Player.A = Empty Array;
	}
}

rule("The Old Man of the Mountain ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.selected_hero_list_number == 1;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Wait Until(Is In Spawn Room(Event Player) || !Entity Exists(Event Player), 6);
		Set Ultimate Charge(Event Player, False);
	}
}

rule("old man of mountain ab2 coordown")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Event Player.selected_hero_list_number == 1;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 2), 4);
	}
}

rule("Ashe Caster Gilgamesh ab1 1/2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Alive(Event Player) == True;
		Event Player.selected_hero_list_number == 2;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Call Subroutine(raycast_hit_position1);
		Create Effect(All Players(All Teams), Ring, Color(Yellow), Event Player.raycast_hit_position, 12, Visible To Position and Radius);
		Event Player.Effects[True] = Last Created Entity;
		Event Player.U = True;
		Start Rule(caster_gilgamesh_ab1, Restart Rule);
		Wait Until(Is In Spawn Room(Event Player), 4);
		Event Player.U = False;
		Set Ability Cooldown(Event Player, Button(Ability 1), 6);
		Destroy Effect(Event Player.Effects[True]);
	}
}

rule("Ashe Caster Gilgamesh ab1 2/2")
{
	event
	{
		Subroutine;
		caster_gilgamesh_ab1;
	}

	actions
	{
		Event Player.D = Event Player.raycast_hit_position + Vector(Random Integer(-6, 6), False, Random Integer(-6, 6));
		Event Player.P = Event Player.raycast_hit_position + Vector(False, 10, False);
		Wait(0.050, Abort When False);
		Create Beam Effect(All Players(All Teams), Good Beam, Event Player.raycast_hit_position + Vector(False, 10, False), Event Player.D,
			Color(Yellow), None);
		Event Player.Effects[2] = Last Created Entity;
		Damage(Remove From Array(Players Within Radius(Event Player.D, 3, All Teams, Off), Event Player), Event Player, 100);
		Play Effect(All Players(All Teams), Good Explosion, Color(Yellow), Event Player.D, 3);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Yellow), Event Player.D, 40);
		Wait(0.080, Ignore Condition);
		Destroy Effect(Event Player.Effects[2]);
		Wait(0.350, Ignore Condition);
		Abort If(Event Player.U == False);
		Loop;
	}
}

rule("Enkidu float (fly) Echo")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		"chains variable"
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == Null;
		(Has Status(Event Player, Knocked Down) || Has Status(Event Player, Asleep) || Has Status(Event Player, Frozen) || Has Status(
			Event Player, Rooted) || Has Status(Event Player, Stunned)) == False;
		Event Player.selected_hero_list_number == Null;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 4.500);
		Event Player.enkidu_float = True;
		Apply Impulse(Event Player, Facing Direction Of(Event Player), 30, To World, Cancel Contrary Motion);
	}
}

rule("Enkidu ab1 (forward chain) || Archangel Michael other thing")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		(Is Using Ability 1(Event Player) || (Is Button Held(Event Player, Button(Ability 1)) && !Ability Cooldown(Event Player, Button(
			Ability 1)))) == True;
		Is Alive(Event Player) == True;
		(Has Status(Event Player, Knocked Down) || Has Status(Event Player, Frozen)) == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 0);
			Event Player.E = Position Of(Event Player);
			Event Player.D = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player)
				* 55, All Players(All Teams), Event Player, True);
			Chase Player Variable At Rate(Event Player, E, Event Player.D, 185, Destination and Rate);
			Create Beam Effect(All Players(All Teams), Omnic Slicer Beam, Event Player.E, Event Player.E, Color(Aqua),
				Visible To Position and Radius);
			Event Player.Effects[4] = Last Created Entity;
			Create Beam Effect(All Players(All Teams), Brigitte Flail Chain Beam, Event Player, Event Player.E, Color(Yellow),
				Visible To Position and Radius);
			Event Player.Effects[5] = Last Created Entity;
			"chains on"
			Start Rule(enkidu_ab1_loop, Restart Rule);
			Wait Until(Position Of(Event Player.E) == Event Player.D, 99999);
			Set Ability Cooldown(Event Player, Button(Ability 1), 6);
			Destroy Effect(Event Player.Effects[4]);
			Destroy Effect(Event Player.Effects[5]);
			Stop Chasing Player Variable(Event Player, E);
			Event Player.E -= Vector(False, 500, False);
		Else If(Event Player.selected_hero_list_number == 1);
			Create Effect(All Players(All Teams), Good Aura, Color(Yellow), Event Player, 1, Visible To Position and Radius);
			Event Player.Effects[1] = Last Created Entity;
			Disable Movement Collision With Environment(Event Player, True);
			While(Is Using Ability 1(Event Player));
				Event Player.B = Filtered Array(All Players(Opposite Team Of(Team Of(Event Player))), Is In Line of Sight(Current Array Element,
					Event Player, Enemy Barriers Block LOS) && Is In View Angle(Current Array Element, Event Player, 50));
				Damage(Event Player.B, Event Player, 11);
				Wait(0.100, Ignore Condition);
			End;
			Enable Movement Collision With Environment(Event Player);
			Destroy Effect(Event Player.Effects[1]);
	}
}

rule("Enkidu ab1 (damage)")
{
	event
	{
		Subroutine;
		enkidu_ab1_loop;
	}

	actions
	{
		Wait Until(Count Of(Players Within Radius(Event Player.E, 3, Opposite Team Of(Team Of(Event Player)), Surfaces)) >= 1, 99999);
		Damage(Players Within Radius(Event Player.E, 3, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 115);
		Wait(0.100, Ignore Condition);
		Loop If(Event Player.E != Event Player.D);
	}
}

rule("Enkidu ab2 (chain barrage)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Alive(Event Player) == True;
		Event Player.selected_hero_list_number == Null;
		(Has Status(Event Player, Knocked Down) || Has Status(Event Player, Frozen)) == False;
	}

	actions
	{
		Call Subroutine(enkidu_ab2_loop);
		Set Ability Cooldown(Event Player, Button(Ability 2), 11);
		Event Player.G -= Vector(False, 300, False);
		Event Player.raycast_hit_position2 -= Vector(False, 300, False);
	}
}

rule("Enkidu ab2 (damage loop)")
{
	event
	{
		Subroutine;
		enkidu_ab2_loop;
	}

	actions
	{
		For Player Variable(Event Player, for_loop_2, 0, 3, 1);
			Call Subroutine(raycast_hit_position2);
			Create Beam Effect(All Players(All Teams), Brigitte Flail Chain Beam, Event Player, Event Player.raycast_hit_position2, Color(
				White), Visible To);
			Event Player.Effects[6] = Last Created Entity;
			Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Event Player.raycast_hit_position2, 3);
			Damage(Players Within Radius(Event Player.raycast_hit_position2, 3, Opposite Team Of(Team Of(Event Player)), Off), Event Player,
				70);
			Wait(0.225, Ignore Condition);
			Destroy Effect(Event Player.Effects[6]);
			Abort If(Is Dead(Event Player));
		End;
	}
}

rule("Saber Alter Genji excalibur ultimate 1/2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Alive(Event Player) == True;
		Event Player.selected_hero_list_number == Null;
	}

	actions
	{
		Event Player.Is_Using_Ultimate = True;
		Call Subroutine(raycast_hit_position2);
		Event Player.Medusa_trap = Position Of(Event Player);
		Create Effect(All Players(All Teams), Sphere, Color(Red), Update Every Frame(Event Player.Medusa_trap), 4,
			Visible To Position and Radius);
		Event Player.Effects[5] = Last Created Entity;
		Chase Player Variable At Rate(Event Player, Medusa_trap, Event Player.raycast_hit_position2, 25, Destination and Rate);
		Start Rule(Saber_alter_ULT_ball, Restart Rule);
		Wait Until(Event Player.Medusa_trap == Event Player.raycast_hit_position2 || Is In Spawn Room(Event Player) || !Is Using Ultimate(
			Event Player), 8);
		Destroy Effect(Event Player.Effects[5]);
		Stop Chasing Player Variable(Event Player, Medusa_trap);
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player.raycast_hit_position2, 300);
		Create Effect(All Players(All Teams), Light Shaft, Color(Purple), Event Player.raycast_hit_position2, 10,
			Visible To Position and Radius);
		Event Player.Effects[3] = Last Created Entity;
		Create Beam Effect(All Players(All Teams), Moira Coalescence Beam, Event Player.raycast_hit_position2 - Vector(False, 14, False),
			Event Player.raycast_hit_position2 + Vector(False, 100, False), Color(Team 2), Visible To Position and Radius);
		Event Player.Effects[4] = Last Created Entity;
		Wait(0.100, Ignore Condition);
		Start Rule(excalibur_morgan, Restart Rule);
		Wait Until(Is In Spawn Room(Event Player) || !Is Using Ultimate(Event Player), 3);
		Set Ultimate Charge(Event Player, False);
		Event Player.Is_Using_Ultimate = False;
		Destroy Effect(Event Player.Effects[3]);
		Destroy Effect(Event Player.Effects[4]);
	}
}

rule("Saber Alter Genji excalibur ultimate 2/2")
{
	event
	{
		Subroutine;
		excalibur_morgan;
	}

	actions
	{
		Abort If(!Is Using Ultimate(Event Player));
		Abort If(!Event Player.Is_Using_Ultimate);
		Event Player.Q = Filtered Array(All Living Players(All Teams), Distance Between(Position Of(Current Array Element) * Vector(1, 0,
			1), Event Player.raycast_hit_position2 * Vector(1, 0, 1)) <= 10);
		Play Effect(All Players(All Teams), Explosion Sound, Color(Purple), Event Player.raycast_hit_position2, 65);
		Damage(Event Player.Q, Event Player, 23);
		Wait(0.100, Ignore Condition);
		Loop;
	}
}

rule("saber genji allow primary fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.selecting_HUD == False;
		Event Player.selected_hero_list_number == Null;
	}

	actions
	{
		If(Is Using Ultimate(Event Player));
			Allow Button(Event Player, Button(Primary Fire));
		Else If(!Is Using Ultimate(Event Player));
			Disallow Button(Event Player, Button(Primary Fire));
	}
}

rule("saber genji ab2 wind gust || sasaki damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null);
			Set Status(Event Player, Null, Invincible, True);
			Event Player.saber_wind_gust = Position Of(Event Player);
			Event Player.G = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player)
				* 35, All Players(All Teams), Event Player, True);
			Chase Player Variable At Rate(Event Player, saber_wind_gust, Event Player.G, 40, Destination and Rate);
			Start Rule(saber_alter_wind_gust, Restart Rule);
			Wait Until(!Is Using Ability 2(Event Player) || Event Player.saber_wind_gust == Event Player.G, 99999);
			Stop Chasing Player Variable(Event Player, saber_wind_gust);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Sky Blue), Event Player.saber_wind_gust, 6);
			Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player.saber_wind_gust, 150);
			Damage(Players Within Radius(Event Player.saber_wind_gust, 5, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 55);
			Apply Impulse(Players Within Radius(Event Player.saber_wind_gust, 5, All Teams, Off), Up, 17, To World, Cancel Contrary Motion);
			Event Player.saber_wind_gust = Position Of(Event Player) + Vector(False, 600, False);
			Stop Forcing Player Position(Event Player);
			Wait(3, Ignore Condition);
		Else If(Event Player.selected_hero_list_number == 6);
			Set Status(Event Player, Event Player, Unkillable, 6);
			Wait Until(!Is Using Ability 2(Event Player), 99999);
			Clear Status(Event Player, Unkillable);
		Else If(Event Player.selected_hero_list_number == 2);
			Damage(Filtered Array(Players Within Radius(Event Player, 4, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers),
				Is In View Angle(Event Player, Current Array Element, 60) && Is In Line of Sight(Event Player, Current Array Element,
				Enemy Barriers Block LOS)), Event Player, 15);
			Wait(0.330, Ignore Condition);
			Loop If Condition Is True;
	}
}

rule("jack the ripper ult (change target if dead)")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Event Player.jack_the_ripper_master.Is_Using_Ultimate == True;
		Event Player == Event Player.jack_the_ripper_master.T;
		Event Player.jack_the_ripper_master.selected_hero_list_number == 1;
	}

	actions
	{
		Event Player.jack_the_ripper_master.T = Filtered Array(Closest Player To(Event Player.jack_the_ripper_master, Team Of(
			Event Player)), Has Spawned(Current Array Element) && !Is Dummy Bot(Current Array Element));
		Event Player.jack_the_ripper_master = Null;
	}
}

rule("Hassan 100 ult 2/3 (subroutine)")
{
	event
	{
		Subroutine;
		hassan_100_loop;
	}

	actions
	{
		Skip If(!Is In Line of Sight(Event Player, Event Player.FoV_and_lineOFsight_player, Barriers Do Not Block LOS), 9);
		Set Status(Event Player.FoV_and_lineOFsight_player, Event Player, Rooted, 3.600);
		For Player Variable(Event Player, for_loop, 0, 4, True);
			Create Dummy Bot(Hero(Genji), Team Of(Event Player), -1, Event Player.FoV_and_lineOFsight_player + Vector(False, 3, False), Down);
			Last Created Entity.solomon_master = Event Player;
			Modify Player Variable(Event Player, Solomon_pillar_array, Append To Array, Last Created Entity);
			Set Damage Dealt(Last Created Entity, 295);
			Wait(0.150, Ignore Condition);
			Press Button(Last Created Entity, Button(Ability 1));
			Wait(0.600, Ignore Condition);
			Destroy Dummy Bot(Team Of(Event Player), Slot Of(Last Created Entity));
		End;
		Wait Until(Event Player.Is_Using_Ultimate == False, 99999);
		Abort;
	}
}

rule("Hassan 100 ult 3/3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Facing(Event Player, Down, To World);
	}
}

rule("Bedivere (refresh dash subroutine)")
{
	event
	{
		Subroutine;
		Bedivere_ult;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Wait(0.111, Ignore Condition);
		Abort If(!Is Using Ultimate(Event Player));
		Loop;
	}
}

rule("Siegfried  ab2 subroutine")
{
	event
	{
		Subroutine;
		sieg_ab2;
	}

	actions
	{
		Call Subroutine(raycast_hit_position2);
		Damage(Players Within Radius(Event Player.raycast_hit_position2, 2, Opposite Team Of(Team Of(Event Player)), Off), Event Player,
			15);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Event Player.raycast_hit_position2, 0.500);
		Wait(0.100, Ignore Condition);
		Abort If(Event Player.B == False);
		Loop;
	}
}

rule("mordred lighting beam NP 2/2")
{
	event
	{
		Subroutine;
		mordred_ultimate_damage_loop;
	}

	actions
	{
		Damage(Remove From Array(Players Within Radius(Event Player.Blood_arthur_1, 5, All Teams, Off), Event Player), Event Player, 100);
		Damage(Remove From Array(Players Within Radius(Event Player.Blood_arthur_2, 5, All Teams, Off), Event Player), Event Player, 100);
		Damage(Remove From Array(Players Within Radius(Event Player.Blood_arthur_3, 5, All Teams, Off), Event Player), Event Player, 100);
		Damage(Remove From Array(Players Within Radius(Event Player.Blood_arthur_4, 5, All Teams, Off), Event Player), Event Player, 100);
		Damage(Remove From Array(Players Within Radius(Event Player.Blood_arthur_5, 5, All Teams, Off), Event Player), Event Player, 100);
		Abort If(Event Player.Is_Using_Ultimate == False);
		Wait(0.080, Ignore Condition);
		Loop;
	}
}

rule("Lanling escape the look")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Array Contains(Event Player.Lanling_master.Lanling_array, Event Player) == True;
		Distance Between(Event Player, Event Player.Lanling_master) >= 7;
	}

	actions
	{
		Stop Facing(Event Player);
	}
}

rule("Genji servant damage (Dealt damage)")
{
	event
	{
		Player Dealt Damage;
		All;
		Genji;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 1 && Victim == Event Player.T && Event Player.Is_Using_Ultimate != Null);
			Start Heal Over Time(Event Player, Event Player, 0.800, 95);
			Set Status(Event Player, Null, Invincible, 1.200);
		Else If(Event Player.selected_hero_list_number == 2);
			If(Event Ability == Button(Melee));
				Damage(Victim, Event Player, 25);
				Damage(Victim, Null, 25);
			Else If(Event Ability == Button(Ability 1));
				Damage(Victim, Event Player, 75);
			End;
		Else If(Event Player.selected_hero_list_number == 3);
			If(Event Ability == Button(Melee));
				If(Is In View Angle(Event Player, Victim, 90) && !Is In View Angle(Victim, Event Player, 90));
					Damage(Victim, Event Player, 45);
				End;
			End;
		Else If(Is Using Ability 2(Event Player) && Event Player.selected_hero_list_number == 4);
			Set Status(Victim, Event Player, Rooted, 2);
			Set Status(Victim, Event Player, Burning, 2);
		Else If(Event Player.selected_hero_list_number == 4 && Event Ability == Button(Ability 1));
			Start Damage Over Time(Victim, Event Player, 2, 18);
		Else If(Event Player.selected_hero_list_number == 5);
			If(Event Ability == Button(Ability 1));
				If(Event Player.G == 1);
					Set Status(Victim, Event Player, Frozen, 2);
					Damage(Victim, Event Player, 75);
					Set Damage Received(Victim, 55);
					Wait(2, Ignore Condition);
					Set Damage Received(Victim, 70);
				Else If(Event Player.G == 2);
					Set Status(Victim, Event Player, Burning, 3.500);
					Start Damage Over Time(Victim, Attacker, 3, 60);
				End;
			Else If(Event Ability == Button(Ultimate));
				Set Status(Victim, Event Player, Rooted, 2);
				Set Status(Victim, Event Player, Burning, 2);
				Damage(Victim, Event Player, 45);
				Start Damage Over Time(Victim, Attacker, 2, 55);
			Else If(Event Ability == Button(Melee));
				Damage(Victim, Event Player, 35);
			End;
		Else If(Event Player.selected_hero_list_number == 6);
			If(Is Using Ultimate(Event Player));
				Heal(Victim, Event Player, Event Damage);
				Damage(Victim, Null, Health(Victim) / 2 + 50);
			Else If(Event Ability == Button(Ability 1) && !Is Using Ultimate(Event Player));
				Damage(Victim, Event Player, Ultimate Charge Percent(Victim) * 2);
			Else If(Event Ability == Button(Melee));
				Damage(Victim, Event Player, 45);
			End;
		Else If(Event Player.selected_hero_list_number == 7);
			If(Event Ability == Button(Ability 1));
				If(Array Contains(Event Player.Medusa_trap, Victim));
					Small Message(Event Player, Custom String("Nice combo!"));
					Start Damage Over Time(Victim, Null, 3, 16);
					Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Ultimate Charge Percent(Victim) / 5);
					Set Ultimate Charge(Victim, Ultimate Charge Percent(Victim) / 1.200);
				End;
				Event Player.H = Ultimate Charge Percent(Victim);
				Set Ultimate Charge(Victim, False);
				Wait Until(Is Dead(Event Player), 4);
				Set Ultimate Charge(Victim, Event Player.H);
			End;
		Else If(Event Ability == Button(Ability 1) && Event Player.selected_hero_list_number == 8);
			Set Status(Victim, Event Player, Burning, 3);
			Start Damage Over Time(Victim, Event Player, 3, 85);
			Damage(Victim, Event Player, 90);
			Set Ultimate Charge(Victim, Ultimate Charge Percent(Victim) - 5);
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 15);
		Else If(Event Player.selected_hero_list_number == 9 && Event Ability == Button(Ability 1));
			Remove All Health Pools From Player(Victim);
			Set Player Health(Victim, Health(Victim) - Max Health(Victim) / 5);
			Cancel Primary Action(Victim);
			Victim.Is_Using_Ultimate = Null;
		Else If(Event Ability == Button(Ability 1) && Event Player.selected_hero_list_number == 11);
			Start Damage Over Time(Victim, Event Player, 9, 4);
			Damage(Victim, Event Player, 25);
			Wait(0.700, Ignore Condition);
			Set Ability Cooldown(Event Player, Button(Ability 1), 3.500);
		Else If(Event Ability == Button(Ability 1) && Event Player.selected_hero_list_number == 12);
			Damage(Victim, Event Player, (Max Health(Event Player) - Health(Event Player)) * 0.400);
	}
}

rule("Genji ab1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Is Alive(Event Player) == True;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null);
			If(!(Has Status(Event Player, Frozen) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Stunned)));
				Apply Impulse(Event Player, Up, 4, To World, Cancel Contrary Motion);
				Wait(0.090, Ignore Condition);
				If(Throttle Of(Event Player) == Vector(True, False, False));
					Apply Impulse(Event Player, Left, 45, To Player, Cancel Contrary Motion);
				Else If(Throttle Of(Event Player) == Vector(-1, False, False));
					Apply Impulse(Event Player, Right, 45, To Player, Cancel Contrary Motion);
				Else If(Throttle Of(Event Player) == Vector(False, False, True));
					Apply Impulse(Event Player, Forward, 45, To Player, Cancel Contrary Motion);
				Else If(Throttle Of(Event Player) == Vector(False, False, -1));
					Apply Impulse(Event Player, Backward, 45, To Player, Cancel Contrary Motion);
				Else If(Throttle Of(Event Player) == Vector(False, False, False));
					Apply Impulse(Event Player, Facing Direction Of(Event Player), 45, To Player, Cancel Contrary Motion);
				Else If(Throttle Of(Event Player) == Vector(True, False, True));
					Apply Impulse(Event Player, Left + Forward, 45, To Player, Cancel Contrary Motion);
				Else If(Throttle Of(Event Player) == Vector(-1, False, True));
					Apply Impulse(Event Player, Right + Forward, 45, To Player, Cancel Contrary Motion);
				Else If(Throttle Of(Event Player) == Vector(True, False, -1));
					Apply Impulse(Event Player, Backward + Left, 45, To Player, Cancel Contrary Motion);
				Else If(Throttle Of(Event Player) == Vector(-1, False, -1));
					Apply Impulse(Event Player, Backward + Right, 45, To Player, Cancel Contrary Motion);
				End;
				Wait(3, Ignore Condition);
			End;
		Else If(Event Player.selected_hero_list_number == 2 && Ability Cooldown(Event Player, Button(Ability 1)) == 0);
			Event Player.D = First Of(Filtered Array(Players Within Radius(Event Player, 8, Opposite Team Of(Team Of(Event Player)), Off),
				Is Alive(Current Array Element) && Array Contains(All Heroes, Hero Of(Current Array Element))));
			Skip If(!Has Spawned(Event Player.D), 5);
			Attach Players(Event Player, Event Player.D, Vector(0, 0.850, 0));
			Set Facing(Event Player, Direction Towards(Event Player, Event Player.D), To World);
			Wait(0.150, Ignore Condition);
			Stop Facing(Event Player);
			Detach Players(Event Player);
			Allow Button(Event Player, Button(Ability 1));
			Press Button(Event Player, Button(Ability 1));
			Disallow Button(Event Player, Button(Ability 1));
			Wait(2, Ignore Condition);
		Else If(!Is Using Ultimate(Event Player) && Event Player.selected_hero_list_number == 3 && Ability Cooldown(Event Player, Button(
				Ability 1)) == Null && Is Alive(Event Player) && Event Player.hokusai_check_teleport == False);
			Event Player.Q = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player)
				* 45, All Players(All Teams), Event Player, True);
			Play Effect(All Players(All Teams), Buff Impact Sound, Color(Blue), Event Player.Q, 100);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Position Of(Event Player), 1);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player.Q, 1);
			Wait(0.500, Ignore Condition);
			Skip If(Event Player.hokusai_check_teleport == True, True);
			Teleport(Event Player, Event Player.Q + Vector(0, 0.500, 0));
			Wait(5, Ignore Condition);
			Small Message(Event Player, Custom String("Teleport dash ready"));
		Else If(Event Player.selected_hero_list_number == 8 && Event Player.Nobunaga_curse == False);
			Disallow Button(Event Player, Button(Jump));
			Set Status(Event Player, Null, Rooted, 0.400);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Event Player + Vector(False, True, False), 3);
			Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Red), Event Player, 80);
			Wait(0.450, Ignore Condition);
			Allow Button(Event Player, Button(Ability 1));
			Press Button(Event Player, Button(Ability 1));
			Wait(0.700, Ignore Condition);
			Disallow Button(Event Player, Button(Ability 1));
			Allow Button(Event Player, Button(Jump));
			Set Ability Cooldown(Event Player, Button(Ability 1), 7);
		Else If(Event Player.selected_hero_list_number == 10 && Is Using Ability 1(Event Player));
			Wait Until(!Is Using Ability 1(Event Player), 99999);
			Set Damage Received(Event Player, 35);
			Event Player.playerSpeed[False] += 95;
			Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player), 3);
			Event Player.playerSpeed[False] -= 95;
			Set Damage Received(Event Player, 70);
	}
}

rule("Genji ab2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Alive(Event Player) == True;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 1 && Is Using Ability 2(Event Player));
			Call Subroutine(destroy_nameONplayer);
			Apply Impulse(Event Player, Up, 4.600, To Player, Cancel Contrary Motion);
			Apply Impulse(Event Player, Backward, 560, To Player, Cancel Contrary Motion);
			Set Invisible(Event Player, Enemies);
			Wait Until(Is Assembling Heroes, 3);
			Set Invisible(Event Player, None);
			Call Subroutine(create_nameONplayer);
		Else If(Ability Cooldown(Event Player, Button(Ability 2)) == Null && Event Player.selected_hero_list_number == 3 && (!Has Status(
				Event Player, Knocked Down) || !Has Status(Event Player, Frozen) || !Has Status(Event Player, Hacked) || !Has Status(
				Event Player, Asleep) || !Has Status(Event Player, Stunned)));
			Play Effect(All Players(All Teams), Buff Impact Sound, Color(Blue), Event Player, 100);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Position Of(Event Player), 1);
			Set Ability Cooldown(Event Player, Button(Ability 2), 4);
			Event Player.hokusai_check_teleport = True;
			Attach Players(Event Player, Filtered Array(Closest Player To(Event Player, Opposite Team Of(Team Of(Event Player))),
				Entity Exists(Current Array Element) && Is Alive(Current Array Element)), Vector(False, 1.500, -2));
			Wait(0.150, Ignore Condition);
			Detach Players(Event Player);
			Set Facing(Event Player, Direction Towards(Event Player, Filtered Array(Closest Player To(Event Player, Opposite Team Of(Team Of(
				Event Player))), Entity Exists(Current Array Element))), To World);
			Wait Until(Is In Spawn Room(Event Player), 2);
			Event Player.hokusai_check_teleport = False;
		Else If(Event Player.selected_hero_list_number == 5);
			If(Event Player.G == 1);
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Red), Event Player, 1);
				Small Message(Event Player, Custom String("Fire style"));
				Event Player.G = 2;
			Else If(Event Player.G == 2);
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Sky Blue), Event Player, 1);
				Small Message(Event Player, Custom String("Ice style"));
				Event Player.G = 1;
			End;
		Else If(Is Using Ability 2(Event Player) && Event Player.selected_hero_list_number == 7);
			Event Player.I = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player)
				* 150, All Players(All Teams), Event Player, True);
			Play Effect(All Players(All Teams), Good Explosion, Color(White), Event Player.I, 3);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Lime Green), Event Player.I, 3);
			Play Effect(All Players(All Teams), Good Explosion, Color(Gray), Event Player.I, 3);
			Event Player.Medusa_trap = Filtered Array(Players Within Radius(Event Player.I, 3, Opposite Team Of(Team Of(Event Player)),
				Surfaces And Enemy Barriers), Is Moving(Current Array Element));
			Damage(Event Player.Medusa_trap, Event Player, 90);
			Set Status(Event Player.Medusa_trap, Event Player, Stunned, 1.450);
		Else If(Ability Cooldown(Event Player, Button(Ability 2)) == Null && Event Player.selected_hero_list_number == 8);
			Call Subroutine(FoV_and_LoS_player_select);
			Skip If(!Entity Exists(Event Player.FoV_and_lineOFsight_player), 10);
			Start Damage Modification(Event Player, Event Player.FoV_and_lineOFsight_player, 0, Receivers Damagers and Damage Percent);
			Event Player.Effects[3] = Last Damage Modification ID;
			Create Effect(Event Player.FoV_and_lineOFsight_player, Baptiste Immortality Field Protected Effect, Color(Blue), Event Player,
				True, Visible To Position and Radius);
			Event Player.Effects[4] = Last Created Entity;
			Stop All Damage Over Time(Event Player);
			Start Forcing Player Outlines(Event Player.FoV_and_lineOFsight_player, Event Player, True, Color(Red), Always);
			Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player), 3);
			Stop Damage Modification(Event Player.Effects[3]);
			Destroy Effect(Event Player.Effects[4]);
			Stop Forcing Player Outlines(Event Player.FoV_and_lineOFsight_player, Event Player);
			Event Player.FoV_and_lineOFsight_player = Null;
			Set Ability Cooldown(Event Player, Button(Ability 2), 7);
		Else If(Event Player.selected_hero_list_number == 9 && Is Using Ability 2(Event Player));
			Event Player.Z = Position Of(Event Player);
			Create Effect(All Players(All Teams), Sphere, Color(Red), Event Player.Z, Event Player.C, Visible To Position and Radius);
			Event Player.Effects[True] = Last Created Entity;
			Chase Player Variable Over Time(Event Player, C, 14, 0.450, Destination and Duration);
			Start Rule(Muramasa_ab2_loop, Restart Rule);
			Wait Until(!Is Using Ability 2(Event Player), 99999);
			Stop Chasing Player Variable(Event Player, C);
			Event Player.C = Null;
			Destroy Effect(Event Player.Effects[True]);
		Else If(Ability Cooldown(Event Player, Button(Ability 2)) == Null && Event Player.selected_hero_list_number == 10);
			Set Ability Cooldown(Event Player, Button(Ability 2), 7.500);
			Create Beam Effect(All Players(All Teams), Bad Beam, Update Every Frame(Position Of(Event Player)), Update Every Frame(
				Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 100,
				All Players(All Teams), Event Player, True)), Color(Blue), Visible To Position and Radius);
			Event Player.Effects[8] = Last Created Entity;
			Event Player.B = True;
			Start Rule(sieg_ab2, Restart Rule);
			Wait(2, Ignore Condition);
			Event Player.B = False;
			Destroy Effect(Event Player.Effects[8]);
		Else If(Ability Cooldown(Event Player, Button(Ability 2)) == Null && Event Player.selected_hero_list_number == 11);
			If(Event Player.K == False);
				Call Subroutine(remove_mordred_armor);
			Else If(Event Player.K == True);
				If(Is In Air(Event Player));
					Apply Impulse(Event Player, Down, 600, To World, Cancel Contrary Motion);
					Wait Until(Is On Ground(Event Player), 99999);
					Set Status(Players Within Radius(Event Player, 4, Opposite Team Of(Team Of(Event Player)), Off), Null, Stunned, 1.200);
					Damage(Players Within Radius(Event Player, 4, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 85);
					Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Event Player, 4);
				Else;
					Set Status(Players Within Radius(Event Player, 6, Opposite Team Of(Team Of(Event Player)), Off), Null, Stunned, 1.200);
					Damage(Players Within Radius(Event Player, 6, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 70);
					Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Event Player, 6);
					Apply Impulse(Players Within Radius(Event Player, 7, All Teams, Off), Up, 10, To World, Cancel Contrary Motion);
				End;
				Set Ability Cooldown(Event Player, Button(Ability 2), 7);
			End;
		Else If(Is Using Ability 2(Event Player) && Event Player.selected_hero_list_number == 2);
			Set Status(Event Player, Event Player, Phased Out, 6);
			Wait Until(!Is Using Ability 2(Event Player), 99999);
			Clear Status(Event Player, Phased Out);
		Else If(Is Using Ability 2(Event Player) && Event Player.selected_hero_list_number == 6);
			Event Player.is_damage_reversing = True;
			Wait Until(!Is Using Ability 2(Event Player), 99999);
			Event Player.is_damage_reversing = False;
		Else If(Is Using Ability 2(Event Player) && Event Player.selected_hero_list_number == 12);
			Call Subroutine(FoV_and_LoS_player_select);
			Skip If(!Event Player.FoV_and_lineOFsight_player, 2);
			Start Heal Over Time(Event Player, Event Player, 3, 80);
			Start Facing(Event Player.FoV_and_lineOFsight_player, Direction Towards(Event Player.FoV_and_lineOFsight_player, Event Player),
				1140, To World, Direction and Turn Rate);
			Wait Until(!Is Using Ability 2(Event Player), 7);
			Stop Facing(Event Player.FoV_and_lineOFsight_player);
			Wait(0.250, Ignore Condition);
			Set Ability Cooldown(Event Player, Button(Ability 2), 13);
	}
}

rule("Genji Faster melee")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 0);
			Press Button(Event Player, Button(Melee));
			Wait(0.300, Ignore Condition);
			Cancel Primary Action(Event Player);
			Set Ability Cooldown(Event Player, Button(Melee), False);
			Press Button(Event Player, Button(Melee));
			Wait(0.200, Ignore Condition);
		Else If(Event Player.selected_hero_list_number == 1 && Event Player.Is_Using_Ultimate == True);
			Press Button(Event Player, Button(Melee));
			Set Ability Cooldown(Event Player, Button(Melee), False);
			Wait(0.120, Ignore Condition);
			Cancel Primary Action(Event Player);
		End;
		Loop If Condition Is True;
	}
}

rule("Genji all ultimate setup (can use blade)")
{
	event
	{
		Subroutine;
		can_use_blade_subroutine;
	}

	actions
	{
		If(
			Event Player.selected_hero_list_number == 8 || Event Player.selected_hero_list_number == 10 || Event Player.selected_hero_list_number == 11 || Event Player.selected_hero_list_number == 9);
			Wait(0.150, Ignore Condition);
			Allow Button(Event Player, Button(Ultimate));
			Set Ultimate Charge(Event Player, 100);
			Wait(0.045, Ignore Condition);
			Start Holding Button(Event Player, Button(Ultimate));
			Allow Button(Event Player, Button(Primary Fire));
			Wait Until(Is Using Ultimate(Event Player) || Is Dead(Event Player) || Is In Spawn Room(Event Player), 99999);
			Wait Until(!Is Using Ultimate(Event Player), 99999);
			Set Ultimate Charge(Event Player, 0);
			Stop Holding Button(Event Player, Button(Ultimate));
			Skip If(Event Player.selected_hero_list_number == 9, True);
			Disallow Button(Event Player, Button(Ultimate));
			Disallow Button(Event Player, Button(Primary Fire));
		End;
		Abort;
	}
}

rule("All Lucio ab1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Is Alive(Event Player) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Event Player, 1);
			Play Effect(All Players(All Teams), Buff Impact Sound, Color(Green), Event Player, 100);
			Event Player.S = Players Within Radius(Event Player, 11, Team Of(Event Player), Off);
			Event Player.S.playerSpeed[False] += 80;
			Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player), 4);
			Event Player.S.playerSpeed[False] -= 80;
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player.S, 1);
			Play Effect(All Players(All Teams), Buff Impact Sound, Color(Red), Event Player.S, 100);
			Wait(5.500, Ignore Condition);
			Small Message(Event Player, Custom String("You can use speed boost now"));
		Else If(Event Player.selected_hero_list_number == 1);
			Event Player.X = 2;
			Start Rule(lovecraft_start_resource_down, Restart Rule);
			Start Rule(lovecraft_ab1_resource_loop, Restart Rule);
			Create Effect(All Players(All Teams), Bad Aura, Color(Green), Position Of(Event Player), True, Visible To Position and Radius);
			Event Player.Effects[True] = Last Created Entity;
			Set Status(Event Player, Null, Unkillable, 9999);
			Set Move Speed(Event Player, 200);
			Set Invisible(Event Player, All);
			Start Damage Modification(Event Player, All Players(Opposite Team Of(Team Of(Event Player))), 0,
				Receivers Damagers and Damage Percent);
			Event Player.Effects[3] = Last Damage Modification ID;
			Wait(0.150, Ignore Condition);
			Wait Until(Is Button Held(Event Player, Button(Ability 1)) || Event Player.X || Has Status(Event Player, Rooted), 99999);
			Call Subroutine(lovecraft_clear_ab1);
			Wait(0.500, Ignore Condition);
	}
}

rule("Amadeus Mozart ab 2 heal boost || create clone")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		(Is Using Ability 2(Event Player) || (Is Button Held(Event Player, Button(Ability 2)) && Ability Cooldown(Event Player, Button(
			Ability 2)) == Null)) == True;
		Is Alive(Event Player) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null);
			Start Heal Over Time(Players Within Radius(Event Player, 8, Team Of(Event Player), Off), Event Player, 4.500, 80);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player + Vector(False, True, False), 8);
			Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Yellow), Event Player, 100);
			Set Ability Cooldown(Event Player, Button(Ability 2), 13);
			Wait(1, Ignore Condition);
		Else If(Event Player.selected_hero_list_number == 1);
			Create Dummy Bot(Hero(Lúcio), Team Of(Event Player), -1, Event Player, Facing Direction Of(Event Player));
			"bot"
			Event Player.Solomon_pillar_array = Last Created Entity;
			Last Created Entity.solomon_master = Event Player;
			Set Max Health(Event Player.Solomon_pillar_array, 105);
			Event Player.Solomon_pillar_array.L = True;
			Event Player.Solomon_pillar_array.is_damage_reversing = True;
			Wait(0.100, Ignore Condition);
			Start Throttle In Direction(Event Player.Solomon_pillar_array, Facing Direction Of(Event Player), Magnitude Of(Throttle Of(
				Event Player)), To World, Replace existing throttle, Direction and Magnitude);
			Wait Until(Is Dead(Event Player.Solomon_pillar_array), 6);
			Set Ability Cooldown(Event Player, Button(Ability 2), 7);
			Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player.Solomon_pillar_array));
	}
}

rule("Amadeus Mozart faster melee")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Press Button(Event Player, Button(Melee));
		Set Ability Cooldown(Event Player, Button(Melee), False);
		Wait(0.400, Ignore Condition);
		Cancel Primary Action(Event Player);
		Loop If Condition Is True;
	}
}

rule("lucio ab 2 clone (dake damage) || normal lucio kick out of dimension")
{
	event
	{
		Player Took Damage;
		All;
		Lúcio;
	}

	actions
	{
		If(Is Dummy Bot(Event Player));
			Damage(Attacker, Event Player, 50);
	}
}

rule("lucio ab 2 clone (remove clone+auto detonation)")
{
	event
	{
		Player Died;
		All;
		Lúcio;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Event Player.L == True;
	}

	actions
	{
		Event Player.is_damage_reversing = False;
		Play Effect(All Players(All Teams), Good Explosion, Color(Red), Event Player, 2);
		Damage(Players Within Radius(Event Player, 6, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 250);
		Wait(0.650, Ignore Condition);
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
	}
}

rule("lucio ab 2 clone (self detonate)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Alive(Event Player.Solomon_pillar_array) == True;
		Event Player.selected_hero_list_number == 1;
	}

	actions
	{
		Kill(Event Player.Solomon_pillar_array, Null);
	}
}

rule("All soldiers Ab1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null);
			Set Gravity(Event Player, False);
			Apply Impulse(Event Player, Facing Direction Of(Event Player), 30, To World, Cancel Contrary Motion);
			Wait(0.300, Ignore Condition);
			Set Gravity(Event Player, 100);
			Wait(3.500, Ignore Condition);
		Else If(Event Player.selected_hero_list_number == 1);
			Skip If(True, Event Player.Is_Using_Ultimate);
			Set Gravity(Event Player, 999);
			Start Forcing Throttle(Event Player, True, False, False, False, False, False);
			Event Player.playerSpeed[False] += 200;
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Event Player, 1);
			Play Effect(All Players(All Teams), Buff Impact Sound, Color(Green), Event Player, 80);
			Set Status(Event Player, Null, Unkillable, 2);
			Event Player.D = True;
			Wait(0.250, Ignore Condition);
			Wait Until(Is Button Held(Event Player, Button(Ability 1)) || Is Dead(Event Player) || Count Of(Filtered Array(
				Players Within Radius(Event Player, 2, Opposite Team Of(Team Of(Event Player)), Surfaces), Is Alive(Current Array Element)))
				>= 1, 4);
			Event Player.A = Players Within Radius(Event Player, 2, Opposite Team Of(Team Of(Event Player)), Off);
			Damage(Event Player.A, Event Player, 65);
			Set Gravity(Event Player, 100);
			Stop Forcing Throttle(Event Player);
			Event Player.playerSpeed[False] -= 200;
			Wait(0.016, Ignore Condition);
			Event Player.D = False;
			Event Player.A = Empty Array;
			Wait Until(Is Assembling Heroes, 7);
			Small Message(Event Player, Custom String("\"Shift\" ready"));
		Else If(Event Player.selected_hero_list_number == 2);
			If(Event Player.D == 1);
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Event Player, 1);
				Event Player.D = 2;
				Small Message(Event Player, Custom String("Poison mode"));
				Allow Button(Event Player, Button(Secondary Fire));
			Else If(Event Player.D == 2);
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Red), Event Player, 1);
				Event Player.D = 1;
				Small Message(Event Player, Custom String("Penetration mode"));
				Disallow Button(Event Player, Button(Secondary Fire));
			End;
		Else If(Event Player.selected_hero_list_number == 3);
			Set Status(Event Player, Null, Stunned, 0.016);
			Start Forcing Throttle(Event Player, True, False, False, False, False, False);
			Set Aim Speed(Event Player, 0);
			Set Move Speed(Event Player, 600);
			Event Player.W = True;
			Start Rule(leonidas_dash, Restart Rule);
			Wait(0.450, Ignore Condition);
			If(Event Player.leonidas_shield == 1);
				Set Move Speed(Event Player, 70);
			Else;
				Set Move Speed(Event Player, 145);
			End;
			Event Player.W = False;
			Stop Forcing Throttle(Event Player);
			Set Aim Speed(Event Player, 100);
			Disallow Button(Event Player, Button(Ability 1));
			Wait Until(Is Assembling Heroes, 5);
			Small Message(Event Player, Custom String("{0} {1}", Custom String("You can use ab1")));
		Else If(Event Player.selected_hero_list_number == 4);
			Set Gravity(Event Player, 5);
			Apply Impulse(Event Player, Up, 5, To World, Cancel Contrary Motion);
			Wait(0.250, Ignore Condition);
			Wait Until(Is Button Held(Event Player, Button(Ability 1)) || Is Assembling Heroes, 2.500);
			Set Gravity(Event Player, 100);
			Wait(6, Ignore Condition);
		Else If(Event Player.selected_hero_list_number == 5);
			Skip If(Event Player.Is_Using_Ultimate, 1);
			Call Subroutine(FoV_and_LoS_player_select);
			If(Entity Exists(Event Player.Solomon_pillar_array) && Entity Exists(Event Player.FoV_and_lineOFsight_player));
				Allow Button(Event Player.Solomon_pillar_array, Button(Primary Fire));
				Start Holding Button(Event Player.Solomon_pillar_array, Button(Primary Fire));
				Start Facing(Event Player.Solomon_pillar_array, Direction Towards(Event Player.Solomon_pillar_array,
					Event Player.FoV_and_lineOFsight_player), 10000, To World, Direction and Turn Rate);
				Wait Until(Is Dead(Event Player.FoV_and_lineOFsight_player) || !Entity Exists(Event Player.Solomon_pillar_array)
					|| Is Assembling Heroes, 10);
				Stop Facing(Event Player.Solomon_pillar_array);
				Disallow Button(Event Player.Solomon_pillar_array, Button(Primary Fire));
				Small Message(Event Player, Custom String("Soldier is tired..."));
			Else;
				Small Message(Event Player, Custom String("No players in range or active clone"));
	}
}

rule("All soldiers Ab2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null && Event Player.Is_Using_Ultimate == False);
			Set Ability Cooldown(Event Player, Button(Ability 2), 11);
			Stop Forcing Throttle(Event Player);
			Detach Players(Event Player);
			Stop Forcing Player Position(Event Player);
			Clear Status(Event Player, Frozen);
			Clear Status(Event Player, Knocked Down);
			Clear Status(Event Player, Stunned);
			Clear Status(Event Player, Rooted);
			Set Status(Event Player, Event Player, Invincible, 2);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Event Player, 2);
			Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Event Player, 70);
			Heal(Event Player, Event Player, 200);
			Event Player.is_player_anchored = Null;
		Else If(Event Player.selected_hero_list_number == 1);
			Allow Button(Event Player, Button(Secondary Fire));
			Set Projectile Speed(Event Player, 10000);
			For Player Variable(Event Player, for_loop_2, 0, 2, 1);
				Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
				Press Button(Event Player, Button(Secondary Fire));
				Wait(0.650, Ignore Condition);
			End;
			Set Ability Cooldown(Event Player, Button(Ability 2), 10);
			Disallow Button(Event Player, Button(Secondary Fire));
			Set Projectile Speed(Event Player, 100);
		Else If(Event Player.selected_hero_list_number == 2);
			Event Player.B = Players Within Radius(Event Player, 7, Opposite Team Of(Team Of(Event Player)), Off);
			Clear Status(Event Player.B, Invincible);
			Clear Status(Event Player.B, Unkillable);
			Clear Status(Event Player.B, Phased Out);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Event Player + Vector(False, 2, False), 6);
			Create Projectile(Sigma Hypersphere, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 100, 1,
				7, Bad Explosion, Explosion Sound, 0, 0.100, 0.100, 30, 0, 100);
			Set Ability Cooldown(Event Player, Button(Ability 2), 9);
		Else If(Event Player.selected_hero_list_number == 3 && Ability Cooldown(Event Player, Button(Ability 2)) == Null);
			Event Player.leonidas_shield = 1;
			Event Player.Y = True;
			Small Message(Event Player, Custom String("Shield up"));
			Set Damage Received(Event Player, 15);
			Set Gravity(Event Player, 900);
			Set Move Speed(Event Player, 70);
			Create Effect(All Players(All Teams), Sphere, Color(Yellow), Event Player, True, Visible To Position and Radius);
			Event Player.Effects[4] = Last Created Entity;
			Wait(0.500, Ignore Condition);
			Wait Until(Is Button Held(Event Player, Button(Ability 2)) || Is Dead(Event Player) || Is In Spawn Room(Event Player)
				|| Has Status(Event Player, Asleep) || Has Status(Event Player, Frozen) || Has Status(Event Player, Knocked Down)
				|| Has Status(Event Player, Stunned), 99999);
			Event Player.leonidas_shield = 2;
			Destroy Effect(Event Player.Effects[4]);
			Set Ability Cooldown(Event Player, Button(Ability 2), 3);
			Set Move Speed(Event Player, 145);
			Set Gravity(Event Player, 100);
			Set Damage Received(Event Player, 70);
			Small Message(Event Player, Custom String("Shield down"));
			Event Player.Y = False;
			Wait(0.500, Ignore Condition);
		Else If(Event Player.selected_hero_list_number == 4);
			Disallow Button(Event Player, Button(Primary Fire));
			Create Beam Effect(All Players(All Teams), Good Beam, Update Every Frame(Position Of(Event Player)), Update Every Frame(
				Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 150,
				All Players(All Teams), Event Player, True)), Color(Red), Visible To Position and Radius);
			Event Player.Effects[3] = Last Created Entity;
			Event Player.H = True;
			Start Rule(karna_laser_loop, Restart Rule);
			Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player), 2);
			Allow Button(Event Player, Button(Primary Fire));
			Event Player.H = False;
			Destroy Effect(Event Player.Effects[3]);
			Set Ability Cooldown(Event Player, Button(Ability 2), 8);
		Else If(Event Player.selected_hero_list_number == 5);
			Call Subroutine(create_dummy_of_EventPlayer);
			Event Player.Solomon_pillar_array = Last Of(Event Player.Solomon_pillar_array);
			Set Damage Received(Event Player.Solomon_pillar_array, 60);
			"S is the soldier L is the dummy if active"
			Event Player.Solomon_pillar_array.L = True;
			Event Player.E = True;
			Create In-World Text(All Players(All Teams), Custom String("{0} Trap Turret", Icon String(Warning)),
				Event Player.Solomon_pillar_array + Vector(0, 2.100, 0), 1, Clip Against Surfaces, Visible To Position and String, Color(
				White), Default Visibility);
			Event Player.Effects[3] = Last Text ID;
			Create Effect(All Players(All Teams), Ring, Color(Red), Event Player.Solomon_pillar_array, 4, Visible To Position and Radius);
			Event Player.Effects[4] = Last Created Entity;
			Wait Until(Count Of(Players Within Radius(Event Player.Solomon_pillar_array, 4, Opposite Team Of(Team Of(Event Player)), Off))
				>= 1, 6);
			Event Player.D = First Of(Players Within Radius(Event Player.Solomon_pillar_array, 4, Opposite Team Of(Team Of(Event Player)),
				Off));
			Start Forcing Player Position(Event Player.D, Position Of(Event Player.Solomon_pillar_array), True);
			Wait Until(!Entity Exists(Event Player.Solomon_pillar_array), 4);
			Stop Forcing Player Position(Event Player.D);
			Event Player.E = False;
			Set Ability Cooldown(Event Player, Button(Ability 2), 9);
			Destroy In-World Text(Event Player.Effects[3]);
			Destroy Effect(Event Player.Effects[4]);
			Kill(Event Player.Solomon_pillar_array, Null);
	}
}

rule("All soldier faster melee")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		(Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned) || Has Status(Event Player, Knocked Down)) == False;
		Is Dummy Bot(Event Player) == False;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 2);
			Set Damage Dealt(Event Player, 150);
			Press Button(Event Player, Button(Melee));
			Wait(0.650, Ignore Condition);
			Set Damage Dealt(Event Player, 25);
			Set Ability Cooldown(Event Player, Button(Melee), 0);
			Cancel Primary Action(Event Player);
			Loop If Condition Is True;
		Else If(Event Player.Y == False && Event Player.selected_hero_list_number == 3);
			Press Button(Event Player, Button(Melee));
			"it was variable M before"
			Wait(Health(Event Player) / 600, Ignore Condition);
			Cancel Primary Action(Event Player);
			Set Ability Cooldown(Event Player, Button(Melee), 0);
			Loop If Condition Is True;
	}
}

rule("Soldier all sec.fire (damage)")
{
	event
	{
		Player Dealt Damage;
		All;
		Soldier: 76;
	}

	conditions
	{
		Event Ability == Button(Secondary Fire);
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null);
			If(Event Player.Is_Using_Ultimate == True);
				Small Message(Victim, Custom String("Chu Chulainn: You are already dead"));
				Victim.Berserker_lives = Null;
				Wait(2, Ignore Condition);
				For Player Variable(Event Player, for_loop, 0, 4, 1);
					Kill(Victim, Event Player);
					Damage(Victim, Event Player, 10000);
					Wait(0.016, Ignore Condition);
				End;
				If(Hero Of(Victim) == Hero(Hanzo) && Victim.selected_hero_list_number == Null);
					Victim.H = Null;
				End;
				Set Ultimate Charge(Event Player, 0);
				Allow Button(Event Player, Button(Secondary Fire));
			Else;
				Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Victim, 4);
				Set Player Health(Victim, Health(Victim) - Max Health(Victim) / 4);
				Set Ultimate Charge(Victim, Ultimate Charge Percent(Victim) - 15);
				Wait(0.360, Ignore Condition);
			End;
		Else If(Event Player.selected_hero_list_number == 2 && Event Player.D == 2);
			Start Damage Over Time(Victim, Attacker, 9999, 45);
			Modify Player Variable(Event Player, Q, Append To Array, Last Damage Over Time ID);
		Else If(Event Player.selected_hero_list_number == 1);
			Set Status(Victim, Event Player, Stunned, 0.600);
		Else If(Event Player.selected_hero_list_number == 4);
			Victim.playerSpeed[False] -= 75;
			Wait Until(Is Assembling Heroes, 3);
			Victim.playerSpeed[False] += 75;
	}
}

rule("soldier all sec.fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		((Is Button Held(Event Player, Button(Secondary Fire)) && Ability Cooldown(Event Player, Button(Secondary Fire)) == 0)
			|| Is Firing Secondary(Event Player)) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Player.D == 1 && Event Player.selected_hero_list_number == 2);
			Call Subroutine(raycast_hit_position1);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Event Player.raycast_hit_position, 3);
			Play Effect(All Players(All Teams), Explosion Sound, Color(Red), Event Player.raycast_hit_position, 110);
			Clear Status(Players Within Radius(Event Player.raycast_hit_position, 4, Opposite Team Of(Team Of(Event Player)), Off),
				Unkillable);
			Clear Status(Players Within Radius(Event Player.raycast_hit_position, 4, Opposite Team Of(Team Of(Event Player)), Off),
				Invincible);
			Damage(Players Within Radius(Event Player.raycast_hit_position, 4, Opposite Team Of(Team Of(Event Player)), Off), Event Player,
				250);
			Set Ability Cooldown(Event Player, Button(Secondary Fire), 8);
		Else If(Event Player.selected_hero_list_number == Null && Is Firing Secondary(Event Player)
				&& Event Player.Is_Using_Ultimate == False);
			Start Damage Modification(All Players(Opposite Team Of(Team Of(Event Player))), Event Player, 1,
				Receivers Damagers and Damage Percent);
			"index of damage modification"
			Event Player.Effects[7] = Last Damage Modification ID;
			Wait(0.350, Ignore Condition);
			Stop Damage Modification(Event Player.Effects[7]);
			Wait(2, Ignore Condition);
			Allow Button(Event Player, Button(Secondary Fire));
	}
}

rule("Karna ab2 2/2 (subroutine)")
{
	event
	{
		Subroutine;
		karna_laser_loop;
	}

	actions
	{
		Call Subroutine(raycast_hit_position1);
		Damage(Players Within Radius(Event Player.raycast_hit_position, 2, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Event Player, 11);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Event Player.raycast_hit_position, 0.150);
		Wait(0.080, Ignore Condition);
		Abort If(!Event Player.H || Is In Spawn Room(Event Player));
		Loop;
	}
}

rule("Chu || achilles sec.fire (remove effect)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 0);
			Set Damage Dealt(Event Player, 5);
			Destroy Effect(Event Player.Effects[3]);
			Wait(3, Ignore Condition);
			Set Damage Dealt(Event Player, 100);
		Else If(Event Player.selected_hero_list_number == 2);
			Wait(1, Ignore Condition);
			Set Ability Cooldown(Event Player, Button(Secondary Fire), 8);
	}
}

rule("shakespeare ultimate (if him died) DELETE LATER")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Wait Until(!Is In Spawn Room(Event Player), 99999);
		Wait Until(!(Is Alive(Event Player) || Entity Exists(Event Player)), 99999);
		Event Player.shakespeare_master.E = False;
		Event Player.shakespeare_master.L = False;
		Stop Forcing Player Position(Event Player.shakespeare_master.D);
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
	}
}

rule("All shift barrage || Moira Ab1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		(Is Button Held(Event Player, Button(Ability 1)) || Is Button Held(Event Player, Button(Ability 2))) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Ability 1)) && Event Player.selected_hero_list_number == Null && Ability Cooldown(
			Event Player, Button(Ability 1)) == Null && (!Is Using Ultimate(Event Player) || Event Player.Medea_rule_breaker2 == False));
			Event Player.Medea_rule_breaker = True;
			Event Player.V = Ability Cooldown(Event Player, Button(Ability 2));
			Allow Button(Event Player, Button(Ability 2));
			Set Ability Cooldown(Event Player, Button(Ability 1), 8);
			For Player Variable(Event Player, for_loop, 0, 4, True);
				Disallow Button(Event Player, Button(Primary Fire));
				Set Ability Cooldown(Event Player, Button(Ability 2), 0);
				Press Button(Event Player, Button(Ability 2));
				Wait(0.150, Ignore Condition);
				Press Button(Event Player, Button(Secondary Fire));
				Wait(0.150, Ignore Condition);
				Set Status(Event Player, Null, Stunned, 0.001);
			End;
			Disallow Button(Event Player, Button(Ability 2));
			Event Player.Medea_rule_breaker = False;
			Allow Button(Event Player, Button(Primary Fire));
			Set Ability Cooldown(Event Player, Button(Ability 2), Event Player.V);
		Else If(Is Using Ability 1(Event Player) && Event Player.selected_hero_list_number == 1);
			Apply Impulse(Event Player, Facing Direction Of(Event Player), 100, To World, Cancel Contrary Motion);
			Event Player.playerSpeed[False] += 100;
			Wait Until(!Is Using Ability 1(Event Player), 5);
			Event Player.playerSpeed[False] -= 100;
		Else If(Is Button Held(Event Player, Button(Ability 1)) && Ability Cooldown(Event Player, Button(Ability 1))
				== Null && Event Player.selected_hero_list_number == 2);
			Event Player.is_damage_reversing = True;
			Set Status(Event Player, Null, Rooted, 0.600);
			Wait Until(!Is Moving(Event Player), 3);
			Create In-World Text(All Players(All Teams), Custom String("[{0}] SEE YOU", Icon String(Eye)), Eye Position(Event Player) + Vector(
				0, 0.300, 0), 2, Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Event Player.Effects[2] = Last Text ID;
			Start Rule(felix_faust_ab1_loop, Restart Rule);
			Wait Until(Is In Spawn Room(Event Player) || Is Dead(Event Player) || Is Moving(Event Player), 99999);
			Set Ability Cooldown(Event Player, Button(Ability 1), 7);
			Event Player.is_damage_reversing = False;
			Destroy In-World Text(Event Player.Effects[2]);
		Else If(Is Using Ability 1(Event Player) && Event Player.selected_hero_list_number == 4);
			Event Player.J = Filtered Array(Player Closest To Reticle(Event Player, All Teams), Is In Line of Sight(Event Player,
				Current Array Element, Barriers Do Not Block LOS));
			If(Entity Exists(Event Player.J) && (Distance Between(Event Player, Event Player.J) <= 60 || Altitude Of(Event Player.J) >= 5));
				Event Player.I = Position Of(Event Player);
				Event Player.is_player_anchored = 0;
				Teleport(Event Player, Position Of(Event Player.J));
				Teleport(Event Player.J, Event Player.I);
				Small Message(Event Player.J, Custom String("Position Swapped"));
			Else If(Event Player.J == Null);
				Small Message(Event Player, Custom String("No available player"));
			End;
		Else If(Event Player.selected_hero_list_number == 5 && Is Using Ability 1(Event Player));
			Call Subroutine(raycast_hit_position2);
			Create Beam Effect(All Players(All Teams), Omnic Slicer Beam, Eye Position(Event Player), Event Player.raycast_hit_position2,
				Color(Sky Blue), None);
			Event Player.Effects[4] = Last Created Entity;
			Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Event Player.raycast_hit_position2, 6);
			Damage(Players Within Radius(Event Player.raycast_hit_position2, 4, All Teams, Surfaces And Enemy Barriers), Event Player, 70 * (
				1 + Ultimate Charge Percent(Event Player) / 260));
			Wait(0.150, Ignore Condition);
			Destroy Effect(Event Player.Effects[4]);
			Wait(True, Ignore Condition);
			Set Ability Cooldown(Event Player, Button(Ability 1), 4);
	}
}

rule("Asclepius  (healing)")
{
	event
	{
		Player Dealt Healing;
		All;
		Moira;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
		Event Player.selected_hero_list_number == 3;
	}

	actions
	{
		Start Heal Over Time(Healee, Event Player, 3, 25);
	}
}

rule("All moira  jump ability || Ashe Xanzang Dash")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Jumping(Event Player) == True;
		Is Button Held(Event Player, Button(Jump)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		(Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned) || Has Status(Event Player, Knocked Down)) == False;
		((Hero Of(Event Player) == Hero(Moira) && !Event Player.selected_hero_list_number) || (Hero Of(Event Player) == Hero(Ashe)
			&& Event Player.selected_hero_list_number == 1)) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Facing Direction Of(Event Player), Event Player.selected_hero_list_number ? 35 : 45, To World,
			Cancel Contrary Motion);
		If(!Event Player.selected_hero_list_number);
			Set Ability Cooldown(Event Player, Button(Jump), True);
			Set Gravity(Event Player, False);
			Wait(0.480, Ignore Condition);
			Set Gravity(Event Player, 135);
			Wait(0.500, Ignore Condition);
			Set Gravity(Event Player, 70);
		Else;
		End;
		Wait(3, Ignore Condition);
	}
}

rule("All moira do damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Moira;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Event Ability == Button(Secondary Fire) && Event Player.selected_hero_list_number == 1);
			Start Heal Over Time(Event Player, Event Player, 0.400, 15);
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 0.650);
		Else If(Event Player.selected_hero_list_number == Null && (Event Ability == Button(Secondary Fire) || Event Ability == Button(
				Melee)) && Event Player.Medea_rule_breaker == True);
			Damage(Victim, Event Player, 65);
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Event Damage / 8);
		Else If(Event Ability == Button(Ability 2) && Event Player.selected_hero_list_number == 3);
			Set Ultimate Charge(Victim, Ultimate Charge Percent(Victim) - 2);
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 2.500);
			Damage(Victim, Null, 5);
	}
}

rule("All moira ab2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		(Is Using Ability 2(Event Player) || Is Button Held(Event Player, Button(Ability 2))) == True;
		Is Using Ultimate(Event Player) == False;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null && Is Button Held(Event Player, Button(Ability 2)) && Ability Cooldown(
			Event Player, Button(Ability 2)) == Null && Event Player.Medea_rule_breaker == False);
			Event Player.vamp_absorb = 50;
			Event Player.Medea_rule_breaker2 = True;
			Event Player.B = True;
			Event Player.is_damage_reversing = True;
			Wait(0.250, Ignore Condition);
			Wait Until(Is Dead(Event Player) || Is Button Held(Event Player, Button(Ability 2)) || Is In Spawn Room(Event Player), 6);
			Event Player.B = False;
			Event Player.Medea_rule_breaker2 = False;
			Event Player.is_damage_reversing = False;
			Create Projectile(Orb Projectile, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)),
				Event Player.vamp_absorb * 1.600, 0.850, 3, Bad Explosion, Explosion Sound, 0.240, 90, 7, 0, 13, 0);
			Set Ability Cooldown(Event Player, Button(Ability 2), 10);
		Else If(Event Player.selected_hero_list_number == 1 && Ability Cooldown(Event Player, Button(Ability 2)) == 0);
			Event Player.vamp_absorb = True;
			Event Player.is_damage_reversing = True;
			Wait(3, Ignore Condition);
			Set Ability Cooldown(Event Player, Button(Ability 2), 9);
			Event Player.vamp_absorb = False;
			Event Player.is_damage_reversing = False;
		Else If(Event Player.selected_hero_list_number == 2 && Ability Cooldown(Event Player, Button(Ability 2)) == 0);
			Set Ability Cooldown(Event Player, Button(Ability 2), 13);
			Call Subroutine(Felix_ballin);
		Else If(Event Player.selected_hero_list_number == 3);
			Allow Button(Event Player, Button(Secondary Fire));
			Wait(0.150, Ignore Condition);
			Press Button(Event Player, Button(Secondary Fire));
			Wait Until(!Is Using Ability 2(Event Player), 99999);
			Disallow Button(Event Player, Button(Secondary Fire));
			Wait Until(Is Using Ability 2(Event Player), 99999);
			Loop;
		Else If(Event Player.selected_hero_list_number == 4 && Ability Cooldown(Event Player, Button(Ability 2)) == Null);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Lime Green), Event Player + Vector(False, 2, False), 6);
			Event Player.X = Position Of(Event Player);
			Wait(0.450, Ignore Condition);
			Event Player.Z = True;
			Create Effect(All Players(All Teams), Sphere, Color(Lime Green), Event Player.X, 4, Visible To Position and Radius);
			Event Player.Effects[2] = Last Created Entity;
			Start Rule(salome_ab2_damage_loop, Restart Rule);
			Start Rule(salome_setup_ab2, Restart Rule);
			Wait(3, Ignore Condition);
			Set Ability Cooldown(Event Player, Button(Ability 2), 8);
			Event Player.Z = False;
			Destroy Effect(Event Player.Effects[2]);
			Clear Status(Event Player, Invincible);
			Event Player.X = Null;
		Else If(Ability Cooldown(Event Player, Button(Ability 2)) == Null && Event Player.selected_hero_list_number == 5);
			Event Player.Moving_ball_array = Empty Array;
			Stop Forcing Player Position(Event Player.Moving_ball_array);
			Event Player.Moving_ball_trigger = False;
			Event Player.B = True;
			Stop Chasing Player Variable(Event Player, Moving_ball);
			Event Player.Moving_ball = Position Of(Event Player);
			"choose area"
			Call Subroutine(raycast_hit_position1);
			Set Status(Event Player, Null, Stunned, 0.100);
			Create Dummy Bot(Hero Of(Event Player), Team Of(Event Player), -1, Event Player, Up);
			Event Player.moira_dummy = Last Created Entity;
			Start Forcing Player Position(Event Player.moira_dummy, Event Player.Moving_ball, True);
			Set Status(Event Player.moira_dummy, Event Player, Phased Out, 9999);
			Set Invisible(Event Player.moira_dummy, All);
			Chase Player Variable At Rate(Event Player, Moving_ball, Event Player.raycast_hit_position, Event Player.Chase_speed_para,
				Destination and Rate);
			Wait(0.016, Ignore Condition);
			Create Effect(All Players(All Teams), Sphere, Color(Lime Green), Update Every Frame(Event Player.Moving_ball), 4.600,
				Visible To Position and Radius);
			Event Player.Effects[3] = Last Created Entity;
			Event Player.was_damaged = False;
			Event Player.Chase_speed_para = 50;
			Chase Player Variable At Rate(Event Player, Chase_speed_para, 15, 40, Destination and Rate);
			Start Rule(moving_ball_ab2_loop, Restart Rule);
			Wait Until(Is In Spawn Room(Event Player) || Is On Ground(Event Player)
				|| Event Player.Moving_ball == Event Player.raycast_hit_position, 3);
			Wait Until(Is In Spawn Room(Event Player) || Is Moving(Event Player)
				|| Event Player.was_damaged || Event Player.Moving_ball == Event Player.raycast_hit_position, 3);
			Stop Chasing Player Variable(Event Player, Moving_ball);
			Skip If(Distance Between(Event Player.Moving_ball, Event Player.raycast_hit_position) > 0.500, 1);
			Damage(Players Within Radius(Event Player.Moving_ball, 4.600, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 120);
			Detach Players(Event Player.Moving_ball_array);
			Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player.moira_dummy));
			Event Player.B = False;
			Destroy Effect(Event Player.Effects[3]);
			Stop Chasing Player Variable(Event Player, Chase_speed_para);
			Set Status(Event Player.Moving_ball_array, Event Player, Stunned, 0.600);
			Event Player.Moving_ball_trigger = True;
			Event Player.was_damaged = False;
			Set Ability Cooldown(Event Player, Button(Ability 2), 10);
			Event Player.Moving_ball_array.is_falling[0] = True;
			Event Player.Moving_ball_array.is_falling[1] = Y Component Of(Position Of(Event Player));
			Modify Global Variable(Falling_floor_array, Append To Array, Filtered Array(Event Player.Moving_ball_array, Distance Between(
				Position Of(Current Array Element) * Vector(0, 1, 0), Position Of(Event Player) * Vector(0, 1, 0)) >= 2));
			Wait(0.350, Ignore Condition);
			Event Player.Moving_ball_array = Empty Array;
	}
}

rule("Moira paracelus van hahanheim ab 2 loop (subroutine) (attach players)")
{
	event
	{
		Subroutine;
		moving_ball_ab2_loop;
	}

	actions
	{
		Modify Player Variable(Event Player, Moving_ball_array, Append To Array, Players Within Radius(Event Player.Moving_ball, 4.600,
			Opposite Team Of(Team Of(Event Player)), Off));
		Attach Players(Players Within Radius(Event Player.Moving_ball, 4.600, Opposite Team Of(Team Of(Event Player)), Off),
			Event Player.moira_dummy, Null);
		Wait(0.090, Ignore Condition);
		Abort If(Event Player.B == False);
		Loop;
	}
}

rule("Salome ab2 (damage subroutine)")
{
	event
	{
		Subroutine;
		salome_ab2_damage_loop;
	}

	actions
	{
		Damage(Players Within Radius(Event Player.X, 4, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 50);
		Clear Status(Players Within Radius(Event Player.X, 4, Opposite Team Of(Team Of(Event Player)), Off), Invincible);
		Wait(0.250, Ignore Condition);
		Abort If(Event Player.Z == False);
		Loop;
	}
}

rule("Salome ab2 (protect subroutine)")
{
	event
	{
		Subroutine;
		salome_setup_ab2;
	}

	actions
	{
		If(Distance Between(Event Player, Event Player.X) <= 4);
			Set Status(Event Player, Null, Invincible, 9999);
		Else If(Distance Between(Event Player, Event Player.X) > 4);
			Clear Status(Event Player, Invincible);
		End;
		Wait(0.100, Ignore Condition);
		Abort If(Event Player.Z == False);
		Loop;
	}
}

rule("All Ana damage dealt")
{
	event
	{
		Player Dealt Damage;
		All;
		Ana;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null);
			If(Event Player.Is_Using_Ultimate == True && (Event Ability == Button(Primary Fire) || Event Ability == Button(Secondary Fire)));
				Kill(Victim, Event Player);
				Event Player.Is_Using_Ultimate = Null;
			Else If(Event Ability == Button(Ability 1));
				Apply Impulse(Players Within Radius(Victim, 7, All Teams, Off), Up, 15, To World, Cancel Contrary Motion);
				Set Status(Victim, Null, Frozen, 1.700);
				If(Distance Between(Event Player, Victim) <= 15);
					Event Player.playerSpeed[False] += 425;
					Wait(0.750, Ignore Condition);
					Event Player.playerSpeed[False] -= 425;
				End;
			End;
		Else If(Event Player.selected_hero_list_number == 1);
			If(Event Ability == Button(Ability 1));
				Event Player.Medusa_trap = Victim;
				Set Status(Victim, Event Player, Burning, 5);
				Set Ability Cooldown(Victim, Button(Ability 1), Ability Cooldown(Victim, Button(Ability 1)) + 5);
				Set Ability Cooldown(Victim, Button(Ability 2), Ability Cooldown(Victim, Button(Ability 2)) + 5);
				Set Status(Victim, Null, Hacked, 5);
				Start Damage Over Time(Victim, Event Player, Ultimate Charge Percent(Victim) / 10, 15);
				Wait(True, Ignore Condition);
				Set Ability Cooldown(Event Player, Button(Ability 1), 9);
			Else If(Event Ability == Button(Ability 2));
				Set Status(Victim, Null, Hacked, 2.500);
				Set Status(Victim, Null, Burning, 2.500);
				Start Damage Over Time(Victim, Event Player, 3, 40);
				Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Event Damage, 3);
	}
}

rule("robin hood and simo haya abi2 coordowns")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		(Is Using Ability 1(Event Player) || Is Using Ability 2(Event Player) || (Is Button Held(Event Player, Button(Ability 2))
			&& Ability Cooldown(Event Player, Button(Ability 2)) == Null)) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null && Is Button Held(Event Player, Button(Ability 2)) && Ability Cooldown(
			Event Player, Button(Ability 2)) == Null);
			Event Player.Snow_protection_active = True;
			Small Message(All Living Players(All Teams), Custom String("Snow protection field activated"));
			Set Invisible(Event Player, All);
			Call Subroutine(destroy_nameONplayer);
			Event Player.Snow_protection_area = Position Of(Event Player);
			Create Effect(All Players(All Teams), Sphere, Color(White), Event Player.Snow_protection_area, 10, Visible To Position and Radius);
			Event Player.Effects[True] = Last Created Entity;
			Create Effect(All Players(All Teams), Cloud, Color(Sky Blue), Event Player.Snow_protection_area, 10,
				Visible To Position and Radius);
			Event Player.Effects[2] = Last Created Entity;
			Start Rule(simo_haya_invisibility_loop, Restart Rule);
			Start Rule(Snow_storm, Restart Rule);
			Wait Until(Is In Spawn Room(Event Player), 8);
			Event Player.Snow_protection_active = False;
			Event Player.Snow_protection_area = Vector(520, -2480, 132);
			Destroy Effect(Event Player.Effects[True]);
			Destroy Effect(Event Player.Effects[2]);
			Call Subroutine(create_nameONplayer);
			Set Invisible(Event Player, None);
			Set Ability Cooldown(Event Player, Button(Ability 2), 17);
		Else If(Event Player.selected_hero_list_number == 2 && Is Button Held(Event Player, Button(Ability 2)) && Ability Cooldown(
				Event Player, Button(Ability 2)) == Null);
			Set Ability Cooldown(Event Player, Button(Ability 2), 10);
			Set Damage Received(Event Player, 25);
			Wait Until(Is In Spawn Room(Event Player) || Is Dead(Event Player), 3);
			Set Damage Received(Event Player, 70);
			Small Message(Event Player, Custom String("Protection OFF"));
		Else If(Event Player.selected_hero_list_number == 1);
			If(Is Using Ability 1(Event Player));
				Wait(1.500, Ignore Condition);
				Set Ability Cooldown(Event Player, Button(Ability 1), 10);
			Else If(Is Using Ability 2(Event Player));
				Wait(1.500, Ignore Condition);
				Set Ability Cooldown(Event Player, Button(Ability 2), 10);
	}
}

rule("Ana sniper protection field invisibility (subroutine)")
{
	event
	{
		Subroutine;
		simo_haya_invisibility_loop;
	}

	actions
	{
		Wait Until(Distance Between(Event Player, Event Player.Snow_protection_area) > 10 || !Event Player.Snow_protection_active, 99999);
		Set Invisible(Event Player, None);
		Skip If(!Event Player.Snow_protection_active, 3);
		Wait Until(Distance Between(Event Player, Event Player.Snow_protection_area) <= 10 || !Event Player.Snow_protection_active, 99999);
		Skip If(!Event Player.Snow_protection_active, 1);
		Set Invisible(Event Player, All);
		Abort If(!Event Player.Snow_protection_active);
		Loop;
	}
}

rule("Ana simo haya sniper storm (subrutine)")
{
	event
	{
		Subroutine;
		Snow_storm;
	}

	actions
	{
		Abort If(Event Player.Snow_protection_active == False);
		Event Player.simo_haya_ab2_array = Players Within Radius(Event Player.Snow_protection_area, 10, Opposite Team Of(Team Of(
			Event Player)), Off);
		Damage(Event Player.simo_haya_ab2_array, Null, 2.500);
		If(Count Of(Event Player.simo_haya_ab2_array) >= 1);
			For Player Variable(Event Player, for_loop_2, 0, Count Of(Event Player.simo_haya_ab2_array), True);
				Set Ultimate Charge(Event Player.simo_haya_ab2_array[Event Player.for_loop_2], Ultimate Charge Percent(
					Event Player.simo_haya_ab2_array[Event Player.for_loop_2]) - 3);
				Wait(0.016, Ignore Condition);
			End;
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Count Of(Event Player.simo_haya_ab2_array) * 3.500);
		End;
		Wait(0.500, Ignore Condition);
		Loop;
	}
}

rule("All baptiste damage dealt")
{
	event
	{
		Player Dealt Damage;
		All;
		Baptiste;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Baptiste);
		Is Alive(Event Player) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null);
			If(Event Ability == Button(Melee));
				Apply Impulse(Victim, Direction Towards(Event Direction, Victim), 30, To Player, Cancel Contrary Motion);
				Damage(Victim, Event Player, 15);
			End;
		Else If(Event Player.selected_hero_list_number == 1);
			If(!Array Contains(Array(Button(Primary Fire), Button(Melee)), Event Ability) || !Is Button Held(Event Player, Button(Ability 2)));
				Event Player.H += Event Damage / 1.100;
			End;
			If(Event Ability == Button(Primary Fire));
				Damage(Victim, Event Player, 30);
				Damage(Victim, Null, 25);
	}
}

rule("Jinsus Krist ultimate 2.5/3 (set protected same as player)")
{
	event
	{
		Subroutine;
		baptiste_ult_subroutine;
	}

	actions
	{
		Wait Until(!Event Player.Holy_heal || Normalized Health(Event Player.Jehsus_protected_player) < Normalized Health(Event Player),
			99999);
		Wait(0.016, Ignore Condition);
		"32.730"
		Damage(Event Player.Jehsus_protected_player, Null, Health Of Type(Event Player.Jehsus_protected_player, Armor) >= 100 ? 6 : 0);
		Event Player.Holy_heal[1] = Normalized Health(Event Player) - (Normalized Health(Event Player) - Normalized Health(
			Event Player.Jehsus_protected_player)) / 1.300;
		Set Player Health(Event Player.Jehsus_protected_player, Event Player.Holy_heal[1] * Max Health(
			Event Player.Jehsus_protected_player));
		Set Player Health(Event Player, Event Player.Holy_heal[1] * Max Health(Event Player));
		Wait Until(Normalized Health(Event Player) == Normalized Health(Event Player.Jehsus_protected_player), 1.100);
		Abort If(!Event Player.Holy_heal);
		Loop;
	}
}

rule("Jinsus Krist ultimate 3/3 - icon")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Entity Exists(Event Player.jehsus_master) == True;
		Event Player.Holy_heal == True;
	}

	actions
	{
		Create Icon(All Players(All Teams), Event Player, Heart, Visible To and Position, Color(Yellow), False);
		Event Player.Jehsus_icon[True] = Last Created Entity;
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Event Player, 1);
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(Yellow), Event Player, 100);
		Event Player.Holy_heal[1] = Normalized Health(Event Player);
	}
}

rule("Jinsus cancel the effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Entity Exists(Event Player.Jehsus_protected_player) == True;
		Event Player.Holy_heal == True;
	}

	actions
	{
		Wait Until(Is In Spawn Room(Event Player) || Is Dead(Event Player) || Is Dead(Event Player.Jehsus_protected_player)
			|| !Entity Exists(Event Player) || !Entity Exists(Event Player.Jehsus_protected_player) || Normalized Health(Event Player)
			<= 0.050, 99999);
		Event Player.Holy_heal = False;
		Event Player.Jehsus_protected_player.Holy_heal = False;
		Destroy Icon(Event Player.Jehsus_protected_player.Jehsus_icon[True]);
		Event Player.Jehsus_protected_player.jehsus_master = Null;
		Event Player.Jehsus_protected_player = Null;
	}
}

rule("All baptiste Ab1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 0);
			Start Heal Over Time(Players Within Radius(Event Player, 6, Team Of(Event Player), Off), Event Player, 4, 350);
			Wait(0.100, Ignore Condition);
			Set Ability Cooldown(Event Player, Button(Ability 1), 10);
		Else If(Event Player.selected_hero_list_number == 1);
			Set Status(Event Player, Null, Unkillable, True);
			Start Damage Over Time(Remove From Array(Players Within Radius(Event Player, 9, All Teams, Surfaces And Enemy Barriers),
				Event Player), Event Player, 3, 30);
			Create Effect(All Players(All Teams), Sphere, Color(Orange), Update Every Frame(Event Player), 9, Visible To Position and Radius);
			Event Player.Effects[2] = Last Created Entity;
			Wait(0.100, Ignore Condition);
			Destroy Effect(Event Player.Effects[2]);
			Wait(0.450, Ignore Condition);
			Set Ability Cooldown(Event Player, Button(Ability 1), 6);
	}
}

rule("All baptiste Ab2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == Null;
		(Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned) || Has Status(Event Player, Knocked Down)) == False;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 0);
			Add Health Pool To Player(Event Player, Armor, 750, False, True);
			Event Player.Effects[2] = Last Created Health Pool;
			Play Effect(All Players(All Teams), Buff Impact Sound, Color(Orange), Event Player, 100);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Event Player, 1);
			Wait(3, Ignore Condition);
			Remove Health Pool From Player(Event Player.Effects[2]);
			Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Red), Event Player, 100);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
			Wait(8, Ignore Condition);
			Small Message(Event Player, Custom String("{0} Armor Ready", Hero Icon String(Hero(Baptiste))));
		Else If(Event Player.H >= 1 && Event Player.selected_hero_list_number == 1);
			Damage(Players Within Radius(Event Player, 9, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player,
				Event Player.H / 5);
			Heal(Players Within Radius(Event Player, 9, Team Of(Event Player), Off), Event Player, Event Player.H * 3);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Event Player + Vector(False, 2, False), 9);
			Play Effect(All Players(All Teams), Explosion Sound, Color(Red), Event Player, 100);
			Event Player.H = Null;
			Create Effect(All Players(All Teams), Sphere, Color(Red), Update Every Frame(Event Player), 9, Visible To Position and Radius);
			Event Player.Effects[True] = Last Created Entity;
			Wait(0.100, Ignore Condition);
			Destroy Effect(Event Player.Effects[True]);
			Wait(5, Ignore Condition);
			Small Message(Event Player, Custom String("Starlin Healing Ready"));
	}
}

rule("All Brigitte deal damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Brigitte;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Brigitte);
		Is Alive(Event Player) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Is Firing Secondary(Event Player) && Is Button Held(Event Player, Button(Primary Fire))
			&& Event Player.selected_hero_list_number == 1);
			Damage(Victim, Null, 30);
		Else If(Event Player.selected_hero_list_number == 1 && Event Ability == Button(Ability 1));
			Apply Impulse(Victim, Facing Direction Of(Event Player), 6, To World, Cancel Contrary Motion);
			Damage(Victim, Null, 70);
			Wait(0.100, Ignore Condition);
			Set Status(Victim, Null, Rooted, 2);
		Else If(Event Player.selected_hero_list_number == Null && Event Ability == Button(Ability 1));
			Set Status(Victim, Null, Rooted, 2);
		Else If(Event Player.selected_hero_list_number == 2 && Event Ability == Button(Ability 1));
			If(Event Player.Is_Using_Ultimate);
				Damage(Victim, Null, Max Health(Victim) / 2);
				Set Status(Victim, Event Player, Rooted, 1.500);
				Set Status(Event Player, Null, Unkillable, 1);
			Else;
				Start Heal Over Time(Event Player, Event Player, 1.500, 75);
			End;
		Else If(Event Player.selected_hero_list_number == 3 && Event Ability == Button(Ability 1));
			Damage(Victim, Event Player, 50);
			Start Heal Over Time(Event Player, Event Player, 2, 50);
			Apply Impulse(Victim, Backward, 10, To Player, Incorporate Contrary Motion);
		Else If(Event Player.selected_hero_list_number == 4 && Event Ability == Button(Ability 1));
			Start Heal Over Time(Event Player, Event Player, 1.250, 95);
			Start Damage Over Time(Victim, Event Player, 3, 35);
			Set Status(Event Player, Null, Unkillable, 1);
	}
}

rule("All Brigitte right click")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null);
			Set Ability Cooldown(Event Player, Button(Primary Fire), 5);
			Create Effect(All Players(All Teams), Bad Aura, Color(Turquoise), Event Player, True, Visible To Position and Radius);
			Event Player.Effects[5] = Last Created Entity;
			Wait Until(!Is Firing Secondary(Event Player), 99999);
			Event Player.H = Filtered Array(Players Within Radius(Event Player, 10, Opposite Team Of(Team Of(Event Player)), Surfaces),
				Is In View Angle(Event Player, Current Array Element, 60) && Is In View Angle(Current Array Element, Event Player, 45));
			Set Damage Received(Event Player.H, 25);
			Set Damage Received(Event Player, 35);
			Set Status(Event Player.H, Event Player, Frozen, 3.500);
			Set Status(Event Player, Null, Frozen, 3.500);
			Destroy Effect(Event Player.Effects[5]);
			Set Ability Cooldown(Event Player, Button(Secondary Fire), 9);
			Wait(4, Ignore Condition);
			Set Damage Received(Event Player.H, 70);
			Set Damage Received(Event Player, 70);
		Else If(Event Player.Is_Using_Ultimate == False && Event Player.selected_hero_list_number == 3);
			Set Ability Cooldown(Event Player, Button(Primary Fire), 9999);
			Add Health Pool To Player(Append To Array(Filtered Array(Players in View Angle(Event Player, Team Of(Event Player), 80),
				Is In Line of Sight(Event Player, Current Array Element, Barriers Do Not Block LOS)), Event Player), Shields, 450, False,
				True);
			Event Player.Effects[True] = Last Created Health Pool;
			Wait Until(!Is Firing Secondary(Event Player) || Is In Spawn Room(Event Player), 99999);
			Wait(2, Ignore Condition);
			Set Ability Cooldown(Event Player, Button(Secondary Fire), 11);
			Remove Health Pool From Player(Event Player.Effects[True]);
			Allow Button(Event Player, Button(Primary Fire));
			Wait(0.100, Ignore Condition);
			Set Ability Cooldown(Event Player, Button(Primary Fire), False);
		Else If(Event Player.Is_Using_Ultimate == False && Event Player.selected_hero_list_number == 1);
			Set Damage Received(Event Player, 25);
			Wait Until(!Is Firing Secondary(Event Player), 99999);
			Set Damage Received(Event Player, 70);
	}
}

rule("All Brigitte Ab1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		(Is Using Ability 1(Event Player) || (Is Button Held(Event Player, Button(Ability 1)) && Ability Cooldown(Event Player, Button(
			Ability 1)) == Null)) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Is Using Ability 1(Event Player) && Event Player.selected_hero_list_number == Null);
			Wait(0.250, Abort When False);
			Event Player.Medusa_trap = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
				Event Player) * 15, All Players(All Teams), Event Player, True);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Event Player.Medusa_trap, 5);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Event Player.Medusa_trap, 4);
			Wait(0.016, Ignore Condition);
			Set Status(Players Within Radius(Event Player.Medusa_trap, 5, Opposite Team Of(Team Of(Event Player)), Off), Null, Burning, 4);
			Start Damage Over Time(Players Within Radius(Event Player.Medusa_trap, 5, Opposite Team Of(Team Of(Event Player)), Off), Null, 4,
				25);
			Wait(0.016, Ignore Condition);
			For Player Variable(Event Player, for_loop, 0, Count Of(Players Within Radius(Event Player.Medusa_trap, 2.500, Opposite Team Of(
				Team Of(Event Player)), Off)), True);
				Set Ability Cooldown(Players Within Radius(Event Player.Medusa_trap, 5, Opposite Team Of(Team Of(Event Player)), Off)
					[Event Player.for_loop], Button(Ability 1), Ability Cooldown(Players Within Radius(Event Player.Medusa_trap, 5,
					Opposite Team Of(Team Of(Event Player)), Off)[Event Player.for_loop], Button(Ability 1)) + 5.500);
				Wait(0.016, Ignore Condition);
				Set Ability Cooldown(Players Within Radius(Event Player.Medusa_trap, 5, Opposite Team Of(Team Of(Event Player)), Off)
					[Event Player.for_loop], Button(Ability 2), Ability Cooldown(Players Within Radius(Event Player.Medusa_trap, 5,
					Opposite Team Of(Team Of(Event Player)), Off)[Event Player.for_loop], Button(Ability 2)) + 5.500);
				Wait(0.016, Ignore Condition);
			End;
			Wait(True, Ignore Condition);
			Set Ability Cooldown(Event Player, Button(Ability 1), 7);
			Wait(3, Ignore Condition);
			Event Player.Medusa_trap -= Vector(False, 100, False);
		Else If(!Is Using Ultimate(Event Player) && Event Player.selected_hero_list_number == 1);
			Event Player.G = Players Within Radius(Event Player, 7, Opposite Team Of(Team Of(Event Player)), Surfaces);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Orange), Event Player, 4);
			Damage(Event Player.G, Event Player, 115);
			Set Status(Event Player.G, Null, Rooted, 1.350);
			For Player Variable(Event Player, for_loop_2, 0, Count Of(Event Player.G), True);
				Apply Impulse(Event Player.G[Event Player.for_loop_2], Direction Towards(Event Player - Vector(False, 0.450, False),
					Event Player.G[Event Player.for_loop_2]), 40, To World, Cancel Contrary Motion);
				Wait(0.090, Ignore Condition);
			End;
			Set Ability Cooldown(Event Player, Button(Ability 1), 7);
		Else If(Event Player.selected_hero_list_number == 2);
			Set Gravity(Event Player, False);
			Wait(0.200, Ignore Condition);
			Skip If(!Is Jumping(Event Player), 1);
			Apply Impulse(Event Player, Facing Direction Of(Event Player), 200, To World, Cancel Contrary Motion);
			If(Event Player.Is_Using_Ultimate == False);
				Wait(0.600, Ignore Condition);
			Else If(Event Player.Is_Using_Ultimate == True);
				Wait(0.300, Ignore Condition);
			End;
			Set Gravity(Event Player, 100);
	}
}

rule("Mash Kyrielight ab 2 (heal a target) OR Medusa remove anti-healing")
{
	event
	{
		Player Dealt Healing;
		All;
		Brigitte;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		If(Event Player.selected_hero_list_number);
			Event Player.G = Players Within Radius(Healee, 3.500, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Orange), Healee, 4);
			Damage(Event Player.G, Event Player, 40);
			For Player Variable(Event Player, for_loop_2, 0, Count Of(Event Player.G), True);
				Apply Impulse(Event Player.G[Event Player.for_loop_2], Direction Towards(Healee - Vector(False, 1.850, False),
					Event Player.G[Event Player.for_loop_2]), 20, To World, Cancel Contrary Motion);
				Wait(0.080, Ignore Condition);
			End;
			Wait(0.350, Ignore Condition);
		Else;
			Healee.is_healing_cursed = False;
			Healee.is_player_anchored = 0;
			Healee.healthpack_cursed[0] = False;
	}
}

rule("All Brigitte Ab2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 2 && Ability Charge(Event Player, Button(Ability 2)) > 0);
			Create Effect(All Players(All Teams), Mercy Damage Boosted Effect, Color(Orange), Event Player, True,
				Visible To Position and Radius);
			Event Player.Effects[2] = Last Created Entity;
			Set Ability Charge(Event Player, Button(Ability 2), Ability Charge(Event Player, Button(Ability 2)) - 1);
			Skip If(Max Health(Event Player) <= 200, 2);
			Event Player.Q -= 10;
			Set Max Health(Event Player, Event Player.Q);
			Start Heal Over Time(Event Player, Event Player, 2.150, 200);
			Set Damage Dealt(Event Player, 165);
			Wait(0.250, Ignore Condition);
			Wait Until(Is Button Held(Event Player, Button(Ability 2)) || Is In Spawn Room(Event Player), 4);
			Set Damage Dealt(Event Player, 125);
			Destroy Effect(Event Player.Effects[2]);
		Else If(Event Player.selected_hero_list_number == 3 && !Event Player.Is_Using_Ultimate && Ability Charge(Event Player, Button(
				Ability 2)) == 3);
			Event Player.saint_lucy_person = First Of(Filtered Array(Players in View Angle(Event Player, Team Of(Event Player), 80), Is Alive(
				Current Array Element) && Entity Exists(Current Array Element) && Is In Line of Sight(Event Player, Current Array Element,
				Barriers Do Not Block LOS)));
			Set Ability Charge(Event Player, Button(Ability 2), 0);
			Start Rule(SaintLucy_ab2_loop, Restart Rule);
	}
}

rule("Saint Lucy Brigg ab2 loop")
{
	event
	{
		Subroutine;
		SaintLucy_ab2_loop;
	}

	actions
	{
		Destroy Effect(Event Player.Effects[11]);
		Skip If(!Entity Exists(Event Player.saint_lucy_person), 12);
		Start Rule(saint_lucy_subroutine, Restart Rule);
		Small Message(Array(Event Player, Event Player.saint_lucy_person), Custom String("{0} Immorality Link Created", Hero Icon String(
			Hero(Brigitte))));
		Set Status(Event Player.saint_lucy_person, Null, Unkillable, 9999);
		Create Beam Effect(All Players(All Teams), Mercy Heal Beam, Update Every Frame(Event Player), Update Every Frame(
			Event Player.saint_lucy_person), Color(Team 1), Visible To Position and Radius);
		Event Player.Effects[11] = Last Created Entity;
		Wait Until(Is In Spawn Room(Event Player) || !Has Status(Event Player.saint_lucy_person, Unkillable) || Is Dead(Event Player)
			|| Event Player.Is_Using_Ultimate || !Entity Exists(Event Player.saint_lucy_person) || !Is In Line of Sight(Eye Position(
			Event Player), Eye Position(Event Player.saint_lucy_person), Barriers Do Not Block LOS), 99999);
		Destroy Effect(Event Player.Effects[11]);
		Wait(0.150, Ignore Condition);
		Clear Status(Event Player.saint_lucy_person, Unkillable);
		Small Message(Array(Event Player, Event Player.saint_lucy_person), Custom String("{0} Link broken", Hero Icon String(Hero(
			Brigitte))));
		Wait(4, Ignore Condition);
		Wait Until(Is In Spawn Room(Event Player) || !Entity Exists(Event Player.saint_lucy_person) || Is In Line of Sight(Event Player,
			Event Player.saint_lucy_person, Barriers Do Not Block LOS), 99999);
		Abort If(Is In Spawn Room(Event Player) || Event Player.Is_Using_Ultimate || Is Dead(Event Player.saint_lucy_person)
			|| !Entity Exists(Event Player.saint_lucy_person));
		Loop If(Is Alive(Event Player));
	}
}

rule("Saint Lucy Subroutine give ULT")
{
	event
	{
		Subroutine;
		saint_lucy_subroutine;
	}

	actions
	{
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 2);
		Set Ultimate Charge(Event Player.saint_lucy_person, Ultimate Charge Percent(Event Player.saint_lucy_person) + 3);
		Wait(0.600, Ignore Condition);
		Abort If(Is Dead(Event Player) || Is In Spawn Room(Event Player) || Is Dead(Event Player.saint_lucy_person) || !Entity Exists(
			Event Player.saint_lucy_person));
		Loop;
	}
}

rule("All Rein Ab1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null && Ability Cooldown(Event Player, Button(Ability 1)) == Null);
			Set Ability Cooldown(Event Player, Button(Ability 1), 9);
			Create Effect(All Players(All Teams), Bad Aura, Color(Red), Event Player, 3, Visible To Position and Radius);
			Event Player.Effects[True] = Last Created Entity;
			Set Damage Received(Event Player, 60);
			Set Damage Dealt(Event Player, 185);
			Event Player.playerSpeed[False] += 70;
			Set Gravity(Event Player, 65);
			Wait Until(Is In Spawn Room(Event Player), 4);
			Set Damage Dealt(Event Player, 165);
			Event Player.playerSpeed[False] -= 70;
			Set Gravity(Event Player, 100);
			Destroy Effect(Event Player.Effects[True]);
			Set Damage Received(Event Player, 70);
		Else If(Event Player.D == False && Ability Cooldown(Event Player, Button(Ability 1))
				== Null && Event Player.selected_hero_list_number == 1);
			Create Effect(All Players(All Teams), Sparkles, Color(Orange), Event Player, 14, Visible To Position and Radius);
			Event Player.Effects[3] = Last Created Entity;
			Create Effect(All Players(All Teams), Ring, Color(Orange), Update Every Frame(Position Of(Event Player)), 14,
				Visible To Position and Radius);
			Event Player.Effects[2] = Last Created Entity;
			Event Player.Q = True;
			Event Player.playerSpeed[False] -= 45;
			Start Heal Over Time(Event Player, Event Player, 1.200, 140);
			Set Ability Cooldown(Event Player, Button(Ability 1), 12);
			Start Rule(iskandar_cancel_animations_loop, Restart Rule);
			Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player), 3.500);
			Event Player.Q = False;
			Event Player.playerSpeed[False] += 45;
			Destroy Effect(Event Player.Effects[3]);
			Destroy Effect(Event Player.Effects[2]);
			Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 25);
		Else If(Event Player.selected_hero_list_number == 2 && Ability Cooldown(Event Player, Button(Ability 1)) == Null);
			Damage(Players Within Radius(Event Player, 11, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player,
				Ultimate Charge Percent(Event Player) * 3);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player, 12);
			Wait(0.250, Ignore Condition);
			Set Ultimate Charge(Event Player, 0);
			Set Ability Cooldown(Event Player, Button(Ability 1), 5);
		Else If(Event Player.selected_hero_list_number == 3);
			If(Event Player.X == 1);
				Set Move Speed(Event Player, 225);
				Set Damage Received(Event Player, 150);
				Set Damage Dealt(Event Player, 15);
				Start Scaling Player(Event Player, 0.650, True);
				Event Player.X = 2;
				Set Projectile Speed(Event Player, 600);
			Else If(Event Player.X == 2);
				Set Projectile Speed(Event Player, 120);
				Set Move Speed(Event Player, 110);
				Set Damage Received(Event Player, 40);
				Set Damage Dealt(Event Player, 225);
				Stop Scaling Player(Event Player);
				Event Player.X = 1;
				Wait Until(Is In Spawn Room(Event Player), 6);
				Small Message(Event Player, Custom String("You can change size now"));
			End;
		Else If(Event Player.selected_hero_list_number == 5 && Ability Cooldown(Event Player, Button(Ability 1)) == Null);
			Call Subroutine(FoV_and_LoS_player_select);
			Event Player.C = Slot Of(Event Player.FoV_and_lineOFsight_player) + 5;
			Skip If(!Entity Exists(Event Player.FoV_and_lineOFsight_player), 3);
			"my variable at the slot ( whatever it is , 0 , 1 , 2 ) =  attacker"
			Event Player.A[Slot Of(Event Player.FoV_and_lineOFsight_player)] = Event Player.FoV_and_lineOFsight_player;
			"my variable at the slot ( whatever it is , 0 , 1 , 2 ) =  attacker"
			Event Player.A[Event Player.C] += 0.150;
			Small Message(All Players(All Teams), Custom String("{0} Adapted {2}% to {1}", Hero Icon String(Hero(Reinhardt)),
				Event Player.FoV_and_lineOFsight_player, Event Player.A[Event Player.C] * 100));
			Set Ability Cooldown(Event Player, Button(Ability 1), 11);
	}
}

rule("Iskandar ab1 (subroutine)")
{
	event
	{
		Subroutine;
		iskandar_cancel_animations_loop;
	}

	actions
	{
		Cancel Primary Action(Players Within Radius(Event Player, 14, Opposite Team Of(Team Of(Event Player)), Off));
		Wait(0.050, Ignore Condition);
		Abort If(!Event Player.Q || Is In Spawn Room(Event Player));
		Loop;
	}
}

rule("heracles revive parsive")
{
	event
	{
		Player Died;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.selected_hero_list_number == Null;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Player.Berserker_lives >= 1);
			Set Status(Event Player, Null, Burning, 3);
			Small Message(All Players(All Teams), Custom String("RESSURECTING BERSERKER"));
			Small Message(All Players(All Teams), Custom String("{0} {1}", Custom String("Berserker lives left"),
				Event Player.Berserker_lives));
			Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 9);
			Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Aqua), Event Player, 100);
			Wait(1.500, Ignore Condition);
			Event Player.Berserker_lives -= True;
			Resurrect(Event Player);
		Else If(Event Player.Berserker_lives == Null);
			Small Message(All Players(All Teams), Custom String("Berserker defeated"));
	}
}

rule("Iskandar || Genghis || Hercules ab2 (throw weapon) || Frankenstein more damage if enemy more ult")
{
	event
	{
		Player Dealt Damage;
		All;
		Reinhardt;
	}

	actions
	{
		If(Event Ability == Button(Ultimate));
			Set Status(Victim, Null, Frozen, 9999);
			Clear Status(Victim, Frozen);
			If(Is On Ground(Victim));
				Kill(Victim, Event Player);
			End;
		Else If(Event Ability == Button(Ability 2));
			If(Event Player.selected_hero_list_number == 1 || (Is Dummy Bot(Event Player) && Array Contains(Event Player.solomon_master.G,
				Event Player)));
				Event Player.trump_wait_middle = Position Of(Victim);
				Start Forcing Player Position(Victim, Event Player.trump_wait_middle, True);
				Event Player.trump_wait_time = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
					Event Player) * 3, All Players(All Teams), Event Player, True);
				Chase Player Variable Over Time(Event Player, trump_wait_middle, Event Player.trump_wait_time, 0.550, Destination and Duration);
				Wait Until(Is In Spawn Room(Event Player) || Is Dead(Event Player)
					|| Event Player.trump_wait_middle == Event Player.trump_wait_time, 7);
				Set Status(Victim, Null, Rooted, 0.200);
				Stop Forcing Player Position(Victim);
				Stop Chasing Player Variable(Event Player, trump_wait_middle);
			Else If(Event Player.selected_hero_list_number == 3);
				If(Event Player.X == 1);
					Set Player Health(Victim, Health(Victim) - Max Health(Victim) / 3);
				Else;
					Damage(Victim, Null, 35);
				End;
			Else If(Event Player.selected_hero_list_number == Null);
				Apply Impulse(Victim, Direction Towards(Victim, Attacker), 16, To World, Cancel Contrary Motion);
			Else If(Event Player.selected_hero_list_number == 2);
				Set Status(Victim, Null, Rooted, 2);
			Else If(Event Player.selected_hero_list_number == 5);
				Set Ability Cooldown(Victim, Button(Ability 1), Ability Cooldown(Victim, Button(Ability 1)) + 5);
				Set Ability Cooldown(Victim, Button(Ability 2), Ability Cooldown(Victim, Button(Ability 2)) + 5);
				Damage(Victim, Null, 35);
			End;
		Else If(Event Ability == Button(Primary Fire));
			If(Event Player.selected_hero_list_number == 2);
				Damage(Victim, Event Player, Ultimate Charge Percent(Victim) / 2);
			Else If(Event Player.selected_hero_list_number == 5);
				Victim.is_healing_cursed = True;
				Heal(Event Player, Event Player, Event Damage);
				Wait(2, Ignore Condition);
				Victim.is_healing_cursed = False;
	}
}

rule("Frankenstein Good ULT on teammates stuff (subroutine)")
{
	event
	{
		Subroutine;
		frankenstein_good_loop;
	}

	actions
	{
		Event Player.O = Players Within Radius(Event Player, 11, Team Of(Event Player), Off);
		For Player Variable(Event Player, for_loop, 0, Count Of(Event Player.O), True);
			Set Ultimate Charge(Event Player.O[Event Player.for_loop], Ultimate Charge Percent(Event Player.O[Event Player.for_loop]) + 1.500);
		End;
		Wait(0.500, Ignore Condition);
		Abort If(Is In Spawn Room(Event Player) || !Entity Exists(Event Player));
		Loop;
	}
}

rule("Iskandar jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Jumping(Event Player) == True;
		Altitude Of(Event Player) <= 4;
		(Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned) || Has Status(Event Player, Knocked Down)) == False;
		Event Player.selected_hero_list_number == 1;
		Event Player.selecting_HUD == False;
		Event Player.Q != True;
	}

	actions
	{
		Set Gravity(Event Player, 20);
		Apply Impulse(Event Player, Up, 5, To World, Cancel Contrary Motion);
		Wait(0.200, Ignore Condition);
		Apply Impulse(Event Player, Facing Direction Of(Event Player), 35, To World, Incorporate Contrary Motion);
		Set Gravity(Event Player, 100);
		Wait(5, Ignore Condition);
	}
}

rule("All hanzo damage dealt")
{
	event
	{
		Player Dealt Damage;
		All;
		Hanzo;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == Hero(Hanzo);
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 2 && Event Ability != Button(Ultimate));
			Event Player.O = Victim;
			Set Status(Victim, Event Player, Hacked, Event Ability == Button(Ability 2) ? 3 : Null);
		Else If(Event Ability == Button(Primary Fire)
				&& Event Player.Is_Using_Ultimate == True && Event Player.selected_hero_list_number == 4);
			Set Damage Dealt(Event Player, 125);
			Start Damage Over Time(Players Within Radius(Victim, 6, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 4, 250);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Gray), Victim, 6);
			Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Red), Victim, 300);
			Event Player.Is_Using_Ultimate = False;
		Else If(Event Player.selected_hero_list_number == 5 && (Event Ability == Button(Ultimate) || Event Ability == Button(Ability 2)));
			If(Event Ability == Button(Ultimate));
				Clear Status(Victim, Unkillable);
				Set Status(Event Player, Null, Phased Out, 3);
				Kill(Victim, Event Player);
			Else If(Event Ability == Button(Ability 2));
				Apply Impulse(Victim, Event Direction + Up, 15, To World, Cancel Contrary Motion);
				Heal(Event Player, Event Player, 55);
				Add Health Pool To Player(Event Player, Armor, 250, False, True);
				Start Rule(tawara_tota_remove_armor, Do Nothing);
			End;
		Else If(Event Ability == Button(Primary Fire) && Event Player.selected_hero_list_number == 3);
			Victim.playerSpeed[False] -= 30;
			Small Message(Victim, Custom String("{0} Slow down!!!", Hero Icon String(Hero(Hanzo))));
			Wait Until(Is In Spawn Room(Event Player), 3);
			Victim.playerSpeed[False] += 30;
	}
}

rule("All hanzo faster arrows")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Set Projectile Speed(Event Player, 1000);
		Wait Until(!Is Using Ability 2(Event Player), 99999);
		Set Projectile Speed(Event Player, 175);
		Wait(0.100, Ignore Condition);
		Skip If(!Array Contains(Array(2, 5), Event Player.selected_hero_list_number), True);
		Set Ability Cooldown(Event Player, Button(Ability 2), 4);
	}
}

rule("All Hanzo Ab1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 2);
			If(Is In Line of Sight(Event Player, Event Player.O, Barriers Do Not Block LOS));
				Event Player.P[True] = Event Player + Vector(Random Integer(-3, 4), 3, Random Integer(True, 6));
				Event Player.P[2] = Event Player.P[True] + Vector(Random Integer(True, 5), Random Integer(-1, 2), Random Integer(3, 6));
				Event Player.P[3] = Event Player.P[2] + Vector(Random Integer(-3, 7), Random Integer(-3, True), Random Integer(3, 6));
				Create Beam Effect(All Players(All Teams), Good Beam, Evaluate Once(Event Player), Event Player.P[True], Color(Yellow), None);
				Event Player.Effects[5] = Last Created Entity;
				Play Effect(All Players(All Teams), Buff Impact Sound, Color(Yellow), Event Player.P[True], 100);
				Wait(0.150, Ignore Condition);
				Create Beam Effect(All Players(All Teams), Good Beam, Event Player.P[True], Event Player.P[2], Color(Yellow), None);
				Event Player.Effects[6] = Last Created Entity;
				Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Event Player.P[2], 100);
				Wait(0.150, Ignore Condition);
				Create Beam Effect(All Players(All Teams), Good Beam, Event Player.P[2], Event Player.P[3], Color(Yellow), None);
				Event Player.Effects[7] = Last Created Entity;
				Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Event Player.P[3], 100);
				Wait(0.150, Ignore Condition);
				Create Beam Effect(All Players(All Teams), Good Beam, Event Player.P[3], Event Player.O, Color(Yellow), None);
				Event Player.Effects[8] = Last Created Entity;
				Wait(0.150, Ignore Condition);
				Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Event Player.O, 100);
				Play Effect(All Players(All Teams), Bad Explosion, Color(Yellow), Event Player.O, 1);
				Damage(Event Player.O, Event Player, 95);
				Event Player.O = Empty Array;
				Wait(0.450, Ignore Condition);
				Destroy Effect(Event Player.Effects[5]);
				Destroy Effect(Event Player.Effects[6]);
				Destroy Effect(Event Player.Effects[7]);
				Destroy Effect(Event Player.Effects[8]);
				Wait(0.250, Ignore Condition);
			Else;
				Event Player.O = Empty Array;
				Small Message(Event Player, Custom String("Target is behind a wall"));
			End;
			Set Ability Cooldown(Event Player, Button(Ability 1), 7);
		Else If(Event Player.selected_hero_list_number == 3);
			Destroy Icon(Event Player.Effects[2]);
			Event Player.E = Filtered Array(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))), Entity Exists(
				Current Array Element) && !Is Dummy Bot(Current Array Element) && Is Alive(Current Array Element));
			Create Icon(All Players(Team Of(Event Player)), Event Player.E, Warning, Visible To and Position, Color(Green), False);
			Event Player.Effects[2] = Last Created Entity;
			Small Message(Event Player.E, Custom String("You are being tracked by Atalante"));
			Start Forcing Player Outlines(Event Player.E, All Players(Team Of(Event Player)), True, Color(Lime Green), Always);
			Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player), 5);
			Stop Forcing Player Outlines(Event Player.E, All Players(All Teams));
			Destroy Icon(Event Player.Effects[2]);
			Event Player.Effects[2] = 5;
			Wait(0.016, Ignore Condition);
			Event Player.E = Null;
			Set Ability Cooldown(Event Player, Button(Ability 1), 5);
		Else If(Event Player.selected_hero_list_number == 4);
			Set Ability Cooldown(Event Player, Button(Ability 1), 5);
			Play Effect(All Players(All Teams), Ring Explosion, Color(White), Event Player + Vector(False, 1.500, False), 7);
			Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 70);
			Apply Impulse(Filtered Array(Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)), 65), Distance Between(
				Event Player, Current Array Element) <= 7), Facing Direction Of(Event Player), 55, To World, Cancel Contrary Motion);
		Else If(Event Player.selected_hero_list_number == 5);
			For Player Variable(Event Player, J, 0, 8, True);
				Set Ability Cooldown(Event Player, Button(Melee), False);
				Press Button(Event Player, Button(Melee));
				Wait(0.016, Ignore Condition);
				Cancel Primary Action(Event Player);
			End;
			Set Ability Cooldown(Event Player, Button(Ability 1), 5);
		Else If(Event Player.selected_hero_list_number == 6);
			Set Ability Cooldown(Event Player, Button(Ability 1), 10);
			Event Player.X = Position Of(Event Player) + Vector(False, 1.500, False);
			Create Effect(All Players(All Teams), Orb, Color(Sky Blue), Event Player.X, True, None);
			Event Player.Effects[5] = Last Created Entity;
			Create Effect(All Players(All Teams), Ring, Color(Sky Blue), Event Player.X, 8, None);
			Event Player.Effects[8] = Last Created Entity;
			Create Icon(All Players(All Teams), Event Player.X, Warning, Visible To and Position, Color(White), False);
			Event Player.Effects[7] = Last Created Entity;
			Event Player.H = True;
			Start Rule(tesla_ab1_loop, Restart Rule);
			Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player), 5);
			Destroy Icon(Event Player.Effects[7]);
			Destroy Effect(Event Player.Effects[5]);
			Destroy Effect(Event Player.Effects[8]);
			Event Player.H = False;
	}
}

rule("All Hanzo Ab2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		(Is Using Ability 2(Event Player) || Is Button Held(Event Player, Button(Ability 2))) == True;
		Is Alive(Event Player) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 3 && Ability Cooldown(Event Player, Button(Ability 2)) == 0);
			If(Entity Exists(Event Player.E));
				If(Altitude Of(Event Player.E) < 3);
					Small Message(Event Player.E, Custom String("{0} Stunned you!!!", Hero Icon String(Hero(Hanzo))));
					Apply Impulse(Event Player.E, Velocity Of(Event Player.E), Speed Of(Event Player.E) * -0.500, To World, Cancel Contrary Motion);
					Event Player.E.playerSpeed[False] -= 50;
					Set Status(Event Player.E, Event Player, Hacked, 4);
					Wait Until(Event Player.Effects[2] == 5, 4);
					Event Player.E.playerSpeed[False] += 50;
				Else;
					Set Status(Event Player.E, Event Player, Rooted, 2.500);
					Apply Impulse(Event Player.E, Down, 10000, To World, Cancel Contrary Motion);
				End;
			Else;
				Set Status(Filtered Array(Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)), 69), Is In Line of Sight(
					Event Player, Current Array Element, Barriers Do Not Block LOS)), Event Player, Rooted, 2.500);
			End;
			Set Ability Cooldown(Event Player, Button(Ability 2), 8);
		Else If(Ability Cooldown(Event Player, Button(Ability 2)) == Null && Event Player.selected_hero_list_number == 4);
			Set Ability Cooldown(Event Player, Button(Ability 2), 3);
			Call Subroutine(raycast_hit_position2);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Event Player.raycast_hit_position2, 4);
			Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player.raycast_hit_position2, 60);
			Wait(0.600, Ignore Condition);
			Create Effect(All Players(All Teams), Light Shaft, Color(Sky Blue), Event Player.raycast_hit_position2, 4, None);
			Event Player.Effects[3] = Last Created Entity;
			Event Player.Q = Filtered Array(All Living Players(Opposite Team Of(Team Of(Event Player))), Distance Between(Vector(
				X Component Of(Position Of(Current Array Element)), False, Z Component Of(Position Of(Current Array Element))), Vector(
				X Component Of(Position Of(Event Player.raycast_hit_position2)), False, Z Component Of(Position Of(
				Event Player.raycast_hit_position2)))) <= 4);
			Damage(Event Player.Q, Event Player, 85);
			Apply Impulse(Event Player.Q, Up, 10, To World, Cancel Contrary Motion);
			Wait(0.100, Ignore Condition);
			Destroy Effect(Event Player.Effects[3]);
			Wait Until(Is Button Held(Event Player, Button(Ability 2)), 0.400);
			Create Effect(All Players(All Teams), Light Shaft, Color(Sky Blue), Event Player.raycast_hit_position2, 6, None);
			Event Player.Effects[3] = Last Created Entity;
			Event Player.Q = Filtered Array(All Living Players(Opposite Team Of(Team Of(Event Player))), Distance Between(Vector(
				X Component Of(Position Of(Current Array Element)), False, Z Component Of(Position Of(Current Array Element))), Vector(
				X Component Of(Position Of(Event Player.raycast_hit_position2)), False, Z Component Of(Position Of(
				Event Player.raycast_hit_position2)))) <= 6);
			Damage(Event Player.Q, Event Player, 90);
			Apply Impulse(Event Player.Q, Up, 15, To World, Cancel Contrary Motion);
			Wait(0.100, Ignore Condition);
			Destroy Effect(Event Player.Effects[3]);
	}
}

rule("Atalante ultimate 2/2 (damage loop)")
{
	event
	{
		Subroutine;
		atalante_ultimate_loop;
	}

	actions
	{
		Event Player.V = Event Player.raycast_hit_position2 + Vector(Random Integer(-25, 25), False, Random Integer(25, -25));
		Play Effect(All Players(All Teams), Explosion Sound, Color(Purple), Event Player.V, 150);
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Effect, Color(Purple), Event Player.V, 6.500);
		Damage(Players Within Radius(Event Player.V, 6.500, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 170);
		Wait(0.050, Ignore Condition);
		Abort If(Event Player.Is_Using_Ultimate == False);
		Loop;
	}
}

rule("Tesla Hanzo Electricity orb (ightning damage subroutine)")
{
	event
	{
		Subroutine;
		tesla_ab1_loop;
	}

	actions
	{
		Abort If(Event Player.H == False);
		Event Player.Medusa_trap = Filtered Array(Players Within Radius(Event Player.X, 8, Opposite Team Of(Team Of(Event Player)),
			Surfaces), Is Alive(Current Array Element));
		For Player Variable(Event Player, for_loop, 0, Count Of(Event Player.Medusa_trap), True);
			Damage(Event Player.Medusa_trap[Event Player.for_loop], Event Player, 55);
			Create Beam Effect(All Players(All Teams), Bad Beam, Event Player.Medusa_trap[Event Player.for_loop], Event Player.X, Color(
				Sky Blue), None);
			Event Player.Medusa_trap[Event Player.for_loop].lighting_pool[1] = Last Created Entity;
			Wait(0.100, Ignore Condition);
			Destroy Effect(Event Player.Medusa_trap[Event Player.for_loop].lighting_pool[1]);
			Abort If(Event Player.H == False);
		End;
		Wait(0.250, Ignore Condition);
		Loop;
	}
}

rule("ab2 triple arrows (remove armor - subroutine)")
{
	event
	{
		Subroutine;
		tawara_tota_remove_armor;
	}

	actions
	{
		Wait(4, Ignore Condition);
		Remove All Health Pools From Player(Event Player);
	}
}

rule("Hanzo Tesla Ab2 electricity attack")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Alive(Event Player) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 6);
			If(Event Player.Z >= 1);
				Event Player.Z -= 1;
				Call Subroutine(raycast_hit_player);
				Call Subroutine(raycast_hit_position1);
				Create Beam Effect(All Players(All Teams), Bad Beam, Event Player, Event Player.raycast_hit_position, Color(Blue), Color);
				Event Player.Effects[4] = Last Created Entity;
				Damage(Entity Exists(Event Player.raycast_hit_player) ? Event Player.raycast_hit_player : Players Within Radius(
					Event Player.raycast_hit_position, 3, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player,
					Entity Exists(Event Player.raycast_hit_player) ? 75 : 25);
				Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Event Player.raycast_hit_position, 50);
				Play Effect(All Players(All Teams), Bad Explosion, Color(Blue), Event Player.raycast_hit_position, 2);
				Wait(0.085, Ignore Condition);
				Destroy Effect(Event Player.Effects[4]);
				Call Subroutine(tesla_cooldown_reset);
	}
}

rule("tesla cooldown ability loop")
{
	event
	{
		Subroutine;
		tesla_cooldown_reset;
	}

	actions
	{
		If(Event Player.Z <= 0);
			Press Button(Event Player, Button(Ability 2));
			Set Status(Event Player, Null, Hacked, 0.086);
			Event Player.Z = 6;
			Set Ability Cooldown(Event Player, Button(Ability 2), 2.500);
			Abort;
		End;
	}
}

rule("Pharah all Ab1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		(Is Button Held(Event Player, Button(Ability 1)) || Is Button Held(Event Player, Button(Secondary Fire))) == True;
		(Has Status(Event Player, Frozen) || Has Status(Event Player, Rooted) || Has Status(Event Player, Stunned) || Has Status(
			Event Player, Knocked Down)) == False;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(!Event Player.selected_hero_list_number && Is Button Held(Event Player, Button(Ability 1)));
			Set Gravity(Event Player, False);
			Apply Impulse(Event Player, Facing Direction Of(Event Player), Event Player.S == True ? 18 : 10, To World, Cancel Contrary Motion);
			Wait(0.100, Ignore Condition);
			Loop If Condition Is True;
		Else If(Event Player.selected_hero_list_number == 1);
			If(Event Player.X > 0);
				Event Player.X -= 1;
				Apply Impulse(Event Player, Is Button Held(Event Player, Button(Ability 1)) ? Facing Direction Of(Event Player)
					: Facing Direction Of(Event Player) * -1, Is Button Held(Event Player, Button(Ability 1)) ? 30 : 25, To World,
					Cancel Contrary Motion);
			End;
			Small Message(Event Player, Custom String("{0} {1}", Event Player.X, Custom String("dashes left")));
		End;
		Wait(0.100, Ignore Condition);
	}
}

rule("Pharah all Ab2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		(Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned) || Has Status(Event Player, Knocked Down)) == False;
		Is Alive(Event Player) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null);
			Play Effect(All Players(All Teams), Buff Impact Sound, Color(Green), Event Player, 100);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Event Player, 1);
			Set Ability Cooldown(Event Player, Button(Ability 2), 10);
			Set Move Speed(Event Player, 500);
			Event Player.S = True;
			Wait Until(Is Assembling Heroes, 5);
			Set Move Speed(Event Player, 135);
			Event Player.S = False;
		Else If(Event Player.selected_hero_list_number == 1 && !Is Using Ability 2(Event Player));
			Event Player.trump_wait_middle = Players Within Radius(Event Player, 6, Opposite Team Of(Team Of(Event Player)), Surfaces);
			Set Ability Cooldown(Event Player, Button(Ability 2), 7);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Lime Green), Event Player + Vector(False, 0.650, False), 6);
			Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Lime Green), Event Player + Vector(False, 1.500, False), 90);
			Damage(Event Player.trump_wait_middle, Event Player, 100);
			Set Status(Event Player.trump_wait_middle, Null, Rooted, 1.500);
			Set Status(Event Player, Null, Unkillable, 1);
	}
}

rule("Ishtar and David stop in mid air")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Event Player.Medusa_trap = Position Of(Event Player);
		Start Forcing Player Position(Event Player, Event Player.Medusa_trap, True);
		Wait(0.210, Ignore Condition);
		Stop Forcing Player Position(Event Player);
		Wait(0.500, Ignore Condition);
	}
}

rule("David ab1 evasion (add variable)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Event Player.X < 3;
		Event Player.X > -1;
		Event Player.selected_hero_list_number == 1;
	}

	actions
	{
		Wait(2.400, Ignore Condition);
		Event Player.X += True;
		Loop If Condition Is True;
	}
}

rule("All Zenyatta damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null && Event Ability == Button(Primary Fire) && Event Player.X == True);
			Set Facing(Victim, Direction From Angles(Random Integer(False, 360), Random Integer(False, 360)), To World);
		Else If(Event Ability == Button(Secondary Fire) && Event Player.selected_hero_list_number == 1);
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 10);
			Set Ultimate Charge(Victim, Ultimate Charge Percent(Victim) - 10);
		Else If(Event Player.selected_hero_list_number == 2);
			If(Event Ability == Button(Primary Fire));
				Damage(Victim, Event Player, 18);
				Play Effect(All Players(All Teams), Good Explosion, Color(Red), Victim, 0.850);
			Else If(Event Ability == Button(Secondary Fire));
				Damage(Victim, Event Player, 0.800);
				Play Effect(All Players(All Teams), Good Explosion, Color(Red), Victim, 0.350);
			Else If(Event Ability == Button(Melee));
				Heal(Event Player, Event Player, 80);
				Start Damage Over Time(Victim, Event Player, 25, 2);
			End;
		Else If(Is Using Ultimate(Event Player) && Event Player.selected_hero_list_number == 2);
			Wait(True, Restart When True);
			Set Ultimate Charge(Event Player, 0);
		Else If(!Is Using Ultimate(Event Player) && Event Player.selected_hero_list_number == 3);
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Event Damage / 10);
	}
}

rule("All ab1 & ab2 Zenyatta")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		(Is Button Held(Event Player, Button(Ability 1)) || Is Button Held(Event Player, Button(Ability 2))) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null);
			If(Is Button Held(Event Player, Button(Ability 2)));
				Play Effect(All Players(All Teams), Good Explosion, Color(Red), Event Player, 1);
				Play Effect(All Players(All Teams), Buff Impact Sound, Color(Aqua), Event Player, 100);
				Event Player.X = True;
				Wait(5, Ignore Condition);
				Event Player.X = False;
				Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Aqua), Event Player, 1);
				Play Effect(All Players(All Teams), Buff Impact Sound, Color(Aqua), Event Player, 100);
				Wait(10, Ignore Condition);
				Small Message(Event Player, Custom String("{0} Random Facing ability usable", Hero Icon String(Hero(Zenyatta))));
			End;
		Else If(Event Player.selected_hero_list_number == 1);
			If(Is Button Held(Event Player, Button(Ability 1)));
				Call Subroutine(raycast_hit_position2);
				Create Effect(All Players(All Teams), Light Shaft, Color(Red), Event Player.raycast_hit_position2, 8,
					Visible To Position and Radius);
				Event Player.Effects[2] = Last Created Entity;
				Event Player.filtered_array = Filtered Array(All Living Players(Opposite Team Of(Team Of(Event Player))), Is In Line of Sight(
					Event Player.raycast_hit_position2, Current Array Element, Barriers Do Not Block LOS) && Distance Between(Vector(
					X Component Of(Event Player.raycast_hit_position2), False, Z Component Of(Event Player.raycast_hit_position2)), Vector(
					X Component Of(Position Of(Current Array Element)), False, Z Component Of(Position Of(Current Array Element)))) <= 8);
				Damage(Event Player.filtered_array, Event Player, 50);
				Apply Impulse(Event Player.filtered_array, Down, 10000, To World, Incorporate Contrary Motion);
				Set Status(Event Player.filtered_array, Null, Rooted, True);
				Wait(0.150, Ignore Condition);
				Destroy Effect(Event Player.Effects[2]);
				Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Red), Event Player.raycast_hit_position2, 150);
				Wait(6.500, Ignore Condition);
				Small Message(Event Player, Custom String("Ability 1 available"));
			End;
		Else If(Event Player.selected_hero_list_number == 2 && Is Button Held(Event Player, Button(Ability 2)));
			Start Forcing Throttle(Event Player, False, False, False, False, False, False);
			Create Effect(All Players(All Teams), Sphere, Color(Red), Event Player, 5, Visible To Position and Radius);
			Event Player.Effects[2] = Last Created Entity;
			For Player Variable(Event Player, for_loop, 0, 5, True);
				Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Event Player, 300);
				Damage(Remove From Array(Players Within Radius(Event Player, 5, All Teams, Off), Event Player), Event Player, 75);
				Wait(0.200, Ignore Condition);
			End;
			Destroy Effect(Event Player.Effects[2]);
			Stop Forcing Throttle(Event Player);
			Wait(5, Ignore Condition);
			Small Message(Event Player, Custom String("\"E\" is ready"));
		Else If(Event Player.selected_hero_list_number == 3);
			If(Is Button Held(Event Player, Button(Ability 2)));
				If(Event Player.Z == False);
					"W = position of circle yellow; Z = if drone is activated or not;"
					Event Player.Z = True;
					Call Subroutine(create_dummy_of_EventPlayer);
					Event Player.Solomon_pillar_array = Last Created Entity;
					Start Scaling Player(Event Player.Solomon_pillar_array, 1.350, True);
					Attach Players(Event Player.Solomon_pillar_array, Event Player, Vector(False, 1.600, False));
					Set Invisible(Event Player.Solomon_pillar_array, All);
					Create Effect(Remove From Array(All Players(All Teams), Event Player), Orb, Color(Yellow), Update Every Frame(Position Of(
						Event Player.Solomon_pillar_array) + Vector(False, 1.550, False)), 3, Visible To Position and Radius);
					Event Player.Effects[3] = Last Created Entity;
					Add Health Pool To Player(Event Player.Solomon_pillar_array, Armor, 100, True, True);
					Start Rule(ozymandias_ab2_loop, Restart Rule);
					Wait Until(!Entity Exists(Event Player.Solomon_pillar_array), 99999);
					"W = position of circle yellow; Z = if drone is activated or not;"
					Event Player.Z = False;
					Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player.W, 1);
					Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Red), Event Player.W, 60);
					Destroy Effect(Event Player.Effects[3]);
					"If he despawns it its 7s cooldown / if killed is much bigger"
					Wait(10, Ignore Condition);
					Small Message(Event Player, Custom String("Protection orb spawnable"));
	}
}

rule("Ozymandias Damage loop for Orb")
{
	event
	{
		Subroutine;
		ozymandias_ab2_loop;
	}

	actions
	{
		Event Player.Solomon_pillar_array.Q = Filtered Array(Players Within Radius(Event Player, 13, Opposite Team Of(Team Of(
			Event Player)), Surfaces), Is Alive(Current Array Element));
		For Player Variable(Event Player, for_loop, 0, Count Of(Event Player.Solomon_pillar_array.Q), True);
			Damage(Event Player.Solomon_pillar_array.Q[Event Player.for_loop], Event Player, 25);
			Create Beam Effect(All Players(All Teams), Omnic Slicer Beam, Event Player.Solomon_pillar_array,
				Event Player.Solomon_pillar_array.Q[Event Player.for_loop], Color(Yellow), None);
			Event Player.Effects[6] = Last Created Entity;
			Wait(0.400, Ignore Condition);
			Destroy Effect(Event Player.Effects[6]);
		End;
		Wait(0.100, Ignore Condition);
		Abort If(!Entity Exists(Event Player.Solomon_pillar_array));
		Loop;
	}
}

rule("Adrunf Himvler ab 1 morale boost")
{
	event
	{
		Player Dealt Healing;
		All;
		Zenyatta;
	}

	conditions
	{
		Event Ability == Button(Ability 1);
		Event Player.selected_hero_list_number == Null;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 10);
		Play Effect(All Players(All Teams), Brigitte Repair Pack Armor Effect, Color(White), Healee, 1);
		Play Effect(All Players(All Teams), Good Explosion, Color(Yellow), Healee, 1);
		Add Health Pool To Player(Healee, Armor, 350, False, True);
		Event Player.Effects[7] = Last Created Health Pool;
		Wait Until(Is In Spawn Room(Event Player), 3);
		Remove Health Pool From Player(Event Player.Effects[7]);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Healee, 1);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Blue), Healee, 1);
		Wait(7, Ignore Condition);
		Small Message(Event Player, Custom String("You can boost now"));
	}
}

rule("Lancelot ab2 2/2 (damage reversal)")
{
	event
	{
		Player Took Damage;
		All;
		Bastion;
	}

	conditions
	{
		Event Player.selected_hero_list_number == 1;
		Event Player.R == True;
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Set Player Health(Event Player, Health(Event Player) + Event Damage);
		Damage(Attacker, Event Player, Event Damage * 2.500);
	}
}

rule("Solomon reaper melee faster")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.selected_hero_list_number == Null;
		Is Using Ultimate(Event Player) == False;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Press Button(Event Player, Button(Melee));
		Wait(0.500, Ignore Condition);
		Skip If(Is Using Ultimate(Event Player), True);
		Cancel Primary Action(Event Player);
		Set Ability Cooldown(Event Player, Button(Melee), False);
		Loop If Condition Is True;
	}
}

rule("Solomon ab1 ult steal (subroutine)")
{
	event
	{
		Subroutine;
		solomon_ab1_loop;
	}

	actions
	{
		Call Subroutine(raycast_hit_player);
		Call Subroutine(raycast_hit_position1);
		Event Player.Q = Event Player.raycast_hit_player;
		Skip If(Entity Exists(Event Player.raycast_hit_player), True);
		Event Player.Q = First Of(Players Within Radius(Event Player.raycast_hit_position, 2, All Teams, Surfaces And Enemy Barriers));
		If(Team Of(Event Player.Q) != Team Of(Event Player));
			If(Ultimate Charge Percent(Event Player.Q) >= 2);
				Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 1.300);
				Set Ultimate Charge(Event Player.Q, Ultimate Charge Percent(Event Player.Q) - 1.300);
			End;
		Else;
			If(Ultimate Charge Percent(Event Player) >= 2);
				Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) - 8);
				Set Ultimate Charge(Event Player.Q, Ultimate Charge Percent(Event Player.Q) + 4);
			End;
		End;
		Wait(0.090, Ignore Condition);
		Abort If(Event Player.L == False);
		Loop;
	}
}

rule("Solomon ultimate damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Reaper;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
		Event Player.selected_hero_list_number == Null;
	}

	actions
	{
		Start Damage Over Time(Victim, Event Player, 3, 20);
	}
}

rule("All reaper Ab1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == Null;
		Event Player.selecting_HUD == False;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 0 && !Event Player.L);
			Create Beam Effect(All Players(All Teams), Bad Beam, Update Every Frame(Position Of(Event Player)), Update Every Frame(
				Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 150,
				All Players(All Teams), Event Player, True)), Color(Violet), Visible To Position and Radius);
			Event Player.Effects[True] = Last Created Entity;
			Event Player.L = True;
			Start Rule(solomon_ab1_loop, Restart Rule);
			Wait Until(!Is Button Held(Event Player, Button(Ability 1)), 99999);
			Event Player.L = False;
			Destroy Effect(Event Player.Effects[True]);
		Else If(Event Player.selected_hero_list_number == 1);
			Event Player.P = Filtered Array(Player Closest To Reticle(Event Player, Team Of(Event Player)), Entity Exists(
				Current Array Element) && !Is In Spawn Room(Current Array Element));
			Skip If(!Entity Exists(Event Player.P), 5);
			Start Rule(reaper_set_lower_HP, Restart Rule);
			Event Player.G = True;
			Wait(0.250, Ignore Condition);
			Wait Until(Is Button Held(Event Player, Button(Ability 1)) || Is Dead(Event Player) || Is In Spawn Room(Event Player)
				|| !Entity Exists(Event Player) || Is Dead(Event Player.P) || !Entity Exists(Event Player.P), 99999);
			Event Player.G = False;
			Set Ability Cooldown(Event Player, Button(Ability 1), 3);
			Stop Heal Over Time(Event Player.heal_over_time);
			Start Heal Over Time(Event Player, Event Player, 9999, 30);
			Event Player.heal_over_time = Last Heal Over Time ID;
			Start Rule(stop_healing_over_time, Restart Rule);
	}
}

rule("All reaper Ab2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Event Player.selecting_HUD == False;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null);
			Skip If(Count Of(Event Player.Solomon_pillar_array) >= 6, 5);
			Small Message(Event Player, Custom String("Cursed pillar spawned"));
			Call Subroutine(create_dummy_of_EventPlayer);
			Start Forcing Dummy Bot Name(Last Created Entity, Custom String("SOLOMON POWER PILLAR"));
			Set Damage Received(Last Created Entity, 40);
			Start Rule(Solomon_ab2_loop, Restart Rule);
			Set Ability Cooldown(Event Player, Button(Ability 2), 12);
		Else;
			Call Subroutine(create_dummy_of_EventPlayer);
			Set Max Health(Event Player.Solomon_pillar_array, 60);
			Set Facing(Last Created Entity, Up, To World);
			Set Ability Cooldown(Event Player, Button(Ability 2), 12);
			Wait(0.250, Ignore Condition);
			Wait Until(Is Button Held(Event Player, Button(Ability 2)), 4);
			Kill(Event Player.Solomon_pillar_array, Null);
	}
}

rule("sniper  ab1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Is In Air(Event Player) == True;
		Is Moving(Event Player) == True;
		Event Player.E == False;
		Event Player.selected_hero_list_number == Null;
	}

	actions
	{
		Event Player.E = True;
		Disallow Button(Event Player, Button(Jump));
		Disallow Button(Event Player, Button(Ability 1));
		Wait Until(!Is Using Ability 1(Event Player), 99999);
		Start Forcing Player Position(Event Player, Position Of(Event Player), True);
		Wait(0.100, Ignore Condition);
		Stop Forcing Player Position(Event Player);
		Start Forcing Throttle(Event Player, False, False, False, False, False, False);
		Set Gravity(Event Player, False);
		Wait Until(Is Button Held(Event Player, Button(Ability 1)) || Is In Spawn Room(Event Player) || Has Status(Event Player, Stunned),
			99999);
		Set Gravity(Event Player, 100);
		Stop Forcing Throttle(Event Player);
		Event Player.E = False;
		Allow Button(Event Player, Button(Jump));
		Allow Button(Event Player, Button(Ability 1));
	}
}

rule("sniper  ab2 (stun)")
{
	event
	{
		Player Dealt Damage;
		All;
		Widowmaker;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
		Event Player.selected_hero_list_number == Null;
	}

	actions
	{
		Skip If(Has Status(Victim, Knocked Down), 1);
		Set Status(Victim, Event Player, Knocked Down, 4.500);
		Start Forcing Player Outlines(All Living Players(Opposite Team Of(Team Of(Event Player))), All Players(Team Of(Event Player)),
			True, Color(Violet), Always);
		Wait Until(Is In Spawn Room(Event Player) || Is Dead(Event Player) || !Entity Exists(Event Player), 6);
		Stop Forcing Player Outlines(All Players(Opposite Team Of(Team Of(Event Player))), All Players(Team Of(Event Player)));
	}
}

rule("sniper ultimate (setup)")
{
	event
	{
		Player Dealt Damage;
		All;
		Widowmaker;
	}

	conditions
	{
		Event Player.selected_hero_list_number == Null;
	}

	actions
	{
		If(Is Using Ultimate(Event Player));
			If(Array Contains(Array(Button(Secondary Fire), Button(Ability 2)), Event Ability));
				Damage(Victim, Null, Max Health(Victim) / 2.100);
			Else If(Event Was Critical Hit && Is Firing Secondary(Event Player) && Event Ability == Button(Primary Fire));
				Start Heal Over Time(Event Player, Event Player, 2.500, 150);
				Set Status(Victim, Event Player, Stunned, 2);
			End;
		Else;
			If(Event Ability == Button(Ability 2));
				Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 10);
	}
}

rule("Bastion Alfred || Lancelot reversal Ab2 : give invincible status")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
	}

	actions
	{
		If(!Event Player.selected_hero_list_number);
			Set Status(Event Player, Null, Unkillable, 4);
			Create Effect(All Players(All Teams), Bad Aura, Color(Blue), Event Player, True, Visible To Position and Radius);
			Event Player.Effects[True] = Last Created Entity;
			Wait(4, Ignore Condition);
			Destroy Effect(Event Player.Effects[True]);
			Wait(5, Ignore Condition);
			Small Message(Event Player, Custom String("You can use armour now"));
		Else;
			Event Player.R = True;
			Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Event Player, 100);
			Event Player.is_damage_reversing = True;
			Wait Until(Is In Spawn Room(Event Player), 3.500);
			Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 100);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
			Event Player.R = False;
			Event Player.is_damage_reversing = False;
			Wait Until(Is Assembling Heroes, 7);
			Small Message(Event Player, Custom String("E ready"));
	}
}

rule("Houdini sombra ab2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		(Has Status(Event Player, Asleep) || Has Status(Event Player, Frozen) || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Stunned)) == True;
		Event Player.selected_hero_list_number == Null;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), 4);
		Clear Status(Event Player, Hacked);
		Clear Status(Event Player, Rooted);
		Clear Status(Event Player, Burning);
		Set Status(Event Player, Null, Frozen, 9999);
		Clear Status(Event Player, Frozen);
		Stop Forcing Player Position(Event Player);
		Detach Players(Event Player);
		Event Player.is_player_anchored = Null;
		Set Status(Event Player, Null, Phased Out, 1);
	}
}

rule("Houdini sombra ab 1 (create dummy)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Event Player.selected_hero_list_number == Null;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 1), 6);
		Call Subroutine(houdini_create_clone);
		Wait(True, Ignore Condition);
		Wait Until(!Entity Exists(Event Player.Solomon_pillar_array) || Is In Spawn Room(Event Player) || Is Button Held(Event Player,
			Button(Interact)) || Is Dead(Event Player.Solomon_pillar_array), 99999);
		Kill(Event Player.Solomon_pillar_array, Null);
		Event Player.U = False;
		Event Player.Solomon_pillar_array = Empty Array;
		Set Ability Cooldown(Event Player, Button(Ability 1), 6);
	}
}

rule("Houdini sombra ab1  (if player dies)")
{
	event
	{
		Player Died;
		All;
		Sombra;
	}

	conditions
	{
		((!Is Dummy Bot(Event Player) && Event Player.selected_hero_list_number == Null) || Is Dummy Bot(Event Player)) == True;
	}

	actions
	{
		If(!Is Dummy Bot(Event Player));
			If(Is Alive(Event Player.Solomon_pillar_array) && Entity Exists(Event Player.Solomon_pillar_array) && Event Player.U);
				Teleport(Event Player, Event Player.Solomon_pillar_array);
				Resurrect(Event Player);
				Play Effect(All Players(All Teams), Good Explosion, Color(Purple), Event Player, 1);
				Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player.Solomon_pillar_array));
				Start Heal Over Time(Event Player, Event Player, 0.750, 1000);
			End;
		Else If(Is Dummy Bot(Event Player));
			Damage(Attacker, Event Player, 100);
			Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
	}
}

rule("Tamamo Cat very fast punch")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Event Player.selected_hero_list_number == 2;
	}

	actions
	{
		Set Move Speed(Event Player, 400);
		Wait Until(!Is Firing Secondary(Event Player), 99999);
		Wait(0.016, Ignore Condition);
		Set Move Speed(Event Player, 155);
	}
}

rule("Quetzaqoatl ultimate landing")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Using Ultimate(Event Player) == True;
		Event Player.Is_Using_Ultimate == True;
		Event Player.selected_hero_list_number == 1;
	}

	actions
	{
		Wait Until(!Is Using Ultimate(Event Player), 1.500);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Event Player, 12);
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(Red), Event Player, 100);
		Event Player.Is_Using_Ultimate = False;
	}
}

rule("Quetzaqoatl uppercut of justice || hyper punch  // Tamamo Cat abilties")
{
	event
	{
		Player Dealt Damage;
		All;
		Doomfist;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 1);
			If(Event Ability == Button(Ability 1));
				Set Status(Victim, Event Player, Stunned, 2);
				Apply Impulse(Victim, Facing Direction Of(Event Player), 25, To World, Cancel Contrary Motion);
				Wait(0.950, Ignore Condition);
				Set Ability Cooldown(Event Player, Button(Ability 1), 6);
			Else If(Event Ability == Button(Ultimate));
				Kill(Victim, Event Player);
			Else If(Event Ability == Button(Secondary Fire));
				Damage(Victim, Event Player, 35);
				Apply Impulse(Victim, Facing Direction Of(Event Player), 45, To World, Cancel Contrary Motion);
			End;
		Else If(Event Player.selected_hero_list_number == 2);
			If(Event Ability == Button(Secondary Fire));
				If(Event Player.Is_Using_Ultimate == False);
					Damage(Victim, Null, Event Damage / 2);
					Apply Impulse(Victim, Facing Direction Of(Event Player), 35, To World, Cancel Contrary Motion);
				Else If(Event Player.Is_Using_Ultimate == True || Event Player.X == 1);
					Damage(Victim, Null, Max Health(Victim) / 2);
					Apply Impulse(Victim, Facing Direction Of(Event Player), 2600, To World, Cancel Contrary Motion);
					Wait(1.500, Ignore Condition);
					Set Status(Victim, Null, Frozen, 1);
				End;
			Else If(Event Ability == Button(Ability 1));
				Set Status(Event Player, Null, Unkillable, 4);
				Damage(Victim, Null, 45);
			End;
		Else If(Event Player.selected_hero_list_number == 3);
			If(Event Ability == Button(Secondary Fire));
				Damage(Victim, Event Player, 45);
				Apply Impulse(Victim, Facing Direction Of(Event Player), 45, To World, Cancel Contrary Motion);
	}
}

rule("Quetzaqoatl doomfist boost || tamamo Ab 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 1);
			Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Red), Event Player, 100);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Event Player, 1);
			Set Ability Cooldown(Event Player, Button(Ability 2), 7);
			Event Player.playerSpeed[False] += 110;
			Set Gravity(Event Player, 35);
			Wait Until(Is In Spawn Room(Event Player), 4);
			Event Player.playerSpeed[False] -= 110;
			Set Gravity(Event Player, 100);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Red), Event Player, 1);
			Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Red), Event Player, 100);
		Else If(Event Player.selected_hero_list_number == 2);
			Small Message(Event Player, Custom String("Defense mode"));
			Create Effect(All Players(All Teams), Lúcio Sound Barrier Protected Effect, Color(Team 1), Event Player, True,
				Visible To Position and Radius);
			Event Player.Effects[2] = Last Created Entity;
			Event Player.X = 2;
			Set Status(Event Player, Null, Frozen, 9999);
			Set Damage Received(Event Player, 0.001);
			Wait(0.450, Ignore Condition);
			Wait Until(Is Button Held(Event Player, Button(Ability 2)) || Is In Spawn Room(Event Player) || Is Dead(Event Player), 9999);
			Clear Status(Event Player, Frozen);
			Small Message(Event Player, Custom String("Combat mode"));
			Event Player.X = 1;
			Set Damage Received(Event Player, 70);
			Destroy Effect(Event Player.Effects[2]);
			Set Ability Cooldown(Event Player, Button(Ability 2), 4);
			Set Status(Event Player, Null, Unkillable, 1);
		Else If(Event Player.selected_hero_list_number == 3);
			Event Player.B = Random Integer(0, 1);
			If(Event Player.B);
				Small Message(Event Player, Custom String("Lucky!!!"));
				Start Heal Over Time(Event Player, Event Player, 7, 9999);
			Else;
				Small Message(Event Player, Custom String("Bad roll :("));
				Set Player Health(Event Player, Health(Event Player) / 2);
			End;
			Set Ability Cooldown(Event Player, Button(Ability 2), 10);
	}
}

rule("All Mcree damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Cassidy;
	}

	actions
	{
		If(Event Was Critical Hit);
			Damage(Victim, Null, Max Health(Victim) / 5);
			If(Event Player.selected_hero_list_number);
				Victim.Is_Using_Ultimate = False;
				Set Status(Victim, Event Player, Rooted, 0.100);
				Apply Impulse(Victim, Up, 2, To World, Cancel Contrary Motion);
				Heal(Event Player, Event Player, Event Damage * 1.300);
			Else;
				Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 7);
			End;
		End;
		If(Event Player.selected_hero_list_number == Null);
			If(Event Player.M);
				Set Player Health(Victim, Health(Victim) - Health Of Type(Victim, Armor) / 5.400);
			End;
			If(Is Using Ultimate(Event Player));
				If(Event Ability == Button(Ultimate));
					Kill(Victim, Event Player);
					Start Damage Modification(All Players(Opposite Team Of(Team Of(Event Player))), Event Player, 0,
						Receivers Damagers and Damage Percent);
					Wait(True, Ignore Condition);
					Stop Damage Modification(Last Damage Modification ID);
				End;
			End;
		Else If(Event Ability == Button(Primary Fire) && Event Player.selected_hero_list_number == 1);
			Call Subroutine(raycast_hit_position1);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Purple), Event Player.raycast_hit_position, 0.100);
			Heal(Event Player, Event Player, Event Damage * 1.300);
	}
}

rule("All Mcree ab1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Cassidy;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Event Player.selecting_HUD == False;
		Event Player.Is_Using_Ultimate == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == Null);
			Set Ability Cooldown(Event Player, Button(Ability 1), 10);
			Event Player.T = Players Within Radius(Event Player, 5, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers);
			Set Status(Event Player.T, Null, Frozen, 1.500);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Event Player, 5);
			Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Sky Blue), Event Player, 80);
		Else If(Event Player.selected_hero_list_number == 1);
			Clear Status(Event Player, Stunned);
			Clear Status(Event Player, Knocked Down);
			Clear Status(Event Player, Frozen);
			Set Ability Cooldown(Event Player, Button(Ability 1), 7);
			Set Move Speed(Event Player, 275);
			Set Invisible(Event Player, All);
			Set Gravity(Event Player, 35);
			Detach Players(Event Player);
			Stop Forcing Player Position(Event Player);
			Clear Status(Event Player, Rooted);
			Event Player.is_player_anchored = Null;
			Set Jump Vertical Speed(Event Player, 145);
			Wait Until(Is In Spawn Room(Event Player), 1.500);
			Set Invisible(Event Player, None);
			Set Move Speed(Event Player, 115);
			Set Gravity(Event Player, 100);
			Set Jump Vertical Speed(Event Player, 100);
	}
}

rule("Abigail Ab2 and Billy The Kid || Rammatra new guy")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Array Contains(Array(Hero(Cassidy), Hero(Ramattra)), Hero Of(Event Player)) == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Cassidy));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.M = True;
				Wait(4, Ignore Condition);
				Event Player.M = False;
				Set Ability Cooldown(Event Player, Button(Ability 2), 9);
			Else If(Event Player.selected_hero_list_number == 1);
				Call Subroutine(raycast_hit_position2);
				Play Effect(All Players(All Teams), Ring Explosion, Color(Violet), Event Player.raycast_hit_position2 + Vector(False, 0.400,
					False), 4);
				Wait(1.500, Ignore Condition);
				Create Effect(All Players(All Teams), Ring, Color(Purple), Event Player.raycast_hit_position2, 4, Visible To Position and Radius);
				Event Player.Effects[11] = Last Created Entity;
				Create Icon(All Players(All Teams), Event Player.raycast_hit_position2, Warning, Visible To and Position, Color(White), True);
				Event Player.Effects[12] = Last Created Entity;
				Wait Until(Is Button Held(Event Player, Button(Ability 2)) || Is In Spawn Room(Event Player) || Count Of(Players Within Radius(
					Event Player.raycast_hit_position2, 4, Opposite Team Of(Team Of(Event Player)), Off)) >= 1, 4);
				Start Forcing Player Position(Players Within Radius(Event Player.raycast_hit_position2, 4, Opposite Team Of(Team Of(Event Player)),
					Off), Event Player.raycast_hit_position2 + Vector(0, 1, 0), True);
				Wait Until(Is In Spawn Room(Event Player) || Is Button Held(Event Player, Button(Ability 2)), 2.500);
				Stop Forcing Player Position(Players Within Radius(Event Player.raycast_hit_position2, 4, Opposite Team Of(Team Of(Event Player)),
					Off));
				Destroy Effect(Event Player.Effects[11]);
				Destroy Icon(Event Player.Effects[12]);
				Set Ability Cooldown(Event Player, Button(Ability 2), 7.500);
			End;
			Event Player.is_curie_cursed = 0;
		Else If(Event Player.selected_hero_list_number && Hero Of(Event Player) == Hero(Ramattra));
			Call Subroutine(FoV_and_LoS_player_select);
			Event Player.FoV_and_lineOFsight_player.is_curie_cursed = 3;
			Event Player.FoV_and_lineOFsight_player.Curserer_master = Event Player;
			Set Ability Cooldown(Event Player, Button(Ability 2), 11);
	}
}

rule("Ozymandias and Tristan Ability 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 3);
			Chase Player Variable At Rate(Event Player, B, 20, 2.500, Destination and Rate);
			Chase Player Variable At Rate(Event Player, K, 60, 11, Destination and Rate);
			Wait Until(!Is Button Held(Event Player, Button(Ability 1)) || Is In Spawn Room(Event Player), 99999);
			Stop Chasing Player Variable(Event Player, B);
			Stop Chasing Player Variable(Event Player, K);
			Create Beam Effect(All Players(All Teams), Bad Beam, Update Every Frame(Position Of(Event Player)), Update Every Frame(
				Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 150,
				All Living Players(Opposite Team Of(Team Of(Event Player))), Event Player, True)), Color(Orange),
				Visible To Position and Radius);
			Event Player.Effects[5] = Last Created Entity;
			Event Player.ozymandias_ab1_using = True;
			Start Rule(ozymandias_ab1_loop, Restart Rule);
			"K = damage that gets created while being held"
			Wait Until(Is Dead(Event Player) || !Entity Exists(Event Player), 4);
			Event Player.ozymandias_ab1_using = False;
			Destroy Effect(Event Player.Effects[5]);
			Event Player.K = Null;
			Event Player.B = Null;
			Wait Until(Is Assembling Heroes, 1);
			Small Message(Event Player, Custom String("Laser Ready"));
		Else If(Event Player.selected_hero_list_number == 2);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Lime Green), Event Player, 3);
			Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Event Player, 100);
			Heal(Event Player, Event Player, 5 * Ultimate Charge Percent(Event Player));
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) / 1.050);
			Wait(8, Ignore Condition);
			Small Message(Event Player, Custom String("\"Shift\" is ready"));
	}
}

rule("Ozymandias ab1 damage loop  (subroutine)")
{
	event
	{
		Subroutine;
		ozymandias_ab1_loop;
	}

	actions
	{
		Call Subroutine(raycast_hit_player);
		Call Subroutine(raycast_hit_position1);
		If(Array Contains(All Heroes, Hero Of(Event Player.raycast_hit_player)));
			Damage(Event Player.raycast_hit_player, Event Player, Event Player.K / 2);
		Else;
			Damage(Players Within Radius(Event Player.raycast_hit_position, 2, Opposite Team Of(Team Of(Event Player)), Off), Event Player,
				Event Player.K / 3.100);
		End;
		Play Effect(All Players(All Teams), Good Explosion, Color(Red), Event Player.raycast_hit_position, 0.500);
		Wait(0.050, Ignore Condition);
		Abort If(!Event Player.ozymandias_ab1_using);
		Loop;
	}
}

rule("lucio lovecraft ability resource")
{
	event
	{
		Subroutine;
		lovecraft_start_resource_down;
	}

	actions
	{
		Chase Player Variable At Rate(Event Player, lovecraft_ab1_resource, False, 50, Destination and Rate);
		Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player) || Event Player.X == 1, 99999);
		Abort;
	}
}

rule("leonidas dash (subroutine)")
{
	event
	{
		Subroutine;
		leonidas_dash;
	}

	actions
	{
		If(Count Of(Players Within Radius(Event Player, 2.500, Opposite Team Of(Team Of(Event Player)), Off)) >= 1);
			Damage(Players Within Radius(Event Player, 2.500, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 75);
			Set Status(Filtered Array(Players Within Radius(Event Player, 2.500, Opposite Team Of(Team Of(Event Player)), Surfaces),
				!Has Status(Current Array Element, Knocked Down)), Null, Knocked Down, 2.500);
			Apply Impulse(Players Within Radius(Event Player, 2.500, Opposite Team Of(Team Of(Event Player)), Off), Up + Facing Direction Of(
				Event Player), 15, To World, Cancel Contrary Motion);
		End;
		Wait(0.100, Ignore Condition);
		Abort If(Event Player.W == False);
		Loop;
	}
}

rule("saber alter wind gust ab2 (subroutine)")
{
	event
	{
		Subroutine;
		saber_alter_wind_gust;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Explosion, Color(Sky Blue), Event Player.saber_wind_gust, 1);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player.saber_wind_gust, 2.500);
		Play Effect(All Players(All Teams), Bad Explosion, Color(White), Event Player.saber_wind_gust, 2.500);
		Damage(Players Within Radius(Event Player.saber_wind_gust, 5, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 40);
		For Player Variable(Event Player, for_loop, 0, Count Of(Players Within Radius(Event Player.saber_wind_gust, 5, All Teams, Off)),
			True);
			Apply Impulse(Players Within Radius(Event Player.saber_wind_gust, 5, All Teams, Off)[Event Player.for_loop], Backward, 6, To World,
				Cancel Contrary Motion);
			Wait(0.016, Ignore Condition);
		End;
		Abort If(!Is Using Ability 2(Event Player) || Event Player.saber_wind_gust == Event Player.G);
		Wait(0.100, Ignore Condition);
		Loop;
	}
}

rule("gilgamesh ab1 chain of heaven bind")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Event Player.selected_hero_list_number == 1;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player + Vector(False, True, False), 8);
		Event Player.trump_wait_middle = Players Within Radius(Event Player, 7, Opposite Team Of(Team Of(Event Player)), Surfaces);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Yellow), Players Within Radius(Event Player, 7, Opposite Team Of(
			Team Of(Event Player)), Surfaces), 1);
		Set Ability Cooldown(Event Player, Button(Ability 1), 11);
		For Player Variable(Event Player, for_loop_2, 0, Count Of(Event Player.trump_wait_middle), True);
			If(Event Player.trump_wait_middle[Event Player.for_loop_2].is_player_anchored <= 0);
				Event Player.trump_wait_middle[Event Player.for_loop_2].is_player_anchored = 60;
			Else;
				Event Player.trump_wait_middle[Event Player.for_loop_2].is_player_anchored += 30;
			End;
		End;
	}
}

rule("Moctezuma ab2 drunk area")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Event Player.selected_hero_list_number == 1;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), 8);
		Event Player.B = Array(Null, 40, 1000, 70, 160);
		Event Player.P = Players Within Radius(Event Player, 6.300, Opposite Team Of(Team Of(Event Player)), Off);
		Small Message(Event Player.P, Custom String("{0} Can't look straight", Hero Icon String(Hero(Roadhog))));
		For Player Variable(Event Player, for_loop, 0, 4, True);
			Set Aim Speed(Event Player.P, Random Value In Array(Event Player.B));
			Wait Until(Is Assembling Heroes, Random Real(0.700, 1.500));
		End;
		Wait Until(Is In Spawn Room(Event Player), 0.350);
		Set Aim Speed(Event Player.P, 100);
		Event Player.P = Empty Array;
	}
}

rule("Vlad get ult from damage || Paracelus disable ball || Medea absorb attacker ult charge (All Moira took damage)")
{
	event
	{
		Player Took Damage;
		All;
		Moira;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 1 && Event Player.vamp_absorb);
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Event Damage / 5);
			Set Ultimate Charge(Attacker, Ultimate Charge Percent(Attacker) - Event Damage / 5);
			Heal(Event Player, Event Player, Event Damage / 2);
		Else If(Event Player.selected_hero_list_number == 5);
			Event Player.was_damaged = True;
		Else If(Event Player.selected_hero_list_number == 0 && Event Player.B == True);
			Event Player.vamp_absorb += Event Damage;
			Heal(Event Player, Event Player, Event Damage / 1.600);
	}
}

rule("diermuid remove poison after death")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Event Player.selected_hero_list_number == 2;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Wait Until(!Is In Spawn Room(Event Player), 99999);
		Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player), 99999);
		For Player Variable(Event Player, for_loop, 0, Count Of(Event Player.Q), True);
			Stop Damage Over Time(Event Player.Q[Event Player.for_loop]);
			Wait(0.050, Ignore Condition);
		End;
		Stop Damage Over Time(Event Player.Q);
	}
}

rule("Moctezuma guy fall ULT (superRoutine)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.moctezuma_lifted == 2;
	}

	actions
	{
		Wait Until(Is Dead(Event Player) || Is On Ground(Event Player), 99999);
		Set Player Health(Event Player, Health(Event Player) - Max Health(Event Player) / 2 - True);
		Set Gravity(Event Player, 100);
		Event Player.moctezuma_lifted[False] = 1;
	}
}

rule("Doom Hassan of the mountain shift resource")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Moving(Event Player) == True;
		Event Player.V == True;
		Event Player.R > Null;
	}

	actions
	{
		Event Player.R -= 8.500;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("All genji damage (received)")
{
	event
	{
		Player Took Damage;
		All;
		Genji;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Event Player.selected_hero_list_number == 6;
	}

	actions
	{
		Set Status(Event Player, Null, Unkillable, 0.150);
		Heal(Event Player, Event Player, Event Damage);
		Damage(Players Within Radius(Event Player, 6, Opposite Team Of(Team Of(Event Player)), Off), Attacker, Event Damage * 3);
		Damage(Attacker, Null, Event Damage * 2);
	}
}

rule("Pharah David ULT")
{
	event
	{
		Player Dealt Knockback;
		All;
		Pharah;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
		Event Player.selected_hero_list_number == 1;
		Victim != Event Player;
	}

	actions
	{
		Set Player Health(Victim, 1);
	}
}

rule("Semiramis Ab1 go through walls || Illari Duelist Ability")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		"32.674c"
		Array Contains(Array(Hero(Ana), Hero(Illari)), Hero Of(Event Player)) == True;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Ana) && Event Player.selected_hero_list_number == 2);
			Disable Movement Collision With Environment(Event Player, False);
			Small Message(Event Player, Custom String("Ghost mode on"));
			Wait Until(Is In Spawn Room(Event Player), 6);
			Small Message(Event Player, Custom String("Ghost mode off"));
			Enable Movement Collision With Environment(Event Player);
			Set Ability Cooldown(Event Player, Button(Ability 1), 6);
		Else If(Hero Of(Event Player) == Hero(Illari) && !Event Player.selected_hero_list_number);
			Call Subroutine(FoV_and_LoS_player_select);
			Start Damage Modification(Event Player, Remove From Array(All Players(All Teams), Event Player.FoV_and_lineOFsight_player), 0,
				Receivers Damagers and Damage Percent);
			Event Player.Effects[1] = Last Damage Modification ID;
			Start Damage Modification(Event Player.FoV_and_lineOFsight_player, Remove From Array(All Players(All Teams), Event Player), 0,
				Receivers Damagers and Damage Percent);
			Event Player.Effects[2] = Last Damage Modification ID;
			Small Message(All Players(All Teams), Custom String("{0} {1} Dueling - {2}", Hero Icon String(Hero(Illari)), Event Player,
				Event Player.FoV_and_lineOFsight_player));
			Create Icon(All Players(All Teams), Event Player.FoV_and_lineOFsight_player, Recycle, Visible To and Position, Color(White),
				False);
			Event Player.Effects[3] = Last Created Entity;
			Create Icon(All Players(All Teams), Event Player, Recycle, Visible To and Position, Color(White), False);
			Event Player.Effects[4] = Last Created Entity;
			Event Player.I = True;
			Wait(0.250, Ignore Condition);
			Wait Until(Is In Spawn Room(Event Player.FoV_and_lineOFsight_player) || !Entity Exists(Event Player.FoV_and_lineOFsight_player)
				|| Is Dead(Event Player.FoV_and_lineOFsight_player) || Is Dead(Event Player) || Is Button Held(Event Player, Button(Ability 1))
				|| Is In Spawn Room(Event Player) || !Entity Exists(Event Player), 9999);
			Small Message(All Players(All Teams), Custom String("Duel Over"));
			Stop Damage Modification(Event Player.Effects[1]);
			Stop Damage Modification(Event Player.Effects[2]);
			Destroy Icon(Event Player.Effects[3]);
			Destroy Icon(Event Player.Effects[4]);
			Event Player.I = False;
			Set Ability Cooldown(Event Player, Button(Ability 1), 5);
	}
}

rule("Lucio Lovecraft resource substraction (subroutine)")
{
	event
	{
		Subroutine;
		lovecraft_ab1_resource_loop;
	}

	actions
	{
		Chase Player Variable At Rate(Event Player, lovecraft_ab1_resource, False, 45, Destination and Rate);
		Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player)
			|| Event Player.X == 1 || Event Player.lovecraft_ab1_resource == Null, 99999);
		Skip If(Event Player.lovecraft_ab1_resource >= 1, True);
		Small Message(Event Player, Custom String("Out of resource"));
		Call Subroutine(lovecraft_clear_ab1);
		Abort;
	}
}

rule("ANCHOR MESSAGE")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.is_player_anchored >= 2;
	}

	actions
	{
		Wait(1.800, Abort When False);
		Small Message(Event Player, Custom String("Pull on the chain to free yourself! {0}% trap left", Event Player.is_player_anchored));
		Loop If Condition Is True;
	}
}

rule("ANCHOR SET AND TRAP")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.is_player_anchored >= 2;
	}

	actions
	{
		Event Player.anchor_position = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Down * 50, Null,
			Event Player, False);
		Small Message(Event Player, Custom String("You've been TRAPPED"));
		Create Beam Effect(All Players(All Teams), Good Beam, Eye Position(Event Player), Event Player.anchor_position, Color(Rose),
			Visible To Position and Radius);
		Event Player.anchor_effect = Last Created Entity;
		Wait Until(Is In Spawn Room(Event Player) || Is Dead(Event Player) || Event Player.is_player_anchored < 1, 99999);
		Destroy Effect(Event Player.anchor_effect);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Rose), Event Player.anchor_position, 2);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Rose), Event Player.anchor_position, 5);
		Modify Global Variable(Spiderman_trap_list, Remove From Array By Value, Event Player);
		Event Player.is_player_anchored = 0;
	}
}

rule("ANCHOR ESCAPE")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.is_player_anchored >= 2;
		Distance Between(Position Of(Event Player), Event Player.anchor_position) >= 3.500;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Event Player, Event Player.anchor_position), 7, To World, Cancel Contrary Motion);
		Event Player.is_player_anchored -= 4;
		If(Distance Between(Position Of(Event Player), Event Player.anchor_position) > 9);
			Teleport(Event Player, Event Player.anchor_position);
		End;
		Wait(0.065, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Felix Faust ab1 (subroutine)")
{
	event
	{
		Subroutine;
		felix_faust_ab1_loop;
	}

	actions
	{
		Abort If(Event Player.is_damage_reversing == False);
		Call Subroutine(FoV_and_LoS_player_select);
		Skip If(!Entity Exists(Event Player.FoV_and_lineOFsight_player), 2);
		Start Heal Over Time(Event Player, Event Player, 2, 100);
		Damage(Event Player.FoV_and_lineOFsight_player, Event Player, 40);
		Wait(0.650, Ignore Condition);
		Loop;
	}
}

rule("Frankenstein Sec.Fire buff+nerf")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Event Player.selected_hero_list_number == 2;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		Small Message(Event Player, Custom String("Rage Mode ON"));
		Set Move Speed(Event Player, 185);
		Set Damage Received(Event Player, 50);
		Event Player.Z = True;
		Start Rule(Franken_Loop_subroutine, Restart Rule);
		Wait(0.400, Ignore Condition);
		Wait Until(Is Button Held(Event Player, Button(Secondary Fire)) || Is In Spawn Room(Event Player) || Ultimate Charge Percent(
			Event Player) <= 0, 10);
		Event Player.Z = False;
		Set Move Speed(Event Player, 110);
		Set Damage Received(Event Player, 70);
		Small Message(Event Player, Custom String("Rage Mode OFF"));
	}
}

rule("ZENYATTA tristan Sec.Fire Attack")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Event Player.selected_hero_list_number == 2;
	}

	actions
	{
		Set Ammo(Event Player, False, 999);
		Set Projectile Speed(Event Player, 100);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("GENJI Senji Muramasa damage loop")
{
	event
	{
		Subroutine;
		Muramasa_ab2_loop;
	}

	actions
	{
		Start Damage Over Time(Players Within Radius(Event Player.Z, Event Player.C, Opposite Team Of(Team Of(Event Player)),
			Surfaces And Enemy Barriers), Null, 4, Is Using Ultimate(Event Player) ? 13 : 3);
		Set Status(Players Within Radius(Event Player.Z, Event Player.C, Opposite Team Of(Team Of(Event Player)),
			Surfaces And Enemy Barriers), Event Player, Burning, 5);
		Wait(0.120, Ignore Condition);
		Abort If(!Is Using Ability 2(Event Player));
		Loop;
	}
}

rule("GENJI Saber Alter Ball damage (subroutine)")
{
	event
	{
		Subroutine;
		Saber_alter_ULT_ball;
	}

	actions
	{
		Damage(Remove From Array(Players Within Radius(Event Player.Medusa_trap, 4, All Teams, Off), Event Player), Event Player, 10);
		Wait(0.050, Ignore Condition);
		Abort If(!Is Using Ultimate(Event Player) || Is In Spawn Room(Event Player) || Is Dead(Event Player)
			|| Event Player.Medusa_trap == Event Player.T);
		Loop;
	}
}

rule("BASTION Lancelot ab1 || Turret alfred ab1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
	}

	actions
	{
		If(Event Player.selected_hero_list_number);
			Event Player.playerSpeed[False] += 20;
			Event Player.P = True;
			Create Effect(All Players(All Teams), Bad Aura, Color(Orange), Event Player, True, Visible To Position and Radius);
			Event Player.Effects[5] = Last Created Entity;
			Wait(0.350, Ignore Condition);
			Wait Until(Is Button Held(Event Player, Button(Ability 1)), 3);
			Event Player.P = Null;
			Destroy Effect(Event Player.Effects[5]);
			Event Player.playerSpeed[False] -= 20;
			Wait(7, Ignore Condition);
			Small Message(Event Player, Custom String("Shift ready"));
		Else;
			Set Damage Received(Event Player, 15);
			Wait Until(!Is Using Ability 1(Event Player), 9);
			Set Damage Received(Event Player, 70);
	}
}

rule("Solomon ab2 loop (subroutine)")
{
	event
	{
		Subroutine;
		Solomon_ab2_loop;
	}

	actions
	{
		For Player Variable(Event Player, for_loop_2, 0, Count Of(Event Player.Solomon_pillar_array), True);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Red),
				Event Player.Solomon_pillar_array[Event Player.for_loop_2] + Vector(False, 1.450, False), 5);
			Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Red),
				Event Player.Solomon_pillar_array[Event Player.for_loop_2] + Vector(False, 1.450, False), 150);
		End;
		Wait(0.150, Ignore Condition);
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 3 * Count Of(Event Player.Solomon_pillar_array) * 2);
		For Player Variable(Event Player, for_loop, 0, Count Of(Event Player.Solomon_pillar_array) - True, True);
			Damage(Players Within Radius(Event Player.Solomon_pillar_array[Event Player.for_loop], 4, Opposite Team Of(Team Of(Event Player)),
				Off), Event Player, 120);
			Heal(Event Player, Event Player, 10);
		End;
		Wait(1.250, Ignore Condition);
		Abort If(Is In Spawn Room(Event Player) || Is Dead(Event Player) || Count Of(Event Player.Solomon_pillar_array) <= 0);
		Loop;
	}
}

rule("GENJI Sasaki can only jump in air")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Event Player.selected_hero_list_number == 2;
		Is Moving(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Jump));
		Wait Until(Is Dead(Event Player) || Event Player.selected_hero_list_number != 2, 99999);
		Allow Button(Event Player, Button(Jump));
	}
}

rule("Ashe Xanzang push people away and punches anti armor (make anti armor subroutine in future)")
{
	event
	{
		Player Dealt Damage;
		All;
		Ashe;
	}

	conditions
	{
		Event Player.selected_hero_list_number == 1;
		Event Ability == Button(Melee);
	}

	actions
	{
		Damage(Victim, Event Player, Health Of Type(Victim, Armor) / 4);
		If(Event Player.J);
			Set Status(Victim, Null, Rooted, 0.800);
			Event Player.Z = Position Of(Event Player) - Vector(False, 4, False);
			Apply Impulse(Victim, Direction Towards(Position Of(Attacker), Eye Position(Victim)), 14, To World, Incorporate Contrary Motion);
	}
}

rule("Ana Semiramis Jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Jumping(Event Player) == True;
		Event Player.selected_hero_list_number == 2;
	}

	actions
	{
		Apply Impulse(Event Player, Up, 10, To World, Cancel Contrary Motion);
	}
}

rule("Ana Semiramis RightClick Anti-air projectile")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Event Player.selected_hero_list_number == 2;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Call Subroutine(FoV_and_LoS_player_select);
		Create Homing Projectile(Zarya Particle Cannon, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(
			Event Player)), 50, 1, 3, Bad Explosion, Explosion Sound, 0, 25, 13, 6, Event Player.FoV_and_lineOFsight_player, 1);
		Wait(7, Ignore Condition);
		Small Message(Event Player, Custom String("R.Click ready"));
	}
}

rule("Vlad ULT effect create loop")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Event Player.Vlad_effect_master.Z) <= 13;
		Is Alive(Event Player) == True;
		Event Player.Vlad_effect_master.Is_Using_Ultimate == True;
		Is In Line of Sight(Event Player.Vlad_effect_master.Z, Event Player, All Barriers Block LOS) == True;
		Entity Exists(Event Player.Vlad_effect_master) == True;
	}

	actions
	{
		Create Beam Effect(All Players(All Teams), Moira Orb Damage Beam, Event Player, Event Player.Vlad_effect_master.Z, Color(Team 1),
			Position and Radius);
		Event Player.blood_beam_pool = Last Created Entity;
		Wait(0.016, Ignore Condition);
		Wait Until(Is Dead(Event Player) || !Array Contains(Array(Hero(Moira)), Hero Of(Event Player.Vlad_effect_master))
			|| Event Player.Vlad_effect_master.Is_Using_Ultimate == False || Distance Between(Event Player,
			Event Player.Vlad_effect_master.Z) > 13 || !Is In Line of Sight(Event Player.Vlad_effect_master.Z, Event Player,
			All Barriers Block LOS), 10);
		Destroy Effect(Event Player.blood_beam_pool);
	}
}

rule("Mash longer range dash")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Firing Primary(Event Player) == True;
		Event Player.selected_hero_list_number == 1;
	}

	actions
	{
		Event Player.playerSpeed[False] += 145;
		Wait Until(!Is Firing Primary(Event Player), 0.090);
		Event Player.playerSpeed[False] -= 145;
	}
}

rule("Gilles ab2 (detonate the tentacles)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Event Player.selected_hero_list_number == Null;
		Event Player.delay_tagger == True;
		Event Player.C == True;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Event Player.B = True;
		For Player Variable(Event Player, for_loop_2, 0, 4, True);
			Damage(Players Within Radius(Event Player.T[Event Player.for_loop_2], 5, Opposite Team Of(Team Of(Event Player)), Off),
				Event Player, 90);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Purple), Event Player.T[Event Player.for_loop_2], 6);
			Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Purple), Event Player.T[Event Player.for_loop_2], 75);
		End;
		Event Player.B = False;
		Set Ability Cooldown(Event Player, Button(Ability 2), 5.400);
		Event Player.C = False;
		Wait(0.150, Ignore Condition);
	}
}

rule("Marie Antoinette ice slide (better and improved LOL)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Firing Primary(Event Player) == True;
		Event Player.selected_hero_list_number == Null;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Apply Impulse(Event Player, Facing Direction Of(Event Player), 22, To World, Cancel Contrary Motion XYZ);
		Wait Until(!Is Button Held(Event Player, Button(Crouch)) || !Is Firing Primary(Event Player) || Is Assembling Heroes, 99999);
		Set Gravity(Event Player, 100);
	}
}

rule("Genji Mordred disable ARMOR when armor is 0 (IF MORDRED BROKE SET BACK NULL TO FALSE CONDITIONS)")
{
	event
	{
		Player Took Damage;
		All;
		Genji;
	}

	conditions
	{
		Event Player.selected_hero_list_number == 11;
		Event Player.K == Null;
		Health(Event Player) <= 250;
		Health Of Type(Event Player, Armor) == Null;
	}

	actions
	{
		Call Subroutine(remove_mordred_armor);
	}
}

rule("RAY CAST HIT POSITION SUBROUTINE 1 (USE THIS ONE FOR TRUMP)")
{
	event
	{
		Subroutine;
		raycast_hit_position1;
	}

	actions
	{
		Event Player.raycast_lenght = 150;
		Skip If(!(Hero Of(Event Player) == Hero(Symmetra) && Event Player.selected_hero_list_number == 1), True);
		Event Player.raycast_lenght = 35;
		Skip If(!(Hero Of(Event Player) == Hero(Roadhog) && Event Player.selected_hero_list_number == Null), True);
		Event Player.raycast_lenght = 24;
		Skip If(Hero Of(Event Player) != Hero(Mercy), True);
		Event Player.raycast_lenght = 24;
		Event Player.raycast_hit_position = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * Event Player.raycast_lenght, All Living Players(All Teams), Event Player, True);
	}
}

rule("RAY CAST HIT POSITION SUBROUTINE 2")
{
	event
	{
		Subroutine;
		raycast_hit_position2;
	}

	actions
	{
		Event Player.raycast_hit_position2 = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 150, All Living Players(All Teams), Event Player, True);
	}
}

rule("RAY CAST HIT PLAYER SUBROUTINE")
{
	event
	{
		Subroutine;
		raycast_hit_player;
	}

	actions
	{
		Event Player.raycast_hit_player = Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 150, All Living Players(Hero Of(Event Player) == Hero(Reaper) ? All Teams : Opposite Team Of(Team Of(
			Event Player))), Event Player, True);
	}
}

rule("CHASE PLAYER VARIABLE OVER TIME subroutine")
{
	event
	{
		Subroutine;
		chase_player_var_time;
	}

	actions
	{
		Chase Player Variable Over Time(Event Player, chase_Variable_time, Event Player.chase_variable_destination,
			Event Player.chase_variable_duration, Destination and Duration);
	}
}

rule("CHASE PLAYER VARIABLE AT SPEED subroutine")
{
	event
	{
		Subroutine;
		chase_player_var_speed;
	}

	actions
	{
		Chase Player Variable At Rate(Event Player, chase_Variable_at_rate, Event Player.chase_variable_destination2,
			Event Player.chase_variable_rate_speed, Destination and Rate);
	}
}

rule("Manual CHU allow sec.fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Event Player.Is_Using_Ultimate == False;
		Event Player.selected_hero_list_number == Null;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
	}

	actions
	{
		Allow Button(Event Player, Button(Secondary Fire));
	}
}

rule("Hassan faster punch while ulting ALL doomfist")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		((Event Player.selected_hero_list_number == Null && Event Player.Is_Using_Ultimate) || (
			Event Player.selected_hero_list_number == 2)) == True;
	}

	actions
	{
		Wait Until(!Is Button Held(Event Player, Button(Secondary Fire)), 99999);
		Event Player.playerSpeed[False] += 220;
		"was 0.038"
		Wait(0.085, Ignore Condition);
		Event Player.playerSpeed[False] -= 220;
	}
}

rule("Asclepius damage Ab1 spin around (CAST)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Is Alive(Event Player) == True;
		Event Player.selected_hero_list_number == 3;
		Event Player.P == Null;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		Event Player.P = Eye Position(Event Player);
		Event Player.D = 20;
		Chase Player Variable At Rate(Event Player, D, 240, 30, Destination and Rate);
		Create Effect(All Players(All Teams), Sphere, Color(Purple), Update Every Frame(Event Player.P), 0.550,
			Visible To Position and Radius);
		Event Player.Effects[True] = Last Created Entity;
		Create Effect(All Players(All Teams), Bad Aura, Color(Blue), Update Every Frame(Event Player.P), 1.200,
			Visible To Position and Radius);
		Event Player.Effects[2] = Last Created Entity;
		Event Player.N = 30;
		Chase Player Variable At Rate(Event Player, N, 170, 15, Destination and Rate);
		Chase Player Variable At Rate(Event Player, P, Eye Position(Event Player) + Direction From Angles(Total Time Elapsed * 280, 0),
			1000000, Destination and Rate);
		Wait Until(Is Dead(Event Player) || Is Button Held(Event Player, Button(Primary Fire)) || Is In Spawn Room(Event Player)
			|| Event Player.P == Null, 12);
		Stop Chasing Player Variable(Event Player, N);
		Stop Chasing Player Variable(Event Player, D);
		Call Subroutine(raycast_hit_position1);
		Chase Player Variable At Rate(Event Player, P, Position Of(Event Player.raycast_hit_position), Event Player.N,
			Destination and Rate);
		Wait Until(Event Player.P == Null || Is In Spawn Room(Event Player), 99999);
		Destroy Effect(Event Player.Effects[True]);
		Destroy Effect(Event Player.Effects[2]);
		Wait(1.150, Ignore Condition);
	}
}

rule("Asclepius damage RightClick Track Target")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Using Ability 2(Event Player) == False;
		Event Player.selected_hero_list_number == 3;
		Distance Between(Event Player, Event Player.P) >= 2;
		Event Player.P != Null;
	}

	actions
	{
		Event Player.raycast_hit_position = First Of(Filtered Array(Players Within Radius(Position Of(Event Player.P), 500,
			Opposite Team Of(Team Of(Event Player)), Surfaces), Is Alive(Current Array Element) && Entity Exists(Current Array Element)
			&& !Is In Spawn Room(Current Array Element)));
		Small Message(Event Player, Event Player.raycast_hit_position);
	}
}

rule("Asclepius damage Pr. fire (END)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))) == True;
		Is Using Ability 2(Event Player) == False;
		Event Player.selected_hero_list_number == 3;
		Event Player.P != Null;
	}

	actions
	{
		Wait Until(Is In Spawn Room(Event Player) || Event Player.P == Null || Distance Between(Event Player.P,
			Event Player.raycast_hit_position) <= 0 || Count Of(Players Within Radius(Event Player.P, 3, Opposite Team Of(Team Of(
			Event Player)), Surfaces)) > 0, 99999);
		Stop Chasing Player Variable(Event Player, P);
		Destroy Effect(Event Player.Effects[True]);
		Destroy Effect(Event Player.Effects[2]);
		Damage(Remove From Array(Players Within Radius(Event Player.P, 3, All Teams, Surfaces), Event Player), Event Player,
			Event Player.D);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Purple), Event Player.P, 3);
		Event Player.P = Null;
	}
}

rule("Asclepius damage Pr. fire call to change target")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.selected_hero_list_number == 3;
		Event Player.P != Null;
	}

	actions
	{
		Call Subroutine(raycast_hit_position1);
	}
}

rule("Hassan of the great hand sneaky ab2 (reworked)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Event Player.selected_hero_list_number == Null;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), 6);
		Call Subroutine(FoV_and_LoS_player_select);
		Event Player.Medea_rule_breaker = Event Player;
		Event Player.has_soul = Event Player.FoV_and_lineOFsight_player;
		If(Entity Exists(Event Player.FoV_and_lineOFsight_player));
			Call Subroutine(Auto_tracking_variable_Rule);
			Damage(Event Player.FoV_and_lineOFsight_player, Event Player, Distance Between(Event Player, Position Of(
				Event Player.FoV_and_lineOFsight_player)) <= 1 ? 85 : 0);
			Press Button(Event Player, Button(Melee));
			Wait(0.090, Ignore Condition);
			Apply Impulse(Event Player, Facing Direction Of(Event Player) * -1, 1, To World, Cancel Contrary Motion XYZ);
	}
}

rule("Avicebron fireStrike Rein")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Entity Exists(Event Player.G) == True;
		Event Player.selected_hero_list_number == 4;
	}

	actions
	{
		Set Ability Cooldown(Event Player.G, Button(Ability 2), False);
		Allow Button(Event Player.G, Button(Ability 2));
		Stop Facing(Event Player.G);
		Start Facing(Event Player.G, Direction Towards(Event Player.G, Filtered Array(Player Closest To Reticle(Event Player,
			Opposite Team Of(Team Of(Event Player))), Is In Line of Sight(Event Player.G, Current Array Element,
			Barriers Do Not Block LOS))), 10000, To World, Direction and Turn Rate);
		Wait(0.150, Ignore Condition);
		Press Button(Event Player.G, Button(Ability 2));
		Wait(0.550, Ignore Condition);
		Wait(6, Ignore Condition);
		Small Message(Event Player, Custom String("Rein FireStrike ready"));
	}
}

rule("Love craft clear effects and stuff AB1")
{
	event
	{
		Subroutine;
		lovecraft_clear_ab1;
	}

	actions
	{
		Event Player.X = 1;
		Destroy Effect(Event Player.Effects[True]);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 100);
		Set Invisible(Event Player, None);
		Clear Status(Event Player, Unkillable);
		Set Move Speed(Event Player, 135);
		Stop Damage Modification(Event Player.Effects[3]);
		Chase Player Variable At Rate(Event Player, lovecraft_ab1_resource, 100, 16.500, Destination and Rate);
	}
}

rule("Ereshkigal Ab2 USE")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Event Player.selected_hero_list_number == 1;
	}

	actions
	{
		Allow Button(Event Player, Button(Secondary Fire));
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait Until(Is Assembling Heroes, 3.500);
		Disallow Button(Event Player, Button(Secondary Fire));
		Wait Until(Is Assembling Heroes, 3);
		Small Message(Event Player, Custom String("Ability 2 available"));
	}
}

rule("Hanzo EMYIA clear shield (subroutine)")
{
	event
	{
		Subroutine;
		emyia_clear_shield;
	}

	actions
	{
		Clear Status(Event Player, Unkillable);
		Destroy Effect(First Of(Event Player.Effects));
		Destroy Effect(Event Player.Effects[True]);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Event Player, 2);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Red), Event Player, 100);
		Event Player.H = Null;
		Event Player.T = False;
		Event Player.X = False;
		Set Ability Cooldown(Event Player, Button(Ability 1), 15);
	}
}

rule("Roadhog Caesar ULT push upwards")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Vertical Facing Angle Of(Event Player) > 45;
		Event Player.selected_hero_list_number == Null;
	}

	actions
	{
		Apply Impulse(Event Player, Facing Direction Of(Event Player) * -1, 10, To Player, Cancel Contrary Motion);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Roadhog Caesar Primary Fire Throw People")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Event Player.selected_hero_list_number == Null;
		Event Player.V != Null;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Start Rule(caesar_melee_cooldown, Restart Rule);
		Wait Until(Is Firing Primary(Event Player) || Is Dead(Event Player) || Is In Spawn Room(Event Player) || Event Player.was_damaged,
			6);
		Detach Players(Event Player.V);
		Apply Impulse(Event Player.V, Facing Direction Of(Event Player), 280, To World, Cancel Contrary Motion);
		Clear Status(Event Player.V, Phased Out);
		Wait(0.450, Ignore Condition);
		Clear Status(Event Player.V, Knocked Down);
		Event Player.V = Null;
	}
}

rule("Baptiste Starlin single fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Cancel Primary Action(Event Player);
	}
}

rule("roadhog caesar cooldown after pickup")
{
	event
	{
		Subroutine;
		caesar_melee_cooldown;
	}

	actions
	{
		Disallow Button(Event Player, Button(Melee));
		Wait Until(Event Player.V == Null || Is In Spawn Room(Event Player), 3);
		Wait Until(Is In Spawn Room(Event Player), 10);
		Allow Button(Event Player, Button(Melee));
		Small Message(Event Player, Custom String("Pickup ready"));
	}
}

rule("Bug fix for people leaving time stop")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	actions
	{
		Set Slow Motion(100);
	}
}

rule("ENABLE ALL BUTTONS SUBROUTINE")
{
	event
	{
		Subroutine;
		Enable_Buttons_sub;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Set Projectile Gravity(Event Player, 100);
		Set Projectile Speed(Event Player, 100);
		Set Jump Vertical Speed(Event Player, 100);
		Allow Button(Event Player, Button(Jump));
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Allow Button(Event Player, Button(Ability 2));
		Allow Button(Event Player, Button(Ability 1));
		Allow Button(Event Player, Button(Ultimate));
		Allow Button(Event Player, Button(Crouch));
		Allow Button(Event Player, Button(Melee));
		Allow Button(Event Player, Button(Interact));
		Allow Button(Event Player, Button(Reload));
		Wait(0.100, Ignore Condition);
	}
}

rule("Tracer King Crimson set effects on person")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Tracer);
		Event Ability == Button(Melee);
		Attacker.Is_Using_Ultimate != True;
	}

	actions
	{
		Event Player.is_tracer_marked[False] = True;
		Skip If(Array Contains(Attacker.B, Victim), 6);
		Create Effect(All Players(All Teams), Ring, Color(Red), Victim, 1.500, Visible To Position and Radius);
		Event Player.is_tracer_marked[1] = Last Created Entity;
		Create Icon(All Players(All Teams), Victim + Vector(False, 2, False), Fire, Visible To and Position, Color(Red), True);
		Event Player.is_tracer_marked[2] = Last Created Entity;
		Modify Player Variable(Attacker, B, Append To Array, Victim);
		Small Message(Victim, Custom String("{0} Marked", Hero Icon String(Hero(Tracer))));
		Wait Until(Is Dead(Event Player) || !Entity Exists(Attacker) || !Entity Exists(Event Player) || !Event Player.is_tracer_marked,
			99999);
		Destroy Effect(Event Player.is_tracer_marked[1]);
		Destroy Icon(Event Player.is_tracer_marked[2]);
		Wait(6, Ignore Condition);
	}
}

rule("Tracer King Crimson ab2 early detonate bombs")
{
	event
	{
		Ongoing - Each Player;
		All;
		Tracer;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Event Player.Is_Using_Ultimate != True;
	}

	actions
	{
		Set Status(Event Player.B, Event Player, Rooted, 0.800);
		Damage(Event Player.B, Event Player, 105);
		Call Subroutine(Tracer_trigger);
	}
}

rule("Tracer subroutine trigger detonate")
{
	event
	{
		Subroutine;
		Tracer_trigger;
	}

	actions
	{
		For Player Variable(Event Player, for_loop, 0, Count Of(Event Player.B), True);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Event Player.B[Event Player.for_loop], 3);
			Event Player.B[Event Player.for_loop].is_tracer_marked[False] = False;
		End;
		Event Player.B = Empty Array;
	}
}

rule("William Tell ab1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Event Player.selected_hero_list_number == 3;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Stunned) == False;
		Has Status(Event Player, Knocked Down) == False;
	}

	actions
	{
		Event Player.playerSpeed[False] += 45;
		Set Gravity(Event Player, 35);
		Call Subroutine(raycast_hit_position2);
		Create Beam Effect(All Players(All Teams), Bad Beam, Event Player, Event Player.raycast_hit_position2, Color(Black),
			Visible To Position and Radius);
		Event Player.Effects[5] = Last Created Entity;
		Start Accelerating(Event Player, Direction Towards(Event Player, Event Player.raycast_hit_position2), 25, 10, To World,
			Direction Rate and Max Speed);
		Start Rule(mei_spiderwoman_loop, Restart Rule);
		Wait(0.250, Ignore Condition);
		Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player) || Is Button Held(Event Player, Button(Ability 1))
			|| Has Status(Event Player, Knocked Down) || Distance Between(Event Player, Event Player.raycast_hit_position2)
			<= 3 || Distance Between(Event Player, Event Player.raycast_hit_position2) >= 30, 5);
		Destroy Effect(Event Player.Effects[5]);
		Event Player.playerSpeed[False] -= 45;
		Stop Accelerating(Event Player);
		Set Gravity(Event Player, 100);
		Set Ability Cooldown(Event Player, Button(Ability 1), 7);
	}
}

rule("William Tell subroutine")
{
	event
	{
		Subroutine;
		mei_spiderwoman_loop;
	}

	actions
	{
		Apply Impulse(Event Player, Facing Direction Of(Event Player), 1.500, To World, Incorporate Contrary Motion);
		Wait(0.100, Ignore Condition);
		Loop If(Ability Cooldown(Event Player, Button(Ability 1)) != Null);
	}
}

rule("Great Orisa super dash ab2 (damage)")
{
	event
	{
		Player Dealt Damage;
		All;
		Orisa;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		Set Status(Victim, Event Player, Frozen, 0.300);
		Apply Impulse(Victim, Direction Towards(Event Player - Vector(False, 0.500, False), Victim), 26, To World, Cancel Contrary Motion);
	}
}

rule("King Crimson Sec.Fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Ability Resource(Event Player, Button(Secondary Fire)) >= 99;
		Event Player.A == False;
		Event Player.Is_Using_Ultimate == False;
		Event Player.selecting_HUD == False;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("{0} Dodging enemy attacks", Hero Icon String(Hero Of(Event Player))));
		Event Player.S = True;
		Set Status(Event Player, Event Player, Phased Out, 3);
		Create Effect(All Players(All Teams), Sphere, Color(Red), Update Every Frame(Event Player), 2, Visible To Position and Radius);
		Event Player.Effects[True] = Last Created Entity;
		Set Ability Resource(Event Player, Button(Secondary Fire), False);
		Disallow Button(Event Player, Button(Secondary Fire));
		Set Move Speed(Event Player, 200);
		Wait Until(Is Dead(Event Player), 3);
		Set Move Speed(Event Player, 135);
		Destroy Effect(Event Player.Effects[True]);
		Event Player.S = False;
		Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player) || Ability Resource(Event Player, Button(Secondary Fire)) >= 99,
			99999);
		Allow Button(Event Player, Button(Secondary Fire));
	}
}

rule("King Crimson Ab1 become invisible")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Event Player.Is_Using_Ultimate == False;
		Is In Alternate Form(Event Player) == False;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("{0} Hiding...", Hero Icon String(Hero Of(Event Player))));
		Call Subroutine(destroy_nameONplayer);
		Disallow Button(Event Player, Button(Secondary Fire));
		Event Player.A = True;
		Set Ability Cooldown(Event Player, Button(Ability 1), 12);
		Set Invisible(Event Player, All);
		Disallow Button(Event Player, Button(Primary Fire));
		Set Gravity(Event Player, False);
		Start Heal Over Time(Event Player, Event Player, 2.350, 150);
		Wait Until(Is Dead(Event Player), 3);
		Set Gravity(Event Player, 100);
		Set Invisible(Event Player, None);
		Allow Button(Event Player, Button(Primary Fire));
		Event Player.A = False;
		Allow Button(Event Player, Button(Secondary Fire));
		Call Subroutine(create_nameONplayer);
	}
}

rule("Symmetra Gordon Freeman RightClick to pick up enemy || Sherlock Holmes shoot healing")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 2);
			Event Player.R = Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player)
				* 16, All Players(Opposite Team Of(Team Of(Event Player))), Event Player, True);
			Call Subroutine(raycast_hit_position1);
			Create Beam Effect(All Players(All Teams), Good Beam, Event Player, Event Player.raycast_hit_position, Color(Blue), None);
			Event Player.Effects[True] = Last Created Entity;
			Create Effect(All Players(All Teams), Sphere, Color(Blue), Event Player.raycast_hit_position, 0.450, None);
			Event Player.Effects[5] = Last Created Entity;
			Wait(0.100, Ignore Condition);
			Destroy Effect(Event Player.Effects[True]);
			Destroy Effect(Event Player.Effects[5]);
			If(Array Contains(All Living Players(Opposite Team Of(Team Of(Event Player))), Event Player.R));
				Set Damage Received(Event Player.R, 10);
				Disallow Button(Event Player, Button(Primary Fire));
				Small Message(All Players(All Teams), Custom String("{0} got attached!!", Event Player.R));
				Event Player.B = True;
				Start Rule(float_enemy_subroutine, Restart Rule);
				Attach Players(Event Player.R, Event Player, Vector(0, 1, 4));
				Create Beam Effect(All Players(All Teams), Good Beam, Event Player, Event Player.R, Color(Blue), Visible To Position and Radius);
				Event Player.Effects[6] = Last Created Entity;
				Wait Until(Is Button Held(Event Player, Button(Primary Fire)) || Is Dead(Event Player) || Is In Spawn Room(Event Player)
					|| Event Player.was_damaged, 6);
				Detach Players(Event Player.R);
				Apply Impulse(Event Player.R, Facing Direction Of(Event Player), 60, To World, Cancel Contrary Motion);
				Event Player.B = False;
				Allow Button(Event Player, Button(Primary Fire));
				Destroy Effect(Event Player.Effects[6]);
				Set Damage Received(Event Player.R, 70);
			End;
			Wait Until(Is Dead(Event Player), 12);
			Small Message(Event Player, Custom String("{0} Can pick-up now", Hero Icon String(Hero Of(Event Player))));
		Else If(Event Player.selected_hero_list_number == 3);
			Create Homing Projectile(Baptiste Biotic Launcher, Event Player, Null, Null, To World, Heal, Team Of(Event Player), 85, 1, 4,
				Baptiste Biotic Launcher Explosion Effect, Explosion Sound, 0.050, 25, 11, 0, Player Closest To Reticle(Event Player, Team Of(
				Event Player)), 1);
			Set Ammo(Event Player, 0, Ammo(Event Player, 0) - 25);
			Wait(1.500, Ignore Condition);
	}
}

rule("King Crimson ULT Kill people")
{
	event
	{
		Player Dealt Damage;
		All;
		D.Va;
	}

	conditions
	{
		Event Player.Is_Using_Ultimate == True;
		Event Ability == Button(Ability 1);
	}

	actions
	{
		Kill(Victim, Event Player);
	}
}

rule("No clip LOOP")
{
	event
	{
		Subroutine;
		float_player_above_level;
	}

	actions
	{
		Start Accelerating(Event Player, Is Button Held(Event Player, Button(Crouch)) ? Down : Up, 100, Is True For Any(Array(Button(Jump),
			Button(Crouch)), Is Button Held(Event Player, Current Array Element)) ? 3 : 1.400, To World, Direction Rate and Max Speed);
		Wait Until(!Event Player.N || Is In Spawn Room(Event Player), 99999);
		Stop Accelerating(Event Player);
	}
}

rule("Symmetra AA mine ability 2")
{
	event
	{
		Subroutine;
		Symmetra_AA_mine;
	}

	actions
	{
		Event Player.G = Filtered Array(All Living Players(Opposite Team Of(Team Of(Event Player))), Distance Between(Position Of(
			Current Array Element) * Vector(1, 0, 1), Position Of(Event Player.X) * Vector(1, 0, 1)) <= 20 && Altitude Of(
			Current Array Element) > Altitude Of(Event Player.X));
		Event Player.L = Filtered Array(Event Player.G, Team Of(Current Array Element) == Team Of(Event Player));
		Apply Impulse(Event Player.G, Down, 150, To World, Cancel Contrary Motion);
		Damage(Remove From Array(Event Player.G, Event Player.L), Event Player, 80);
		Set Status(Remove From Array(Event Player.G, Event Player.L), Null, Rooted, 0.700);
		Wait(0.650, Ignore Condition);
		Abort If(!Event Player.X || Is In Spawn Room(Event Player));
		Loop;
	}
}

rule("Create Name above player head (used for invisibility abilities)")
{
	event
	{
		Subroutine;
		create_nameONplayer;
	}

	actions
	{
		Create In-World Text(Hero Of(Event Player) != Hero(Doomfist) ? All Players(All Teams) : Remove From Array(All Players(All Teams),
			Event Player.hassan_near_sight_list), Event Player.Selected_Hero[Event Player.selected_hero_list_number],
			Event Player + Vector(False, 1.750, False), True, Clip Against Surfaces, Visible To Position and String, Color(White),
			Default Visibility);
		Event Player.in_world_text[False] = Last Text ID;
		Abort;
	}
}

rule("Destroy name above player head (used for invisibility abilities)")
{
	event
	{
		Subroutine;
		destroy_nameONplayer;
	}

	actions
	{
		Destroy In-World Text(Event Player.in_world_text[False]);
		Abort;
	}
}

rule("Junker queen faster with ab2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junker Queen;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.playerSpeed[False] += 135;
		Wait Until(!Is Using Ability 2(Event Player), 5);
		Event Player.playerSpeed[False] -= 135;
	}
}

rule("Genji jack the ripper double dash")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Event Player.selected_hero_list_number == 1;
	}

	actions
	{
		Wait Until(!Is Using Ability 1(Event Player), 99999);
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Wait(3, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 1), 5);
	}
}

rule("WreckingBall fireStack")
{
	event
	{
		Player Dealt Damage;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Event Ability == Button(Primary Fire);
		First Of(Event Player.Mahito_Transfigured) == False;
	}

	actions
	{
		Start Damage Over Time(Victim, Event Player, 3, 5);
	}
}

rule("WreckingBall ab2 unkillable")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Unkillable, 3);
	}
}

rule("Winston all powerUps")
{
	event
	{
		Player Dealt Damage;
		All;
		Winston;
	}

	actions
	{
		If(Event Ability == Button(Secondary Fire));
			Start Heal Over Time(Event Player, Event Player, 2.150, Event Damage * 1.650);
		Else If(Event Ability == Button(Ultimate));
			Damage(Victim, Null, 150);
			Set Ultimate Charge(Victim, Ultimate Charge Percent(Victim) - Ultimate Charge Percent(Victim) / 5);
	}
}

rule("TORB invincible ab2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Torbjörn;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Event Player.selected_hero_list_number == 0;
	}

	actions
	{
		Set Status(Event Player, Event Player, Unkillable, 999);
		Wait Until(!Is Using Ability 2(Event Player), 99999);
		Clear Status(Event Player, Unkillable);
	}
}

rule("JUNKRAT all damage to, the fall damage AND Trap make you 50%")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Junkrat);
	}

	actions
	{
		If(Event Ability == Button(Ability 1) && Hero Of(Event Player) != Hero(Junkrat));
			Attacker.F[Slot Of(Event Player)] = 0;
			Wait Until(Is In Air(Event Player), 99999);
			While(Is In Air(Event Player));
				If(Altitude Of(Event Player) >= Attacker.F[Slot Of(Event Player)]);
					Attacker.F[Slot Of(Event Player)] = Altitude Of(Event Player);
				End;
				Wait(0.100, Ignore Condition);
			End;
			Small Message(Event Player, Custom String("Fall damage {0}", Attacker.F[Slot Of(Event Player)] * 13));
			Damage(Event Player, Attacker, 14 * Attacker.F[Slot Of(Event Player)]);
		Else If(Event Ability == Button(Ability 2));
			Set Player Health(Event Player, Health(Event Player) / 2);
	}
}

rule("Torb hammer higurama")
{
	event
	{
		Player Dealt Damage;
		All;
		Torbjörn;
	}

	conditions
	{
		Event Ability == Button(Primary Fire);
		Weapon(Event Player) == 2;
		Event Player.selected_hero_list_number == 1;
	}

	actions
	{
		Apply Impulse(Victim, Direction Towards(Event Player, Eye Position(Victim)), 6, To World, Cancel Contrary Motion);
		Damage(Victim, Event Player, 120);
	}
}

rule("Rammatra ULT life steal and Punch unkillable status")
{
	event
	{
		Player Dealt Damage;
		All;
		Ramattra;
	}

	actions
	{
		If(!Event Player.selected_hero_list_number);
			If(Event Ability == Button(Ability 1));
				Set Status(Event Player, Null, Unkillable, 2.500);
				Damage(Victim, Event Player, 30);
			Else If(Event Ability == Button(Ultimate));
				Heal(Event Player, Event Player, Event Damage * 3);
			End;
		Else;
			If(Array Contains(Array(Button(Ability 1), Button(Melee)), Event Ability));
				Victim.is_curie_cursed += 1;
				Victim.Curserer_master = Event Player;
	}
}

rule("Soujourn chain enemy with ab2")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Sojourn);
	}

	actions
	{
		If(Event Ability == Button(Ability 2));
			Event Player.is_player_anchored = 40;
			Wait(3, Ignore Condition);
	}
}

rule("Soujourn dash invinci + heal")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sojourn;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Unkillable, 1.100);
		Start Heal Over Time(Event Player, Event Player, 2, 85);
		Wait Until(!Is Using Ability 1(Event Player), 99999);
	}
}

rule("zarya passive ult steal and choso")
{
	event
	{
		Player Dealt Damage;
		All;
		Zarya;
	}

	actions
	{
		If(!Event Player.selected_hero_list_number);
			Heal(Event Player, Event Player, Event Damage);
			If(Event Ability != Button(Secondary Fire));
				If(Ultimate Charge Percent(Victim) > 1);
					Set Ultimate Charge(Victim, Ultimate Charge Percent(Victim) - Event Damage / 8);
					Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Event Damage / 20);
				End;
			Else;
				Set Status(Victim, Null, Rooted, 1.550);
				Set Ammo(Event Player, 0, 0);
			End;
		Else;
			If(Event Ability == Button(Melee));
				Start Heal Over Time(Event Player, Event Player, 2, Event Damage * 2);
				Damage(Victim, Event Player, 80);
	}
}

rule("Kiriko ab2 heal + ult buff")
{
	event
	{
		Player Dealt Healing;
		All;
		Kiriko;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		If(Event Player.selected_hero_list_number);
			Healee.is_healing_cursed = False;
			Healee.is_player_anchored = 0;
			Healee.healthpack_cursed[0] = False;
		Else;
			Start Heal Over Time(Healee, Event Player, 1, 155);
			Set Ultimate Charge(Healee, Ultimate Charge Percent(Healee) + 15);
			Wait(3, Ignore Condition);
	}
}

rule("Kiriko Headshot Buff || Nanami Passive")
{
	event
	{
		Player Dealt Damage;
		All;
		Kiriko;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 0);
			If(Event Was Critical Hit);
				Start Heal Over Time(Event Player, Event Player, 1.200, 85);
				If(Event Player.Is_Using_Ultimate);
					Damage(Victim, Event Player, 100000);
				End;
			End;
		Else;
			Skip If(Team Score(Opposite Team Of(Team Of(Event Player))) <= Team Score(Team Of(Event Player)), 1);
			Damage(Victim, Event Player, 35 * (Team Score(Opposite Team Of(Team Of(Event Player))) - Team Score(Team Of(Event Player))));
			If(Distance Between(Event Player, Victim) >= 3 && Distance Between(Event Player, Victim) <= 7);
				Damage(Victim, Event Player, Event Damage * 3);
				Small Message(Event Player, Custom String("7-3 Crit"));
			End;
		End;
		Wait(0.250, Ignore Condition);
	}
}

rule("Iskandar nerf so only 1 charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Wait(0.250, Restart When True);
		Set Ability Charge(Event Player, Button(Ability 2), 0);
		Set Ability Cooldown(Event Player, Button(Ability 2), 11);
	}
}

rule("Auto Tracking Variable Subroutine for Hassan DOOM and Hp Lovecraft Lucio")
{
	event
	{
		Subroutine;
		Auto_tracking_variable_Rule;
	}

	actions
	{
		Event Player.hokusai_check_teleport = Position Of(Event Player.Medea_rule_breaker);
		Start Forcing Player Position(Event Player.Medea_rule_breaker, Event Player.hokusai_check_teleport, True);
		Chase Player Variable At Rate(Event Player, hokusai_check_teleport, Position Of(Event Player.has_soul), 75, Destination and Rate);
		Wait Until(Distance Between(Event Player.Medea_rule_breaker, Position Of(Event Player.has_soul)) <= 1 || !Is In Line of Sight(
			Event Player, Event Player.has_soul, Barriers Do Not Block LOS), 2);
		Stop Chasing Player Variable(Event Player, hokusai_check_teleport);
		Stop Forcing Player Position(Event Player.Medea_rule_breaker);
	}
}

rule("Franken Loop for sec.fire (subroutine)")
{
	event
	{
		Subroutine;
		Franken_Loop_subroutine;
	}

	actions
	{
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) - 1);
		Wait(0.100, Ignore Condition);
		Abort If(Event Player.Z == False);
		Loop;
	}
}

rule("Rule for detecting invincibility")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Has Status(Event Player, Unkillable) || Has Status(Event Player, Invincible) || Has Status(Event Player, Phased Out)) == True;
	}

	actions
	{
		Create Effect(All Players(All Teams), Baptiste Immortality Field Protected Effect, Color(White), Event Player, 1,
			Visible To Position and Radius);
		Event Player.moctezuma_lifted[True] = Last Created Entity;
		Wait Until(!(Has Status(Event Player, Invincible) || Has Status(Event Player, Unkillable) || Has Status(Event Player, Phased Out)
			|| Is In Spawn Room(Event Player)), 99999);
		Destroy Effect(Event Player.moctezuma_lifted[True]);
	}
}

rule("Rule for detecting damage reversal")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.is_damage_reversing == True;
	}

	actions
	{
		Create Effect(All Players(All Teams), Echo Cloning Effect, Color(Team 2), Event Player, 1, Visible To Position and Radius);
		Event Player.moctezuma_lifted[2] = Last Created Entity;
		Wait Until(!Event Player.is_damage_reversing, 99999);
		Destroy Effect(Event Player.moctezuma_lifted[2]);
	}
}

rule("Rule for detecting healing disabled")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.is_healing_cursed == True;
	}

	actions
	{
		Destroy Effect(Event Player.delay_tagger[3]);
		Set Healing Received(Event Player, 1);
		Create Effect(All Players(All Teams), Ana Biotic Grenade No Healing Effect, Color(Team 2), Event Player, 1,
			Visible To Position and Radius);
		Event Player.delay_tagger[3] = Last Created Entity;
		Wait Until(!Event Player.is_healing_cursed, 99999);
		Destroy Effect(Event Player.delay_tagger[3]);
		Set Healing Received(Event Player, 100);
	}
}

rule("WreckingBall absorb/reverse damage effect while ab2 active")
{
	event
	{
		Player Took Damage;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Event Player.Mahito_Transfigured == False;
	}

	actions
	{
		Heal(Event Player, Event Player, Event Damage * (1.800 - Distance Between(Event Player, Attacker) / 10));
		Wait(0.016, Ignore Condition);
	}
}

rule("Merlin and Queen Elisabeth LifeWeaver ab2 Lock Hp")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lifeweaver;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		If(Event Player.selected_hero_list_number);
			Call Subroutine(FoV_and_LoS_player_select);
			Small Message(Event Player.FoV_and_lineOFsight_player, Custom String("{0} You have no control", Hero Icon String(Hero(
				Lifeweaver))));
			Set Status(Event Player.FoV_and_lineOFsight_player, Null, Hacked, 4);
			Start Transforming Throttle(Event Player.FoV_and_lineOFsight_player, True, True, World Vector Of(Backward,
				Event Player.FoV_and_lineOFsight_player, Rotation));
			Wait Until(Is In Spawn Room(Event Player), 4);
			Stop Transforming Throttle(Event Player.FoV_and_lineOFsight_player);
			Set Ability Cooldown(Event Player, Button(Ability 2), 10);
		Else;
			Event Player.M = Filtered Array(All Living Players(All Teams), Array Contains(All Heroes, Hero Of(Current Array Element)));
			For Player Variable(Event Player, for_loop_2, 0, Count Of(Event Player.M), True);
				Event Player.H[Event Player.for_loop_2] = Health(Event Player.M[Event Player.for_loop_2]);
			End;
			Event Player.Is_Using_Ultimate = True;
			Small Message(All Players(All Teams), Custom String("{0} Health Locked in", Hero Icon String(Hero Of(Event Player))));
			Wait Until(Is In Spawn Room(Event Player) || Event Player.Is_Using_Ultimate == False, 6);
			Event Player.Is_Using_Ultimate = False;
			For Player Variable(Event Player, for_loop_2, 0, Count Of(Event Player.M), True);
				If(Is Dead(Event Player.M[Event Player.for_loop_2]) && Event Player.H[Event Player.for_loop_2] >= 1);
					Resurrect(Event Player.M[Event Player.for_loop_2]);
				End;
				Set Player Health(Event Player.M[Event Player.for_loop_2], Event Player.H[Event Player.for_loop_2]);
			End;
			Set Ability Cooldown(Event Player, Button(Ability 2), 25);
			Small Message(All Players(All Teams), Custom String("{0} Health Reverted", Hero Icon String(Hero Of(Event Player))));
	}
}

rule("Merlin ab1 escape")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lifeweaver;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Event Player.selected_hero_list_number == False;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 1), 9);
		Call Subroutine(destroy_nameONplayer);
		Small Message(Event Player, Custom String("Invisibile"));
		Set Invisible(Event Player, Enemies);
		Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player), 2.500);
		Set Invisible(Event Player, None);
		Small Message(Event Player, Custom String("Visibile"));
		Call Subroutine(create_nameONplayer);
	}
}

rule("Lancelot ab2 2/2 (slow damage reversal)")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Victim) == Hero(Bastion);
		Victim.selected_hero_list_number == 1;
		Victim.P == True;
	}

	actions
	{
		Damage(Event Player, Null, 50);
		Event Player.playerSpeed[False] -= 80;
		Wait Until(Is In Spawn Room(Event Player), 3);
		Wait(0.016, Ignore Condition);
		Event Player.playerSpeed[False] += 80;
	}
}

rule("ULTIMATE ENDER RULE")
{
	event
	{
		Subroutine;
		ultimate_ender;
	}

	actions
	{
		Wait Until(Event Player.Is_Using_Ultimate == True, 7);
		Wait Until(Is Dead(Event Player) || !Entity Exists(Event Player) || Is In Spawn Room(Event Player)
			|| !Event Player.Is_Using_Ultimate, 8.250);
		Event Player.Is_Using_Ultimate = False;
	}
}

rule("Kiriko Speed Boost ab1 when no player")
{
	event
	{
		Ongoing - Each Player;
		All;
		Kiriko;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Is Using Ability 1(Event Player) == False;
		Is In Spawn Room(Event Player) == False;
		Event Player.selected_hero_list_number == False;
	}

	actions
	{
		Event Player.playerSpeed[False] += 55;
		Wait(0.800, Ignore Condition);
		Event Player.playerSpeed[False] -= 55;
		Wait(2, Ignore Condition);
	}
}

rule("Tracer trigger clean")
{
	event
	{
		Ongoing - Each Player;
		All;
		Tracer;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		Wait Until(Is In Spawn Room(Event Player), 99999);
		Call Subroutine(Tracer_trigger);
	}
}

rule("Junker Queen Uber heal ult")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Junker Queen);
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Start Heal Over Time(Attacker, Event Player, 4, 150);
		Start Damage Over Time(Event Player, Attacker, 4, 60);
		Wait(5, Ignore Condition);
	}
}

rule("Mauga dmg while E buff lifesteal and  Dash of mauga cancel ults")
{
	event
	{
		Player Dealt Damage;
		All;
		Mauga;
	}

	actions
	{
		If(Is Using Ability 2(Event Player));
			Heal(Event Player, Event Player, Event Damage * 0.800);
		End;
		If(Event Ability == Button(Ability 1));
			Cancel Primary Action(Victim);
			Victim.Is_Using_Ultimate = False;
			Set Status(Victim, Null, Rooted, 2.300);
			Set Ability Cooldown(Victim, Button(Ability 1), Ability Cooldown(Victim, Button(Ability 1)) + 2);
			Set Ability Cooldown(Victim, Button(Ability 2), Ability Cooldown(Victim, Button(Ability 2)) + 2);
	}
}

rule("Area Casting Animation Subroutine")
{
	event
	{
		Subroutine;
		Area_Casting_Animation;
	}

	actions
	{
		For Player Variable(Event Player, for_loop_2, 0, 3, True);
			Play Effect(All Players(All Teams), Ring Explosion, Event Player.color, Event Player.raycast_hit_position + Vector(False, 2,
				False), 9);
			Play Effect(All Players(All Teams), Ring Explosion, Event Player.color, Event Player.raycast_hit_position, 15);
			Wait(0.590, Ignore Condition);
		End;
	}
}

rule("Select player in Field of view and line of sight Subroutine")
{
	event
	{
		Subroutine;
		FoV_and_LoS_player_select;
	}

	actions
	{
		Event Player.FoV_and_lineOFsight_player = First Of(Filtered Array(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(
			Event Player))), Is In View Angle(Event Player, Current Array Element, 60) && Is In Line of Sight(Event Player,
			Current Array Element, Barriers Do Not Block LOS) && Is Alive(Current Array Element)));
	}
}

rule("Rammatra curse variable set for damage heal and 3s slow")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.is_curie_cursed >= 3;
	}

	actions
	{
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Purple), Event Player, 1.500);
		Start Heal Over Time(Event Player.Curserer_master, Event Player, 4, 95);
		Start Damage Over Time(Event Player, Null, 3, 40);
		Event Player.B_3 = Event Player.playerSpeed[False] / 2.500;
		Event Player.playerSpeed[False] -= Event Player.B_3;
		Wait(3, Ignore Condition);
		Event Player.playerSpeed[False] += Event Player.B_3;
		Event Player.is_curie_cursed = 0;
	}
}

rule("Select the furthest living rein mininon (AVICEBRON CODE)")
{
	event
	{
		Subroutine;
		Farthest_solomon_array_minion;
	}

	actions
	{
		Modify Player Variable(Event Player, Solomon_pillar_array, Remove From Array By Value, Filtered Array(
			Event Player.Solomon_pillar_array, !Entity Exists(Current Array Element)));
		Event Player.G = Last Of(Sorted Array(Event Player.Solomon_pillar_array, Distance Between(Event Player, Current Array Element)));
	}
}

rule("Reaper set lower HP")
{
	event
	{
		Subroutine;
		reaper_set_lower_HP;
	}

	actions
	{
		Set Player Health(Event Player, Health(Event Player) - 5);
		Set Player Health(Event Player.P, Health(Event Player.P) + 3.600);
		Wait(0.100, Ignore Condition);
		Loop If(Event Player.G);
	}
}

rule("Reaper clone for Henri Sanson dead freeze trigger || Illari Get HP after killing Her Dueling player or Astolfo increase life (final b­low)")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	actions
	{
		If(Is Dummy Bot(Victim) && Hero Of(Victim) == Hero(Reaper) && Victim.solomon_master.selected_hero_list_number);
			Set Status(Event Player, Null, Frozen, 3);
		Else If(Hero Of(Event Player) == Hero(Illari) && Event Player.I && Victim == Event Player.FoV_and_lineOFsight_player);
			Small Message(Event Player, Custom String("Duel Won"));
			Start Heal Over Time(Event Player, Event Player, 3, 999);
			Wait(0.100, Ignore Condition);
			Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Else If(Hero Of(Event Player) == Hero(Brigitte));
			If(Event Player.selected_hero_list_number == 2);
				Event Player.Q += 35;
				Set Max Health(Event Player, Event Player.Q);
			Else If(Event Player.selected_hero_list_number == 4);
				Skip If(Event Player.K < 2, 1);
				Set Ability 1 Enabled(Event Player, False);
				Skip If(Event Player.K >= 5, 2);
				Event Player.K += 1;
				Call Subroutine(level_up_call_subroutine);
	}
}

rule("Stop healing over time bug when HP = max hp")
{
	event
	{
		Subroutine;
		stop_healing_over_time;
	}

	actions
	{
		Wait Until(Health(Event Player) == Max Health(Event Player), 99999);
		Stop Heal Over Time(Event Player.heal_over_time);
	}
}

rule("Winston Slow AoE ability (Subroutine)")
{
	event
	{
		Subroutine;
		winston_AoE_slow;
	}

	actions
	{
		Event Player.W = Remove From Array(Filtered Array(All Living Players(All Teams), Distance Between(Event Player,
			Current Array Element) <= 13), Event Player);
		Event Player.L = Filtered Array(Event Player.W, Team Of(Current Array Element) == Team Of(Event Player));
		Remove From Array(Event Player.W, Event Player.L).playerSpeed[False] -= 20;
		Disallow Button(Event Player.W, Button(Jump));
		Wait(3, Ignore Condition);
		Allow Button(Event Player.W, Button(Jump));
		Remove From Array(Event Player.W, Event Player.L).playerSpeed[False] += 20;
		Abort If(Is In Spawn Room(Event Player));
		Loop;
	}
}

rule("Rein Mahoraga if attacker, decide what do with damage")
{
	event
	{
		Player Took Damage;
		All;
		Reinhardt;
	}

	conditions
	{
		Event Player.selected_hero_list_number == 5;
		Is Dummy Bot(Event Player) == False;
		Entity Exists(Attacker) == True;
	}

	actions
	{
		Set Player Health(Event Player, Health(Event Player) + Event Damage * Event Player.A[Slot Of(Attacker) + 5]);
	}
}

rule("create_dummy_of_EventPlayer subroutine")
{
	event
	{
		Subroutine;
		create_dummy_of_EventPlayer;
	}

	actions
	{
		Create Dummy Bot(Hero Of(Event Player), Team Of(Event Player), -3, Event Player, Forward);
		Last Created Entity.solomon_master = Event Player;
		Modify Player Variable(Event Player, Solomon_pillar_array, Append To Array, Last Created Entity);
		Abort;
	}
}

rule("Anti-spawn ULT check against Avicebron and Jehsus Exploit")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		Wait Until(Is In Spawn Room(Event Player), 99999);
		If((Hero Of(Event Player) == Hero(Baptiste) && !Event Player.selected_hero_list_number) || (Hero Of(Event Player) == Hero(
			Reinhardt) && Event Player.selected_hero_list_number == 4));
			Set Ultimate Charge(Event Player, 0);
	}
}

rule("ULTIMATE SETUP #1: Sojourn, Ana, Lucio, Illari, Hanzo, Pharah, Baptiste, Kiriko, LifeWeaver, WreckingBall, Zarya, Torbjorn, Tracer, D.va, Junkrat, Orisa, Ashe, Zenyatta, Sombra")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		((Is Button Held(Event Player, Button(Ultimate)) && Ultimate Charge Percent(Event Player) == 100) || Is Using Ultimate(
			Event Player)) == True;
		Is Alive(Event Player) == True;
		Is In Spawn Room(Event Player) == False;
		Array Contains(Global.Global_ULTButton_1, Hero Of(Event Player)) == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Sojourn));
			Small Message(All Players(All Teams), Custom String("{0} Let the Rain Fall", Hero Icon String(Hero Of(Event Player))));
			Event Player.W = Filtered Array(Players Within Radius(Event Player, 100, Opposite Team Of(Team Of(Event Player)), Off), Is Alive(
				Current Array Element) && !Is In Spawn Room(Current Array Element));
			For Player Variable(Event Player, for_loop, 0, 10, 1);
				Event Player.G = Event Player.W;
				For Player Variable(Event Player, for_loop_2, 0, Count Of(Event Player.W), 1);
					Event Player.H = Random Value In Array(Event Player.G);
					Create Homing Projectile(Pharah Rocket, Event Player, Null, Up, To World, Damage, Opposite Team Of(Team Of(Event Player)), 50, 1,
						3.500, Bad Explosion, Explosion Sound, 0.010, 14, 15, 0, Event Player.H, 1);
					Modify Player Variable(Event Player, G, Remove From Array By Value, Event Player.H);
					Wait(0.100, Ignore Condition);
				End;
				Wait(0.076, Ignore Condition);
			End;
			Wait(3, Ignore Condition);
		Else If(Hero Of(Event Player) == Hero(Ana));
			If(Event Player.selected_hero_list_number == Null);
				Set Ultimate Charge(Event Player, 0);
				Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Sky Blue), Event Player, 1);
				Play Effect(All Players(All Teams), Buff Impact Sound, Color(Sky Blue), Event Player, 300);
				Event Player.Is_Using_Ultimate = True;
				Create Effect(All Players(All Teams), Bad Aura, Color(Blue), Event Player, True, Visible To Position and Radius);
				Event Player.Effects[9] = Last Created Entity;
				Wait Until(Is Firing Primary(Event Player) || !Event Player.Is_Using_Ultimate, 99999);
				Destroy Effect(Event Player.Effects[9]);
				Disallow Button(Event Player, Button(Primary Fire));
				Wait(1.250, Ignore Condition);
				Allow Button(Event Player, Button(Primary Fire));
				Event Player.Is_Using_Ultimate = False;
			Else If(Event Player.selected_hero_list_number == 1);
				Call Subroutine(raycast_hit_position1);
				Create Effect(All Players(All Teams), Ring, Color(Green), Event Player.raycast_hit_position, 9, Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Event Player.color = Color(Green);
				Call Subroutine(Area_Casting_Animation);
				Heal(Players Within Radius(Event Player.raycast_hit_position, 9, Team Of(Event Player), Off), Event Player, 500);
				Play Effect(All Players(All Teams), Bad Explosion, Color(Green), Event Player.raycast_hit_position + Vector(False, True, False),
					9);
				Play Effect(All Players(All Teams), Good Explosion, Color(Red), Event Player.raycast_hit_position + Vector(False, True, False), 9);
				Damage(Players Within Radius(Event Player.raycast_hit_position, 9, Opposite Team Of(Team Of(Event Player)), Off), Event Player,
					350);
				Start Damage Over Time(Players Within Radius(Event Player.raycast_hit_position, 9, Opposite Team Of(Team Of(Event Player)), Off),
					Event Player, 5, 28);
				Set Status(Players Within Radius(Event Player.raycast_hit_position, 9, Opposite Team Of(Team Of(Event Player)), Off), Event Player,
					Burning, 5);
				Destroy Effect(Event Player.Effects[True]);
			Else If(Event Player.selected_hero_list_number == 2);
				Set Ultimate Charge(Event Player, 0);
				Event Player.J = True;
				Apply Impulse(Event Player, Up, 20, To World, Cancel Contrary Motion);
				Wait Until(Is Assembling Heroes || Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(
					Jump)), 99999);
				Event Player.J = False;
				Start Forcing Player Position(Event Player, Position Of(Event Player), True);
				Wait(0.100, Ignore Condition);
				Stop Forcing Player Position(Event Player);
				Set Gravity(Event Player, False);
				Start Forcing Throttle(Event Player, False, False, False, False, False, False);
				Create Beam Effect(All Players(All Teams), Good Beam, Update Every Frame(Position Of(Event Player)), Update Every Frame(
					Eye Position(Event Player) + Facing Direction Of(Event Player) * 150), Color(Green), Visible To Position and Radius);
				Event Player.Effects[4] = Last Created Entity;
				Event Player.Is_Using_Ultimate = True;
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate);
					Call Subroutine(raycast_hit_position1);
					Damage(Players Within Radius(Event Player.raycast_hit_position, 3, Opposite Team Of(Team Of(Event Player)), Off), Event Player,
						18);
					Play Effect(All Players(All Teams), Echo Sticky Bomb Explosion Effect, Color(Lime Green), Event Player.raycast_hit_position, 1);
					Wait(0.050, Ignore Condition);
				End;
				Set Gravity(Event Player, 100);
				Destroy Effect(Event Player.Effects[4]);
				Stop Forcing Throttle(Event Player);
				Stop Forcing Player Position(Event Player);
			End;
		Else If(Hero Of(Event Player) == Hero(Illari));
			If(Event Player.selected_hero_list_number == Null);
				Call Subroutine(raycast_hit_position1);
				Event Player.color = Color(Yellow);
				Damage(Players Within Radius(Event Player.raycast_hit_position, 10, Opposite Team Of(Team Of(Event Player)), Off), Event Player,
					25);
				Call Subroutine(Area_Casting_Animation);
				Play Effect(All Players(All Teams), Bad Explosion, Color(Black), Event Player.raycast_hit_position, 20);
				Damage(Players Within Radius(Event Player.raycast_hit_position, 10, Opposite Team Of(Team Of(Event Player)), Off), Event Player,
					215);
			End;
		Else If(Hero Of(Event Player) == Hero(Lúcio));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.Is_Using_Ultimate = True;
				Call Subroutine(raycast_hit_position2);
				Create Effect(All Players(All Teams), Ring, Color(Yellow), Event Player.raycast_hit_position2, 8, Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Create Icon(All Players(All Teams), Event Player.raycast_hit_position2 + Vector(False, 2, False), Warning, Visible To and Position,
					Color(White), False);
				Event Player.Effects[2] = Last Created Entity;
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate);
					Modify Player Variable(Event Player, R, Append To Array, Players Within Radius(Event Player.raycast_hit_position2, 8,
						Opposite Team Of(Team Of(Event Player)), Surfaces));
					Event Player.P = Filtered Array(Event Player.R, Distance Between(Current Array Element, Event Player.raycast_hit_position2) > 8);
					Modify Player Variable(Event Player, R, Remove From Array By Value, Event Player.P);
					Set Move Speed(Event Player.R, 60);
					Set Damage Received(Event Player.R, 110);
					Set Damage Received(Event Player.P, 70);
					Event Player.P.playerSpeed[False] += 0.100;
					Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player.raycast_hit_position2, 8);
					Damage(Event Player.R, Event Player, 70);
					Wait(0.800, Ignore Condition);
				End;
				Set Damage Received(Event Player.R, 70);
				Event Player.R.playerSpeed[False] += 0.500;
				Destroy Effect(Event Player.Effects[True]);
				Destroy Icon(Event Player.Effects[2]);
			Else If(Event Player.selected_hero_list_number == 1);
				Create Dummy Bot(Hero(Lúcio), Team Of(Event Player), -1, Event Player, Facing Direction Of(Event Player));
				Event Player.Medea_rule_breaker = Last Created Entity;
				Call Subroutine(FoV_and_LoS_player_select);
				Event Player.has_soul = Event Player.FoV_and_lineOFsight_player;
				Wait(1, Ignore Condition);
				Call Subroutine(Auto_tracking_variable_Rule);
				Skip If(Is Dead(Event Player.Medea_rule_breaker), 4);
				Damage(Players Within Radius(Event Player.Medea_rule_breaker, 4, Opposite Team Of(Team Of(Event Player)),
					Surfaces And Enemy Barriers), Event Player, 300);
				Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Lime Green), Event Player.Medea_rule_breaker, 5);
				Set Status(Players Within Radius(Event Player.Medea_rule_breaker, 5, Opposite Team Of(Team Of(Event Player)), Off), Event Player,
					Knocked Down, 3);
				Wait(0.350, Ignore Condition);
				Kill(Event Player.Medea_rule_breaker, Null);
				Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player.Medea_rule_breaker));
			End;
		Else If(Hero Of(Event Player) == Hero(Hanzo));
			If(Event Player.selected_hero_list_number == 2);
				Event Player.T = Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)));
				If(Is In Line of Sight(Event Player, Event Player.T, Barriers Do Not Block LOS));
					Small Message(All Players(All Teams), Custom String("{0} You cannot escape my sight", Hero Icon String(Hero Of(Event Player))));
					Create Beam Effect(All Players(All Teams), Good Beam, Event Player, Event Player.T, Color(Sky Blue), None);
					Event Player.Effects[4] = Last Created Entity;
					Damage(Players Within Radius(Event Player.T, 4, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 200);
					Wait(0.100, Ignore Condition);
					Destroy Effect(Event Player.Effects[4]);
					While(Count Of(Filtered Array(Players Within Radius(Last Of(Event Player.T), 100, Opposite Team Of(Team Of(Event Player)),
						Surfaces), Is Alive(Current Array Element))) > 1);
						Event Player.T = Sorted Array(Filtered Array(Players Within Radius(Event Player.T, 100, Opposite Team Of(Team Of(Event Player)),
							Surfaces), Is Alive(Current Array Element)), Distance Between(Current Array Element, Event Player.T));
						For Player Variable(Event Player, for_loop_2, 0, Count Of(Event Player.T), 1);
							Skip If(!Entity Exists(Event Player.T[Event Player.for_loop_2 + 1]), 2);
							Create Beam Effect(All Players(All Teams), Bad Beam, Event Player.T[Event Player.for_loop_2],
								Event Player.T[Event Player.for_loop_2 + 1], Color(Aqua), Visible To Position and Radius);
							Event Player.Effects[1] = Last Created Entity;
							Damage(Event Player.T[Event Player.for_loop_2], Event Player, 125);
							Wait(0.125, Ignore Condition);
							Destroy Effect(Event Player.Effects[1]);
						End;
						Wait(0.125, Ignore Condition);
						Event Player.T = Last Of(Filtered Array(Event Player.T, Is Alive(Current Array Element) && Entity Exists(Current Array Element)));
					End;
					Wait(0.100, Ignore Condition);
				Else;
					Event Player.T = Empty Array;
					Small Message(Event Player, Custom String("Enemy is behind a wall"));
				End;
			Else If(Event Player.selected_hero_list_number == 0);
				Set Ultimate Charge(Event Player, False);
				Small Message(All Players(All Teams), Custom String("{0} UNLIMITED BLADE WORKS", Hero Icon String(Hero(Hanzo))));
				"variable used for unlimited blade works trap"
				Event Player.E = Position Of(Event Player);
				Wait(0.500, Ignore Condition);
				Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Eye Position(Event Player), 7);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Orange), Event Player.E, 150);
				Wait(0.500, Ignore Condition);
				Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Eye Position(Event Player), 10);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Orange), Event Player.E, 210);
				Wait(0.500, Ignore Condition);
				Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Eye Position(Event Player), 15);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Orange), Event Player.E, 300);
				Create Effect(All Players(All Teams), Sphere, Color(Orange), Event Player.E, 20, None);
				Event Player.Effects[5] = Last Created Entity;
				Event Player.Is_Using_Ultimate = True;
				"players inside UBW"
				Event Player.M = Players Within Radius(Event Player.E, 20, All Teams, Off);
				"Targets inside"
				Event Player.M.Emiya_master = Event Player;
				Call Subroutine(ultimate_ender);
				Destroy Effect(Event Player.Effects[5]);
				"Targets inside"
				Event Player.M.Emiya_master = Null;
				"players inside UBW"
				Event Player.M = Null;
				Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 200);
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.Is_Using_Ultimate = True;
				Add Health Pool To Player(Event Player, Armor, 2000, False, True);
				Call Subroutine(raycast_hit_position2);
				Create Beam Effect(All Players(All Teams), Bad Beam, Position Of(Event Player), Event Player.raycast_hit_position2, Color(Red),
					Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Create Effect(All Players(All Teams), Sphere, Color(Red), Event Player.raycast_hit_position2, 15, Visible To Position and Radius);
				Event Player.Effects[2] = Last Created Entity;
				Set Status(Event Player, Event Player, Frozen, 3);
				Set Status(Event Player, Null, Burning, 0.400);
				For Player Variable(Event Player, for_loop, 0, 3, True);
					Wait(0.700, Ignore Condition);
					Set Status(Event Player, Null, Burning, 0.400);
				End;
				Kill(Remove From Array(Players Within Radius(Event Player.raycast_hit_position2, 15, All Teams, Off), Event Player), Event Player);
				Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Event Player.raycast_hit_position2 + Vector(False, True, False),
					7);
				Play Effect(All Players(All Teams), Sombra EMP Explosion Effect, Color(Team 2), Event Player.raycast_hit_position2 + Vector(False,
					True, False), 10);
				Play Effect(All Players(All Teams), Sombra EMP Explosion Effect, Color(Team 1), Event Player.raycast_hit_position2 + Vector(False,
					True, False), 15);
				Destroy Effect(Event Player.Effects[True]);
				Destroy Effect(Event Player.Effects[2]);
				Event Player.Is_Using_Ultimate = False;
				Set Ultimate Charge(Event Player, False);
			Else If(Event Player.selected_hero_list_number == 3);
				Event Player.Is_Using_Ultimate = True;
				Small Message(All Players(All Teams), Custom String("{0} METEOR SHOWER!!!", Hero Icon String(Hero Of(Event Player))));
				Call Subroutine(raycast_hit_position2);
				Create Effect(All Players(All Teams), Sphere, Color(Purple), Event Player.raycast_hit_position2, 38,
					Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Start Rule(atalante_ultimate_loop, Restart Rule);
				Call Subroutine(ultimate_ender);
				Event Player.Is_Using_Ultimate = False;
				Destroy Effect(Event Player.Effects[True]);
			Else If(Event Player.selected_hero_list_number == 4);
				Create Projectile(Moira Damage Orb, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 1500, 1,
					3, Bad Explosion, Explosion Sound, 0.025, 13, 15, 15, 20, 0);
				Create Effect(All Players(All Teams), Bad Aura, Color(Gray), Event Player, True, Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Wait Until(Is Assembling Heroes, 1);
				Destroy Effect(Event Player.Effects[True]);
			Else If(Event Player.selected_hero_list_number == 5);
				Clear Status(Event Player, Hacked);
				Clear Status(Event Player, Stunned);
				Clear Status(Event Player, Frozen);
				Clear Status(Event Player, Asleep);
				Clear Status(Event Player, Knocked Down);
				Wait(0.300, Ignore Condition);
				Create Effect(All Players(All Teams), Bad Aura, Color(Blue), Event Player, True, Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Press Button(Event Player, Button(Ultimate));
				Clear Status(Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)), 95), Invincible);
				Wait Until(Is Assembling Heroes, 4);
				Destroy Effect(Event Player.Effects[True]);
			Else If(Event Player.selected_hero_list_number == 6);
				Create Effect(All Players(All Teams), Bad Aura, Color(Sky Blue), Event Player, True, Visible To Position and Radius);
				Event Player.Effects[3] = Last Created Entity;
				Wait Until(Is Button Held(Event Player, Button(Primary Fire)) || Is Dead(Event Player) || Is In Spawn Room(Event Player), 99999);
				Call Subroutine(raycast_hit_position2);
				Set Ultimate Charge(Event Player, 0);
				Create Beam Effect(All Players(All Teams), Bad Beam, Event Player, Event Player.raycast_hit_position2, Color(Sky Blue),
					Visible To Position and Radius);
				Event Player.Effects[6] = Last Created Entity;
				Play Effect(All Players(All Teams), Tracer Recall Reappear Effect, Color(White), Event Player.raycast_hit_position2, 4);
				Play Effect(All Players(All Teams), Ring Explosion, Color(White), Event Player.raycast_hit_position2 + Vector(False, 2.700, False),
					4);
				Respawn(Players Within Radius(Event Player.raycast_hit_position2, 4, All Teams, Off));
				Wait(0.500, Ignore Condition);
				Destroy Effect(Event Player.Effects[6]);
				Destroy Effect(Event Player.Effects[3]);
			End;
		Else If(Hero Of(Event Player) == Hero(Pharah));
			If(Event Player.selected_hero_list_number == Null);
				Small Message(All Players(All Teams), Custom String("{0} Behold me and be obliterated", Hero Icon String(Hero Of(Event Player))));
				Event Player.C = Null;
				Chase Player Variable Over Time(Event Player, C, 18, 3.350, Destination and Duration);
				Event Player.Moving_ball_array = Color(White);
				Set Gravity(Event Player, 25);
				Set Status(Event Player, Event Player, Frozen, 4);
				Call Subroutine(raycast_hit_position1);
				Create Effect(All Players(All Teams), Sphere, Event Player.Moving_ball_array, Event Player.raycast_hit_position,
					Update Every Frame(Event Player.C), Visible To Position Radius and Color);
				Event Player.Effects[True] = Last Created Entity;
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player.raycast_hit_position, 560);
				Wait(1.110, Ignore Condition);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player.raycast_hit_position, 560);
				Event Player.Moving_ball_array = Color(Blue);
				Wait(1.110, Ignore Condition);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player.raycast_hit_position, 560);
				Event Player.Moving_ball_array = Color(Yellow);
				Wait(1.130, Ignore Condition);
				Destroy Effect(Event Player.Effects[True]);
				Play Effect(All Players(All Teams), Good Explosion, Color(White), Event Player.raycast_hit_position, 16);
				Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player.raycast_hit_position, 1000);
				Create Effect(All Players(All Teams), Light Shaft, Color(Rose), Event Player.raycast_hit_position, 18,
					Visible To Position and Radius);
				Event Player.Effects[2] = Last Created Entity;
				Damage(Remove From Array(Players Within Radius(Event Player.raycast_hit_position, 18, All Teams, Off), Event Player), Event Player,
					9999);
				Wait(0.500, Ignore Condition);
				Destroy Effect(Event Player.Effects[2]);
				Stop Chasing Player Variable(Event Player, C);
				Event Player.C = Null;
			Else If(Event Player.selected_hero_list_number == 1);
				Allow Button(Event Player, Button(Ability 2));
				Event Player.Is_Using_Ultimate = True;
				Set Projectile Speed(Event Player, 170);
				Disallow Button(Event Player, Button(Primary Fire));
				Set Ability Cooldown(Event Player, Button(Ability 2), 0);
				Press Button(Event Player, Button(Ability 2));
				Wait Until(!Event Player.Is_Using_Ultimate, 0.350);
				Allow Button(Event Player, Button(Primary Fire));
				Set Projectile Speed(Event Player, 105);
				Event Player.Is_Using_Ultimate = False;
				Disallow Button(Event Player, Button(Ability 2));
				Wait(0.250, Ignore Condition);
				Set Ability Cooldown(Event Player, Button(Ability 2), 0);
			End;
		Else If(Hero Of(Event Player) == Hero(Baptiste));
			If(Event Player.selected_hero_list_number == Null);
				If(Event Player.Holy_heal == True);
					Start Heal Over Time(Event Player.Jehsus_protected_player, Event Player, 5, 200);
					Set Status(Event Player.Jehsus_protected_player, Null, Unkillable, 4);
					Small Message(Array(Event Player, Event Player.Jehsus_protected_player), Custom String("{0} Protecting my friend",
						Hero Icon String(Hero(Baptiste))));
				Else;
					If(Count Of(Filtered Array(Remove From Array(All Living Players(Team Of(Event Player)), Event Player), Has Spawned(
						Current Array Element) && !Is In Spawn Room(Current Array Element))) > 0);
						Event Player.Jehsus_protected_player = Player Closest To Reticle(Event Player, Team Of(Event Player));
						Event Player.Holy_heal = True;
						Event Player.Jehsus_protected_player.jehsus_master = Event Player;
						Event Player.Jehsus_protected_player.Holy_heal = True;
						Start Rule(baptiste_ult_subroutine, Do Nothing);
					Else;
						Event Player.Is_Using_Ultimate = True;
						Set Status(Event Player, Null, Unkillable, 1.500);
						Set Move Speed(Event Player, 350);
						Set Damage Received(Event Player, 50);
						Set Damage Dealt(Event Player, 620);
						Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(Team 2), Event Player, True, Visible To Position and Radius);
						Event Player.Effects[True] = Last Created Entity;
						Wait Until(Is In Spawn Room(Event Player) || Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(
							Event Player, Stunned) || Has Status(Event Player, Asleep) || Has Status(Event Player, Knocked Down)
							|| Event Player.Is_Using_Ultimate == False, 12);
						Set Ultimate Charge(Event Player, False);
						Set Move Speed(Event Player, 135);
						Set Damage Received(Event Player, 70);
						Set Damage Dealt(Event Player, 255);
						Destroy Effect(Event Player.Effects[True]);
						Event Player.Is_Using_Ultimate = False;
					End;
				End;
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.Is_Using_Ultimate = True;
				Create Effect(All Players(All Teams), Bad Aura, Color(Orange), Event Player, True, Visible To Position and Radius);
				Event Player.Effects[3] = Last Created Entity;
				Small Message(All Players(All Teams), Custom String("{0} All of OUR HP is mine", Hero Icon String(Hero Of(Event Player))));
				While(Is Alive(Event Player) && Event Player.Is_Using_Ultimate && Ultimate Charge Percent(Event Player) > 0);
					Damage(Remove From Array(Filtered Array(Players in View Angle(Event Player, All Teams, 60), Is In Line of Sight(Event Player,
						Current Array Element, Barriers Do Not Block LOS)), Event Player), Null, 10);
					Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) - 2);
					Wait(0.100, Ignore Condition);
				End;
				Destroy Effect(Event Player.Effects[3]);
				Event Player.Is_Using_Ultimate = False;
			End;
		Else If(Hero Of(Event Player) == Hero(Kiriko));
			If(!Event Player.selected_hero_list_number);
				Small Message(All Players(All Teams), Custom String("{0} Bullet Time", Hero Icon String(Hero Of(Event Player))));
				Event Player.Is_Using_Ultimate = True;
				Set Slow Motion(10);
				Wait(0.300, Ignore Condition);
				Set Slow Motion(100);
				Wait Until(!Event Player.Is_Using_Ultimate || Is Firing Secondary(Event Player), 9999);
				Wait(0.250, Ignore Condition);
				Event Player.Is_Using_Ultimate = False;
				Small Message(Event Player, Custom String("{0} Ultimate Over", Hero Icon String(Hero(Kiriko))));
				Set Ultimate Charge(Event Player, Random Value In Array(Array(0, 100)));
			End;
		Else If(Hero Of(Event Player) == Hero(Wrecking Ball));
			Event Player.A = Players Within Radius(Event Player, 10, Opposite Team Of(Team Of(Event Player)), Off);
			Set Status(Event Player.A, Event Player, Rooted, 2);
			Teleport(Event Player.A, Event Player);
			Wait Until(!Is Using Ultimate(Event Player), 99999);
		Else If(Hero Of(Event Player) == Hero(Lifeweaver));
			If(Event Player.selected_hero_list_number);
				Event Player.Is_Using_Ultimate = True;
				Big Message(All Players(All Teams), Custom String("{0} Healing Reversed", Hero Icon String(Hero(Lifeweaver))));
				Event Player.C = Filtered Array(All Living Players(Opposite Team Of(Team Of(Event Player))), !Is In Spawn Room(
					Current Array Element));
				Event Player.C.healthpack_cursed[1] = Event Player;
				Event Player.C.healthpack_cursed[4] = True;
				Set Status(Event Player, Null, Unkillable, 3);
				Call Subroutine(ultimate_ender);
				Event Player.C.healthpack_cursed[4] = False;
			Else;
				Event Player.N = All Living Players(Team Of(Event Player));
				Event Player.N.is_healing_cursed = False;
				Event Player.N.playerSpeed[False] += 35;
				Start Heal Over Time(Event Player.N, Event Player, 3, 120);
				Event Player.N.is_healing_cursed = False;
				Event Player.N.is_player_anchored = 0;
				Event Player.N.healthpack_cursed[0] = False;
				For Player Variable(Event Player, for_loop, 0, Count Of(Event Player.N), True);
					Play Effect(All Players(All Teams), Good Pickup Effect, Color(Rose), Event Player.N[Event Player.for_loop], 1);
					Set Ultimate Charge(Event Player.N[Event Player.for_loop], Ultimate Charge Percent(Event Player.N[Event Player.for_loop]) + 30);
					"before it was using garden_value as *0.15"
					Add Health Pool To Player(Event Player.N[Event Player.for_loop], Health, Max Health(Event Player.N[Event Player.for_loop]) * 0.150,
						True, False);
				End;
				Wait Until(Is In Spawn Room(Event Player), 3);
				Event Player.N.playerSpeed[False] -= 35;
				Press Button(Event Player, Button(Ultimate));
			End;
		Else If(Hero Of(Event Player) == Hero(Zarya));
			If(Event Player.selected_hero_list_number);
				Event Player.Is_Using_Ultimate = True;
				Create Effect(All Players(All Teams), Bad Aura, Color(Red), Event Player, 1, Visible To Position and Radius);
				Event Player.Effects[4] = Last Created Entity;
				Event Player.H = Normalized Health(Event Player);
				Set Max Health(Event Player, 200);
				Wait(0.050, Ignore Condition);
				Set Player Health(Event Player, Event Player.H * Max Health(Event Player));
				Small Message(Event Player, Custom String("FLOWING DRAGON ACTIVE"));
				Call Subroutine(ultimate_ender);
				Set Max Health(Event Player, 155);
				Destroy Effect(Event Player.Effects[4]);
			Else;
				Create Dummy Bot(Hero Of(Event Player), Team Of(Event Player), -1, Event Player, Event Player);
				Event Player.Solomon_pillar_array = Last Created Entity;
				Small Message(All Players(All Teams), Custom String("10 seconds to kill both Zarya"));
				Disable Built-In Game Mode Respawning(Event Player);
				Wait Until(Is Dead(Event Player) && (Is Dead(Event Player.Solomon_pillar_array) || !Entity Exists(
					Event Player.Solomon_pillar_array)), 10);
				Skip If(Is Dead(Event Player) && (Is Dead(Event Player.Solomon_pillar_array) || !Entity Exists(Event Player.Solomon_pillar_array)),
					4);
				Resurrect(Event Player);
				Set Ammo(Event Player, 0, 600);
				Set Damage Dealt(Event Player, 625);
				Start Heal Over Time(Event Player, Event Player, 5, 9999);
				Small Message(All Players(All Teams), Custom String("Unlucky, one of them is alive"));
				Enable Built-In Game Mode Respawning(Event Player);
				Wait Until(Is In Spawn Room(Event Player), 6.500);
				Set Damage Dealt(Event Player, 100);
				Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player.Solomon_pillar_array));
				Event Player.Solomon_pillar_array = Null;
			End;
		Else If(Hero Of(Event Player) == Hero(Torbjörn));
			If(Event Player.selected_hero_list_number == 0);
				Disallow Button(Event Player, Button(Primary Fire));
				Set Damage Dealt(Event Player, 750);
				Set Damage Received(Event Player, 10);
				Wait(6, Ignore Condition);
				Set Damage Dealt(Event Player, 100);
				Set Damage Received(Event Player, 100);
				Allow Button(Event Player, Button(Primary Fire));
			Else;
				Call Subroutine(FoV_and_LoS_player_select);
				Event Player.C = Array(Event Player, Event Player.FoV_and_lineOFsight_player);
				Event Player.C.B = Array(Custom String("rock"), Custom String("paper"), Custom String("Scissors"));
				Small Message(Event Player.C, Custom String("Pr.Fire = Rock, Sec.Fire = Paper, Melee = Scissors"));
				Set Status(Event Player.C, Null, Unkillable, 5);
				Wait(1, Ignore Condition);
				Event Player.C.Choice_rock_paper_scissors = -1;
				Set Status(Event Player.C, Null, Frozen, 5);
				Wait Until(Is True For All(Event Player.C, Current Array Element.Choice_rock_paper_scissors != -1), 5.100);
				Clear Status(Event Player.C, Unkillable);
				Event Player.Snow_protection_active = (
					Event Player.Choice_rock_paper_scissors - Event Player.FoV_and_lineOFsight_player.Choice_rock_paper_scissors + 3) % 3;
				If(Event Player.Snow_protection_active == 1);
					Kill(Event Player.FoV_and_lineOFsight_player, Event Player.FoV_and_lineOFsight_player);
					Small Message(Event Player, Custom String("won"));
				Else If(Event Player.Snow_protection_active == 2);
					Kill(Event Player, Event Player);
					Small Message(Event Player, Custom String("lost"));
				End;
			End;
		Else If(Hero Of(Event Player) == Hero(Tracer));
			Event Player.Is_Using_Ultimate = True;
			Small Message(All Players(All Teams), Custom String("{0} CAN'T DODGE THIS", Hero Icon String(Hero Of(Event Player))));
			Wait(2.500, Ignore Condition);
			Damage(Event Player.B, Event Player, 550);
			Call Subroutine(Tracer_trigger);
			Event Player.Is_Using_Ultimate = False;
		Else If(Hero Of(Event Player) == Hero(D.Va) && !Is In Alternate Form(Event Player) && !Event Player.A && !Event Player.S);
			Create Effect(All Players(All Teams), Bad Aura, Color(Red), Event Player, 3, Visible To Position and Radius);
			Event Player.Effects[2] = Last Created Entity;
			Set Ability Cooldown(Event Player, Button(Ability 1), 0);
			Small Message(All Players(All Teams), Custom String("{0} TIME FOR A JUMP", Hero Icon String(Hero Of(Event Player))));
			Set Move Speed(Event Player, False);
			Allow Button(Event Player, Button(Ability 1));
			Press Button(Event Player, Button(Ability 1));
			Set Status(Event Player, Null, Phased Out, 1);
			Wait(1.150, Ignore Condition);
			Event Player.Is_Using_Ultimate = True;
			Set Move Speed(Event Player, 350);
			Wait Until(!Is Using Ability 1(Event Player), 3);
			Event Player.Is_Using_Ultimate = False;
			Destroy Effect(Event Player.Effects[2]);
			Set Move Speed(Event Player, 135);
			Disallow Button(Event Player, Button(Ability 1));
		Else If(Hero Of(Event Player) == Hero(Junkrat));
			Small Message(All Players(All Teams), Custom String("{0} Floor is NOT Lava", Hero Icon String(Hero(Junkrat))));
			Event Player.Is_Using_Ultimate = True;
			For Player Variable(Event Player, for_loop, 0, 75, 1);
				Event Player.U = Filtered Array(All Living Players(Opposite Team Of(Team Of(Event Player))), !Is On Ground(Current Array Element));
				Damage(Event Player.U, Event Player, 12);
				Set Status(Event Player.U, Null, Burning, 1);
				Wait(0.100, Ignore Condition);
				Abort If(!Event Player.Is_Using_Ultimate);
			End;
			Event Player.Is_Using_Ultimate = False;
		Else If(Hero Of(Event Player) == Hero(Orisa));
			If(Event Player.selected_hero_list_number == 0);
				Set Projectile Speed(Event Player, 10000);
				Set Ultimate Charge(Event Player, False);
				Create Effect(All Players(All Teams), Sphere, Color(Orange), Update Every Frame(Position Of(Event Player)), 8,
					Visible To Position and Radius);
				Event Player.Effects[2] = Last Created Entity;
				Event Player.Is_Using_Ultimate = True;
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate);
					Event Player.W = Players Within Radius(Event Player, 8, Opposite Team Of(Team Of(Event Player)), Off);
					Set Status(Event Player.W, Event Player, Rooted, 0.200);
					For Player Variable(Event Player, for_loop_2, 0, Count Of(Event Player.W), True);
						Apply Impulse(Event Player.W[Event Player.for_loop_2], Direction Towards(Position Of(Event Player),
							Event Player.W[Event Player.for_loop_2]) * Vector(True, False, True), 20, To World, Incorporate Contrary Motion);
					End;
					Wait(0.100, Ignore Condition);
				End;
				Destroy Effect(Event Player.Effects[2]);
				Set Projectile Speed(Event Player, 100);
			Else;
				Event Player.W = Remove From Array(Players Within Radius(Event Player, 12, All Teams, Off), Event Player);
				Event Player.W.is_player_anchored = 400;
				Wait(0.200, Ignore Condition);
				Event Player.W.anchor_position = Event Player;
				Small Message(Event Player.W, Custom String("{0} YOU ARE TIED TO ME NOW", Hero Icon String(Hero Of(Event Player))));
				Set Damage Dealt(Event Player, 175);
				Wait(5, Ignore Condition);
				Set Damage Dealt(Event Player, 110);
			End;
		Else If(Hero Of(Event Player) == Hero(Ashe));
			If(Event Player.selected_hero_list_number == 0);
				Event Player.Medusa_trap = Nearest Walkable Position(Event Player);
				Event Player.Q = Filtered Array(All Players(Opposite Team Of(Team Of(Event Player))), Distance Between(
					Event Player.Medusa_trap * Vector(1, 0, 1), Position Of(Current Array Element) * Vector(1, 0, 1)) <= 15);
				Small Message(Event Player.Q, Custom String("{0} No ultimates here", Hero Icon String(Hero Of(Event Player))));
				Create Effect(All Players(All Teams), Light Shaft, Color(Red), Event Player.Medusa_trap, 15, None);
				Event Player.Effects[3] = Last Created Entity;
				Event Player.Is_Using_Ultimate = True;
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate);
					Event Player.Q = Filtered Array(All Players(Opposite Team Of(Team Of(Event Player))), Distance Between(
						Event Player.Medusa_trap * Vector(1, 0, 1), Position Of(Current Array Element) * Vector(1, 0, 1)) <= 15);
					Event Player.Q.Is_Using_Ultimate = False;
					Set Status(Event Player.Q, Event Player, Hacked, 0.500);
					Damage(Event Player.Q, Null, 3);
					Wait(0.100, Ignore Condition);
				End;
				Destroy Effect(Event Player.Effects[3]);
			Else If(Event Player.selected_hero_list_number == 1);
				Play Effect(All Players(All Teams), Buff Impact Sound, Color(Blue), Event Player, 250);
				Call Subroutine(raycast_hit_position1);
				Event Player.chase_Variable_at_rate = Position Of(Event Player);
				Event Player.chase_variable_destination2 = Event Player.raycast_hit_position;
				Event Player.chase_variable_rate_speed = 40;
				Call Subroutine(chase_player_var_speed);
				Event Player.Is_Using_Ultimate = True;
				Create Effect(All Players(All Teams), Good Aura, Color(Yellow), Update Every Frame(Event Player.chase_Variable_at_rate), 6,
					Visible To Position and Radius);
				Event Player.Effects[3] = Last Created Entity;
				Create Effect(All Players(All Teams), Sphere, Color(Yellow), Update Every Frame(Event Player.chase_Variable_at_rate), 6,
					Visible To Position and Radius);
				Event Player.Effects[4] = Last Created Entity;
				Start Rule(xuanzang_ULT_loop, Restart Rule);
				Wait Until(Event Player.chase_Variable_at_rate == Event Player.raycast_hit_position || !Event Player.Is_Using_Ultimate, 4);
				Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Blue), Event Player, 100);
				Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
				Destroy Effect(Event Player.Effects[3]);
				Destroy Effect(Event Player.Effects[4]);
				Stop Chasing Player Variable(Event Player, chase_Variable_at_rate);
				Wait Until(!Event Player.Is_Using_Ultimate, 3);
				Event Player.Is_Using_Ultimate = False;
			Else If(Event Player.selected_hero_list_number == 2);
				Small Message(All Players(All Teams), Custom String("{0} Let my weapons rain down on you", Hero Icon String(Hero Of(
					Event Player))));
				Call Subroutine(raycast_hit_position2);
				Create Effect(All Players(All Teams), Ring, Color(Orange), Event Player.raycast_hit_position2, 15, Visible To);
				Event Player.Effects[4] = Last Created Entity;
				Event Player.Is_Using_Ultimate = True;
				Event Player.G = Event Player.raycast_hit_position2 + Vector(Random Integer(-15, 15), False, Random Integer(-15, 15));
				Create Effect(All Players(All Teams), Light Shaft, Color(Yellow), Update Every Frame(Event Player.G), 2.300, Position and Radius);
				Event Player.Effects[5] = Last Created Entity;
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate);
					Event Player.G = Event Player.raycast_hit_position2 + Vector(Random Integer(-15, 15), False, Random Integer(-15, 15));
					Event Player.air_area_difference_array = Remove From Array(Filtered Array(All Living Players(All Teams), Distance Between(
						Event Player.G * Vector(1, 0, 1), Position Of(Current Array Element) * Vector(1, 0, 1)) <= 2.300), Event Player);
					Skip If(Total Time Elapsed % 3 != Null, 1);
					Play Effect(All Players(All Teams), Explosion Sound, Color(Yellow), Event Player.G, 65);
					Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Effect, Color(Red), Event Player.G, 3);
					Damage(Event Player.air_area_difference_array, Event Player, 160);
					Wait(0.030, Ignore Condition);
				End;
				Destroy Effect(Event Player.Effects[4]);
				Destroy Effect(Event Player.Effects[5]);
			Else If(Event Player.selected_hero_list_number == 3);
				Event Player.S = 0.150;
				Create Effect(All Players(All Teams), Good Aura, Color(Orange), Update Every Frame(Eye Position(Event Player)
					+ Facing Direction Of(Event Player) * 0.500), Event Player.S, Visible To Position and Radius);
				Event Player.Effects[3] = Last Created Entity;
				Event Player.D = Null;
				Start Holding Button(Event Player, Button(Secondary Fire));
				Create In-World Text(Event Player, Custom String("Damage: {0}", Event Player.D), Update Every Frame(Eye Position(Event Player)
					+ Facing Direction Of(Event Player)), 2, Clip Against Surfaces, Visible To Position and String, Color(White),
					Default Visibility);
				Event Player.Effects[4] = Last Text ID;
				Chase Player Variable At Rate(Event Player, D, 750, 200, Destination and Rate);
				Wait Until(Is Firing Primary(Event Player) || Is Assembling Heroes || Is Dead(Event Player) || !Is Button Held(Event Player,
					Button(Secondary Fire)), 99999);
				Stop Chasing Player Variable(Event Player, D);
				Call Subroutine(raycast_hit_position1);
				Call Subroutine(raycast_hit_player);
				Damage(Array Contains(All Living Players(Opposite Team Of(Team Of(Event Player))), Event Player.raycast_hit_player)
					? Event Player.raycast_hit_player : Players Within Radius(Event Player.raycast_hit_position, 3, Opposite Team Of(Team Of(
					Event Player)), Surfaces And Enemy Barriers), Event Player, Array Contains(All Living Players(Opposite Team Of(Team Of(
					Event Player))), Event Player.raycast_hit_player) ? Event Player.D * 2 : Event Player.D);
				Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Event Player.raycast_hit_position, 3);
				Play Effect(All Players(All Teams), Bad Explosion, Color(White), Event Player.raycast_hit_position, 3);
				Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player.raycast_hit_position, 100);
				Destroy Effect(Event Player.Effects[3]);
				Destroy In-World Text(Event Player.Effects[4]);
				Create Beam Effect(All Players(All Teams), Good Beam, Event Player, Event Player.raycast_hit_position, Color(White), None);
				Event Player.Effects[3] = Last Created Entity;
				Create Beam Effect(All Players(All Teams), Bad Beam, Event Player, Event Player.raycast_hit_position, Color(Orange), None);
				Event Player.Effects[4] = Last Created Entity;
				Stop Holding Button(Event Player, Button(Secondary Fire));
				Wait(0.100, Ignore Condition);
				Destroy Effect(Event Player.Effects[4]);
				Destroy Effect(Event Player.Effects[3]);
			End;
		Else If(Hero Of(Event Player) == Hero(Zenyatta));
			If(Event Player.selected_hero_list_number == 0);
				While(Is Using Ultimate(Event Player));
					Damage(Players Within Radius(Event Player, 5, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 75);
					Wait(0.250, Ignore Condition);
				End;
			Else If(Event Player.selected_hero_list_number == 1);
				Call Subroutine(raycast_hit_position1);
				Event Player.color = Color(Red);
				Call Subroutine(Area_Casting_Animation);
				Event Player.trump_wait_middle = 18;
				Event Player.Is_Using_Ultimate = True;
				Create Effect(All Players(All Teams), Sphere, Color(Red), Event Player.raycast_hit_position, Event Player.trump_wait_middle,
					Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Event Player.P = Empty Array;
				Modify Player Variable(Event Player, P, Append To Array, Players Within Radius(Event Player.raycast_hit_position,
					Event Player.trump_wait_middle, Opposite Team Of(Team Of(Event Player)), Off));
				Chase Player Variable Over Time(Event Player, trump_wait_middle, 9, 5, Destination and Duration);
				Start Rule(ultimate_ender, Restart Rule);
				Small Message(All Players(All Teams), Custom String("{0} PRISON ACTIVE", Hero Icon String(Hero(Zenyatta))));
				While(Event Player.Is_Using_Ultimate);
					For Player Variable(Event Player, for_loop, 0, Count Of(Event Player.P), True);
						If(Distance Between(Event Player.P[Event Player.for_loop], Event Player.raycast_hit_position) > Event Player.trump_wait_middle);
							Apply Impulse(Event Player.P[Event Player.for_loop], Direction Towards(Event Player.P[Event Player.for_loop],
								Event Player.raycast_hit_position), 33, To World, Cancel Contrary Motion);
							Set Status(Event Player.P[Event Player.for_loop], Event Player, Frozen, 0.700);
							Damage(Event Player.P[Event Player.for_loop], Event Player, 150);
							Wait(0.016, Ignore Condition);
						End;
						Wait(0.016, Ignore Condition);
					End;
					Wait(0.100, Ignore Condition);
				End;
				Stop Chasing Player Variable(Event Player, trump_wait_middle);
				Event Player.P = Empty Array;
				Destroy Effect(Event Player.Effects[True]);
			Else If(Event Player.selected_hero_list_number == 2);
				Small Message(All Players(All Teams), Custom String("{0} If you MOVE you DIE", Hero Icon String(Hero(Zenyatta))));
				Start Forcing Throttle(Event Player, False, False, False, False, False, False);
				Wait(1.250, Ignore Condition);
				Event Player.Is_Using_Ultimate = True;
				Create Effect(All Players(All Teams), Sphere, Color(Red), Position Of(Event Player), 1800, Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Disallow Button(Event Player, Button(Primary Fire));
				Disallow Button(Event Player, Button(Secondary Fire));
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate);
					Event Player.filtered_array = Remove From Array(Filtered Array(All Living Players(All Teams), Distance Between(
						Event Player * Vector(1, 0, 1), Position Of(Current Array Element) * Vector(1, 0, 1)) <= 1800 && Is Moving(
						Current Array Element)), Event Player);
					Damage(Event Player.filtered_array, Event Player, 12);
					Heal(Event Player, Event Player, Count Of(Event Player.filtered_array) * 7);
					Wait(0.016, Ignore Condition);
				End;
				Destroy Effect(Event Player.Effects[True]);
				Allow Button(Event Player, Button(Primary Fire));
				Allow Button(Event Player, Button(Secondary Fire));
				Stop Forcing Throttle(Event Player);
			Else If(Event Player.selected_hero_list_number == 3);
				Event Player.raycast_hit_position = Event Player;
				Start Forcing Throttle(Event Player, False, False, False, False, False, False);
				Event Player.C = 0.500;
				Event Player.color = Color(Yellow);
				Call Subroutine(Area_Casting_Animation);
				Allow Button(Event Player, Button(Ultimate));
				Press Button(Event Player, Button(Ultimate));
				Chase Player Variable Over Time(Event Player, C, 18, 2.150, Destination and Duration);
				Create Effect(All Players(All Teams), Ring, Color(Yellow), Event Player, Event Player.C, Visible To Position and Radius);
				Event Player.Effects[2] = Last Created Entity;
				Create Effect(All Players(All Teams), Light Shaft, Color(Yellow), Event Player, Event Player.C, Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Event Player.Is_Using_Ultimate = True;
				Start Rule(ultimate_ender, Restart Rule);
				While(Is Using Ultimate(Event Player));
					Event Player.filtered_array = Remove From Array(Filtered Array(All Living Players(All Teams), Distance Between(Position Of(
						Event Player) * Vector(1, 0, 1), Position Of(Current Array Element) * Vector(1, 0, 1)) <= Event Player.C), Event Player);
					Modify Player Variable(Event Player, filtered_array, Remove From Array By Value, Event Player.Solomon_pillar_array);
					Damage(Event Player.filtered_array, Event Player, 100);
					Wait(0.090, Ignore Condition);
				End;
				Stop Forcing Throttle(Event Player);
				Stop Chasing Player Variable(Event Player, C);
				Destroy Effect(Event Player.Effects[True]);
				Stop Forcing Player Position(Event Player);
				Disallow Button(Event Player, Button(Ultimate));
				Destroy Effect(Event Player.Effects[2]);
			End;
		Else If(Hero Of(Event Player) == Hero(Sombra));
			If(!Event Player.selected_hero_list_number);
				If(Event Player.U);
					Event Player.G = Players Within Radius(Event Player.Solomon_pillar_array, 8, Opposite Team Of(Team Of(Event Player)), Off);
					Damage(Event Player.G, Event Player, 315);
					Set Aim Speed(Event Player.G, 1000);
					Play Effect(All Players(All Teams), Bad Explosion, Color(White), Event Player.Solomon_pillar_array, 6);
					Play Effect(All Players(All Teams), Good Explosion, Color(Violet), Event Player.Solomon_pillar_array, 6);
					Play Effect(All Players(All Teams), Explosion Sound, Color(Violet), Event Player.Solomon_pillar_array, 100);
					Event Player.U = False;
					Kill(Event Player.Solomon_pillar_array, Event Player);
					Wait(4.500, Ignore Condition);
					Set Aim Speed(Event Player.G, 100);
					Event Player.Solomon_pillar_array = Empty Array;
				Else;
					Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) - 20);
					Call Subroutine(houdini_create_clone);
					Skip(19);
				End;
			Else;
				Call Subroutine(FoV_and_LoS_player_select);
				Attach Players(Event Player, Event Player.FoV_and_lineOFsight_player, Vector(0, 0, 0));
				Skip If(!Event Player.FoV_and_lineOFsight_player, 6);
				Start Damage Over Time(Event Player.FoV_and_lineOFsight_player, Null, 9999, 40);
				Event Player.X = Last Damage Over Time ID;
				Disallow Button(Event Player, Button(Primary Fire));
				Wait(0.100, Ignore Condition);
				Event Player.Is_Using_Ultimate = True;
				Wait Until(Is Button Held(Event Player, Button(Ultimate)) || Distance Between(Event Player,
					Event Player.FoV_and_lineOFsight_player) > 2 || Is Dead(Event Player) || Is Dead(Event Player.FoV_and_lineOFsight_player)
					|| !Event Player.Is_Using_Ultimate, 10);
				Detach Players(Event Player);
				Event Player.Is_Using_Ultimate = False;
				Stop Damage Over Time(Event Player.X);
				Allow Button(Event Player, Button(Primary Fire));
			End;
		End;
		Skip If(Hero Of(Event Player) == Hero(Kiriko) && !Event Player.selected_hero_list_number, 1);
		Set Ultimate Charge(Event Player, 0);
	}
}

rule("ULTIMATE SETUP #2: Cassidy, Symmetra, Soldier 76, Genji, Moira, Doomfist")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		((Is Button Held(Event Player, Button(Ultimate)) && Ultimate Charge Percent(Event Player) == 100) || Is Using Ultimate(
			Event Player)) == True;
		Is Alive(Event Player) == True;
		Is In Spawn Room(Event Player) == False;
		Array Contains(Global.Global_ULTButton_2, Hero Of(Event Player)) == True;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Cassidy));
			If(Event Player.selected_hero_list_number == Null);
				Wait(1, Ignore Condition);
				Skip If(!Is Using Ultimate(Event Player), 4);
				Press Button(Event Player, Button(Primary Fire));
				Wait(1, Ignore Condition);
				Press Button(Event Player, Button(Primary Fire));
				Set Status(Event Player, Null, Hacked, 0.250);
			Else If(Event Player.selected_hero_list_number == 1);
				Start Heal Over Time(Event Player, Event Player, 6, 150);
				Event Player.Is_Using_Ultimate = True;
				Start Rule(ultimate_ender, Restart Rule);
				Create In-World Text(All Players(Opposite Team Of(Team Of(Event Player))), Custom String("{0} Don't get close {1} ", Icon String(
					Warning), Icon String(Warning)), Event Player + Vector(0, 2, 0), 1.200, Do Not Clip, Visible To Position and String, Color(
					White), Default Visibility);
				Event Player.Effects[2] = Last Text ID;
				Create Effect(All Players(All Teams), Good Aura, Color(Gray), Event Player, 1, Visible To Position Radius and Color);
				Event Player.Effects[5] = Last Created Entity;
				Create Effect(All Players(All Teams), Ring, Color(Red), Event Player, 9, Visible To Position Radius and Color);
				Event Player.Effects[8] = Last Created Entity;
				While(Event Player.Is_Using_Ultimate);
					Start Damage Over Time(Remove From Array(Players Within Radius(Event Player, 9, All Teams, Off), Event Player), Event Player,
						2.750, 25);
					Wait(0.300, Ignore Condition);
				End;
				Destroy In-World Text(Event Player.Effects[2]);
				Destroy Effect(Event Player.Effects[5]);
				Destroy Effect(Event Player.Effects[8]);
			End;
		Else If(Hero Of(Event Player) == Hero(Symmetra));
			If(Event Player.selected_hero_list_number == 0);
				Event Player.raycast_hit_position = Position Of(Event Player);
				Event Player.color = Color(Purple);
				Call Subroutine(Area_Casting_Animation);
				Create Effect(All Players(All Teams), Sphere, Color(Purple), Event Player.raycast_hit_position, 13,
					Visible To Position and Radius);
				Event Player.Effects[10] = Last Created Entity;
				Event Player.Is_Using_Ultimate = True;
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate);
					Modify Player Variable(Event Player, Z, Append To Array, Remove From Array(Players Within Radius(Event Player.raycast_hit_position,
						13, All Teams, Off), Event Player));
					Set Gravity(Event Player.Z, False);
					Event Player.X = Filtered Array(Event Player.Z, Distance Between(Current Array Element, Event Player.raycast_hit_position) > 13);
					Set Gravity(Event Player.X, 100);
					Modify Player Variable(Event Player, Z, Remove From Array By Value, Event Player.X);
					Apply Impulse(Players Within Radius(Event Player.raycast_hit_position, 13, Opposite Team Of(Team Of(Event Player)), Off),
						Direction Towards(Players Within Radius(Event Player.raycast_hit_position, 13, Opposite Team Of(Team Of(Event Player)), Off),
						Event Player.raycast_hit_position), 15, To World, Cancel Contrary Motion);
					Damage(Event Player.Z, Event Player, 40);
					Wait(0.150, Ignore Condition);
				End;
				Destroy Effect(Event Player.Effects[10]);
				Set Gravity(Event Player.Z, 100);
				Event Player.Z = Null;
			Else If(Event Player.selected_hero_list_number == 1);
				If(Event Player.U == False);
					Event Player.R = Vector(X Component Of(Position Of(Event Player)), False, Z Component Of(Position Of(Event Player)));
					Event Player.S = Facing Direction Of(Event Player);
				Else If(Event Player.U == True);
					Set Ultimate Charge(Event Player, 0);
					Event Player.trump_wait_time = 0.050;
					Event Player.trump_wait_middle = 0.050;
					Destroy In-World Text(First Of(Event Player.in_world_text));
					Set Invisible(Event Player, All);
					Create Effect(All Players(All Teams), Bad Aura, Color(Blue), Position Of(Event Player), True, Visible To);
					Event Player.Effects[5] = Last Created Entity;
					Wait(6, Ignore Condition);
					Create In-World Text(All Players(All Teams), Event Player.Selected_Hero[Event Player.selected_hero_list_number],
						Event Player + Vector(False, 1.750, False), True, Clip Against Surfaces, Visible To Position and String, Color(White),
						Default Visibility);
					Event Player.in_world_text[False] = Last Text ID;
					Event Player.trump_wait_time = 0.250;
					Event Player.trump_wait_middle = 0.100;
					Small Message(Event Player, Custom String("Ultimate over"));
					Set Invisible(Event Player, None);
					Destroy Effect(Event Player.Effects[5]);
				End;
			Else If(Event Player.selected_hero_list_number == 2);
				Event Player.C = Filtered Array(Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)), 75),
					Is In Line of Sight(Event Player, Current Array Element, Barriers Do Not Block LOS));
				Set Status(Event Player.C, Null, Rooted, 1);
				Apply Impulse(Event Player.C, Facing Direction Of(Event Player), 99999, To World, Cancel Contrary Motion);
				Damage(Event Player.C, Event Player, 100);
				Event Player.C.Is_Using_Ultimate = False;
				Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Event Player, 6);
			Else If(Event Player.selected_hero_list_number == 3);
				Event Player.T = Remove From Array(Players Within Radius(Event Player, 25, All Teams, Surfaces), Event Player);
				Event Player.T.Is_Crippled = True;
				Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 100);
				Damage(Event Player.T, Event Player, 100);
				Small Message(Event Player.T, Custom String("{0} - Crippled", Hero Icon String(Hero(Symmetra))));
				Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Eye Position(Event Player), 35);
				Set Ability Cooldown(All Players(Team Of(Event Player)), Button(Ability 1), 0);
				Set Ability Cooldown(All Players(Team Of(Event Player)), Button(Ability 2), 0);
				All Players(Team Of(Event Player)).Is_Crippled = False;
				Set Ultimate Ability Enabled(Event Player, False);
				Wait(5, Ignore Condition);
				Set Ultimate Ability Enabled(Event Player, True);
			End;
		Else If(Hero Of(Event Player) == Hero(Soldier: 76));
			If(Event Player.selected_hero_list_number == Null);
				Set Ability Cooldown(Event Player, Button(Secondary Fire), False);
				Set Ultimate Charge(Event Player, 0);
				Event Player.Is_Using_Ultimate = True;
				Play Effect(All Players(All Teams), Buff Impact Sound, Color(Red), Event Player, 100);
				Create Effect(All Players(All Teams), Bad Aura, Color(Red), Event Player, True, Visible To Position and Radius);
				Event Player.Effects[3] = Last Created Entity;
				Create Progress Bar HUD Text(Event Player, Event Player.gilles_de_rais_damage, Custom String("Spear throw activation LOADING"),
					Top, 0, Color(Red), Color(White), Visible To Values and Color, Default Visibility);
				Event Player.Effects[4] = Last Text ID;
				Event Player.gilles_de_rais_damage = Null;
				Disallow Button(Event Player, Button(Secondary Fire));
				Set Status(Event Player, Null, Rooted, 9999);
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate && Event Player.gilles_de_rais_damage < 100);
					Event Player.gilles_de_rais_damage += 10;
					Wait(0.200, Ignore Condition);
				End;
				Wait Until(!Event Player.Is_Using_Ultimate || Event Player.gilles_de_rais_damage == 100, 99999);
				Skip If(!Event Player.Is_Using_Ultimate, 5);
				Small Message(Event Player, Custom String("Can fire rocket now"));
				Allow Button(Event Player, Button(Secondary Fire));
				Wait Until(!Event Player.Is_Using_Ultimate || Is Firing Secondary(Event Player), 15);
				Clear Status(Event Player, Rooted);
				Wait Until(!Event Player.Is_Using_Ultimate, 1.500);
				Event Player.Is_Using_Ultimate = False;
				Destroy Effect(Event Player.Effects[3]);
				Destroy Progress Bar HUD Text(Event Player.Effects[4]);
				Allow Button(Event Player, Button(Secondary Fire));
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.Is_Using_Ultimate = True;
				Create Effect(All Players(All Teams), Bad Aura, Color(Green), Event Player, True, Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Event Player.playerSpeed[False] += 150;
				Start Forcing Throttle(Event Player, True, True, False, False, False, False);
				Set Gravity(Event Player, 0);
				Disable Movement Collision With Environment(Event Player, False);
				Set Status(Event Player, Event Player, Invincible, 6);
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate && Is Alive(Event Player) && Players Within Radius(Event Player, 2.100, Opposite Team Of(
					Team Of(Event Player)), Surfaces) <= 0);
					Skip If(Speed Of(Event Player) >= 20, 1);
					Apply Impulse(Event Player, Facing Direction Of(Event Player), 1, To World, Incorporate Contrary Motion);
					Wait(0.020, Ignore Condition);
				End;
				Skip If(!Event Player.Is_Using_Ultimate, 4);
				Heal(Event Player, Event Player, 360);
				Damage(Players Within Radius(Event Player, 5, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player,
					345);
				Play Effect(All Players(All Teams), Bad Explosion, Color(Green), Event Player, 3);
				Play Effect(All Players(All Teams), Explosion Sound, Color(Green), Event Player, 100);
				Enable Movement Collision With Environment(Event Player);
				Event Player.playerSpeed[False] -= 150;
				Stop Forcing Throttle(Event Player);
				Event Player.Is_Using_Ultimate = False;
				Destroy Effect(Event Player.Effects[True]);
				Set Ultimate Charge(Event Player, 0);
				Set Gravity(Event Player, 100);
			Else If(Event Player.selected_hero_list_number == 2);
				Event Player.Medusa_ultimate = Empty Array;
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Green), Event Player + Vector(False, 2, False), 110);
				Play Effect(All Players(All Teams), Ring Explosion, Color(Green), Event Player + Vector(False, 2, False), 7);
				Modify Player Variable(Event Player, Medusa_ultimate, Append To Array, Players Within Radius(Event Player, 7, Opposite Team Of(
					Team Of(Event Player)), Off));
				Wait(0.100, Ignore Condition);
				Set Ultimate Charge(Event Player, 0);
				Small Message(Event Player.Medusa_ultimate, Custom String("Cursed by Diarmuid ULT"));
				Damage(Event Player.Medusa_ultimate, Event Player, 5);
				Set Status(Event Player.Medusa_ultimate, Event Player, Rooted, 4);
				Set Damage Received(Event Player.Medusa_ultimate, 150);
				Event Player.Medusa_ultimate.is_healing_cursed = True;
			Else If(Event Player.selected_hero_list_number == 3);
				Set Status(Event Player, Null, Unkillable, 8);
				Set Projectile Speed(Event Player, 10000);
				Allow Button(Event Player, Button(Secondary Fire));
				Event Player.Is_Using_Ultimate = True;
				Set Status(Remove From Array(Players Within Radius(Event Player, 7, Team Of(Event Player), Off), Event Player), Event Player,
					Invincible, 6);
				Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player + Vector(False, True, False), 7);
				Wait Until(Event Player.Is_Using_Ultimate == False || Is Firing Secondary(Event Player) || Is In Spawn Room(Event Player), 99999);
				Disallow Button(Event Player, Button(Secondary Fire));
				Create Beam Effect(All Players(All Teams), Moira Coalescence Beam, Eye Position(Event Player), Facing Direction Of(Event Player)
					* 1000, Color(Team 1), Position and Radius);
				Event Player.Effects[5] = Last Created Entity;
				Set Status(Event Player, Event Player, Frozen, 2);
				Wait(1.350, Ignore Condition);
				Event Player.Is_Using_Ultimate = False;
				Damage(Players in View Angle(Event Player, All Teams, 30), Event Player, 250);
				Event Player.J = Null;
				Wait(0.350, Ignore Condition);
				Destroy Effect(Event Player.Effects[5]);
				Set Ultimate Charge(Event Player, 0);
			Else If(Event Player.selected_hero_list_number == 4);
				Set Status(Event Player, Null, Rooted, 3);
				Event Player.Is_Using_Ultimate = True;
				Set Ultimate Charge(Event Player, 0);
				Call Subroutine(raycast_hit_position2);
				Create Effect(All Players(All Teams), Sphere, Color(Rose), Event Player.raycast_hit_position2, 18, Visible To Position and Radius);
				Event Player.Effects[6] = Last Created Entity;
				Create Icon(All Players(All Teams), Event Player.raycast_hit_position2 + Vector(0, 5, 0), Warning, Visible To and Position, Color(
					White), True);
				Event Player.Effects[7] = Last Created Entity;
				Event Player.S = 1;
				Event Player.C = Position Of(Event Player);
				Create Effect(All Players(All Teams), Sphere, Color(Red), Update Every Frame(Event Player.C), Event Player.S,
					Visible To Position and Radius);
				Event Player.Effects[5] = Last Created Entity;
				Chase Player Variable At Rate(Event Player, C, Event Player + Vector(False, 40, False), 18, Destination and Rate);
				"size"
				Chase Player Variable At Rate(Event Player, S, 18, 8, Destination and Rate);
				Wait(2.650, Ignore Condition);
				Stop Chasing Player Variable(Event Player, C);
				Stop Chasing Player Variable(Event Player, S);
				Chase Player Variable At Rate(Event Player, C, Event Player.raycast_hit_position2, 30, Destination and Rate);
				Wait Until(Event Player.C == Event Player.raycast_hit_position2 || Event Player.Is_Using_Ultimate == False, 99999);
				Damage(Remove From Array(Players Within Radius(Event Player.C, Event Player.S, All Teams, Off), Event Player), Event Player, 1000);
				Start Damage Over Time(Players Within Radius(Event Player.C, Event Player.S, All Teams, Off), Null, 10, 15);
				Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Event Player.C, Event Player.S);
				Play Effect(All Players(All Teams), Explosion Sound, Color(Red), Event Player.C, 300);
				Stop Chasing Player Variable(Event Player, C);
				Event Player.Is_Using_Ultimate = False;
				Set Ultimate Charge(Event Player, 0);
				Destroy Effect(Event Player.Effects[5]);
				Destroy Effect(Event Player.Effects[6]);
				Destroy Icon(Event Player.Effects[7]);
			Else If(Event Player.selected_hero_list_number == 5);
				Call Subroutine(FoV_and_LoS_player_select);
				Skip If(!Entity Exists(Event Player.FoV_and_lineOFsight_player), 26);
				"set  the event player poison"
				Event Player.Is_Using_Ultimate = True;
				Event Player.P[False] = Event Player;
				Event Player.P[True] = Event Player.FoV_and_lineOFsight_player;
				"dmg was 25"
				Start Damage Over Time(First Of(Event Player.P), Null, 9999, Max Health(Event Player) / 25);
				"was 40"
				Start Damage Over Time(Event Player.P[True], Null, 9999, Max Health(Event Player.P[True]) / 20);
				Event Player.is_healing_cursed = True;
				Event Player.P[True].is_healing_cursed = True;
				Set Ultimate Charge(Event Player, 0);
				Create Icon(All Players(All Teams), First Of(Event Player.P), Radioactive, Visible To and Position, Color(Lime Green), True);
				Event Player.Effects[True] = Last Created Entity;
				Create Icon(All Players(All Teams), Event Player.P[True], Radioactive, Visible To and Position, Color(Lime Green), True);
				Event Player.Effects[2] = Last Created Entity;
				Wait Until(Is Dead(Event Player) || !Event Player.Is_Using_Ultimate || !Entity Exists(Event Player) || Is In Spawn Room(
					Event Player) || Is In Spawn Room(Event Player.P[True]) || !Entity Exists(Event Player.P[True]) || Is Dead(
					Event Player.P[True]), 99999);
				Event Player.is_healing_cursed = False;
				Event Player.P[True].is_healing_cursed = False;
				Stop All Damage Over Time(Event Player.P[True]);
				Stop All Damage Over Time(Event Player);
				"shakespear"
				Wait(0.250, Ignore Condition);
				Destroy Icon(Event Player.Effects[True]);
				Destroy Icon(Event Player.Effects[2]);
				If(Is Dead(Event Player) || !Entity Exists(Event Player));
					Heal(Event Player.P[True], Event Player, 100000);
				Else If(Is Dead(Event Player.P[True]) || !Entity Exists(Event Player.P[True]));
					Heal(Event Player, Event Player, 10000);
				End;
				Event Player.Is_Using_Ultimate = False;
			End;
		Else If(Hero Of(Event Player) == Hero(Genji));
			Start Rule(can_use_blade_subroutine, Restart Rule);
			If(Event Player.selected_hero_list_number == 1);
				Event Player.playerSpeed[False] += 125;
				Set Ultimate Charge(Event Player, 0);
				Create Effect(All Players(All Teams), Bad Aura, Color(Purple), Event Player, True, Visible To Position and Radius);
				Event Player.Effects[3] = Last Created Entity;
				Small Message(Event Player, Custom String("Death mode activated"));
				Event Player.Is_Using_Ultimate = True;
				Event Player.T = Random Value In Array(Filtered Array(All Living Players(Opposite Team Of(Team Of(Event Player))), !Is Dummy Bot(
					Current Array Element) && Array Contains(All Heroes, Hero Of(Current Array Element))));
				Create HUD Text(All Players(All Teams), Custom String("{0} {1}", Hero Icon String(Hero Of(Event Player.T)), Custom String(
					"is target")), Null, Null, Top, 2, Color(Red), Null, Null, Visible To and String, Default Visibility);
				Create Icon(Event Player, Event Player.T, Skull, Visible To and Position, Color(White), True);
				Event Player.Effects[6] = Last Created Entity;
				Event Player.T.jack_the_ripper_master = Event Player;
				Wait(0.016, Ignore Condition);
				Event Player.Effects[5] = Last Text ID;
				Disallow Button(Event Player, Button(Primary Fire));
				Call Subroutine(ultimate_ender);
				Event Player.T.jack_the_ripper_master = Null;
				Allow Button(Event Player, Button(Primary Fire));
				Destroy HUD Text(Event Player.Effects[5]);
				Destroy Effect(Event Player.Effects[3]);
				Destroy Icon(Event Player.Effects[6]);
				Event Player.playerSpeed[False] -= 125;
			Else If(Event Player.selected_hero_list_number == 2);
				Create Effect(All Players(All Teams), Sphere, Color(Violet), Event Player, 7, Visible To Position and Radius);
				Event Player.Effects[2] = Last Created Entity;
				For Player Variable(Event Player, for_loop_2, 0, 3, True);
					Event Player.N = Players Within Radius(Event Player, 7, Opposite Team Of(Team Of(Event Player)), Surfaces);
					Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 5);
					Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 120);
					Event Player.N.playerSpeed[False] -= 50;
					Damage(Event Player.N, Event Player, 0.100);
					For Player Variable(Event Player, for_loop, 0, 3, True);
						Set Player Health(Event Player.N[Event Player.for_loop], Health(Event Player.N[Event Player.for_loop]) - Max Health(
							Event Player.N[Event Player.for_loop]) / 3);
					End;
					Wait(0.650, Ignore Condition);
					Event Player.N.playerSpeed[False] += 50;
				End;
				Set Ultimate Charge(Event Player, 0);
				Destroy Effect(Event Player.Effects[2]);
			Else If(Event Player.selected_hero_list_number == 4);
				Call Subroutine(FoV_and_LoS_player_select);
				Skip If(!Event Player.FoV_and_lineOFsight_player, 10);
				If(Array Contains(All Heroes, Hero Of(Event Player.FoV_and_lineOFsight_player)));
					Create Effect(All Players(All Teams), Cloud, Color(Green), Event Player.FoV_and_lineOFsight_player, True,
						Visible To Position and Radius);
					Event Player.Effects[True] = Last Created Entity;
					Set Ultimate Charge(Event Player, 0);
					Event Player.Is_Using_Ultimate = True;
					Start Rule(hassan_100_loop, Restart Rule);
					Wait Until(!Event Player.Is_Using_Ultimate, 4.200);
					Event Player.Is_Using_Ultimate = False;
					Destroy Effect(Event Player.Effects[True]);
				Else;
					Small Message(Event Player, Custom String("No target found"));
				End;
			Else If(Event Player.selected_hero_list_number == 3);
				Allow Button(Event Player, Button(Primary Fire));
				Event Player.L = Position Of(Event Player);
				Create Effect(All Players(All Teams), Light Shaft, Color(Sky Blue), Event Player.L, 10, Visible To Position and Radius);
				Event Player.Effects[2] = Last Created Entity;
				Event Player.P = Players Within Radius(Event Player, 12, Opposite Team Of(Team Of(Event Player)), Off);
				Event Player.playerSpeed[False] += 25;
				While(Is Using Ultimate(Event Player));
					For Player Variable(Event Player, for_loop_2, 0, Count Of(Event Player.P), True);
						If(Distance Between(Event Player.P[Event Player.for_loop_2] * Vector(1, 0, 1), Event Player.L * Vector(1, 0, 1)) > 10);
							Damage(Event Player.P[Event Player.for_loop_2], Event Player, 8);
							Set Status(Event Player.P[Event Player.for_loop_2], Event Player, Rooted, 0.200);
							Apply Impulse(Event Player.P[Event Player.for_loop_2], Direction Towards(Event Player.P[Event Player.for_loop_2], Event Player.L),
								15, To World, Cancel Contrary Motion);
						End;
					End;
					Wait(0.016, Ignore Condition);
					Skip If(Is Using Ultimate(Event Player), 1);
					Break;
				End;
				Destroy Effect(Event Player.Effects[2]);
				Event Player.playerSpeed[False] -= 25;
				Disallow Button(Event Player, Button(Primary Fire));
				Event Player.P = Empty Array;
			Else If(Event Player.selected_hero_list_number == 5);
				Event Player.playerSpeed[False] += 20;
				Allow Button(Event Player, Button(Primary Fire));
				Wait Until(!Is Using Ultimate(Event Player) || Is In Spawn Room(Event Player), 99999);
				Event Player.playerSpeed[False] -= 20;
				Disallow Button(Event Player, Button(Primary Fire));
			Else If(Event Player.selected_hero_list_number == 6);
				Event Player.playerSpeed[False] += 20;
				Allow Button(Event Player, Button(Primary Fire));
				Wait(2.500, Ignore Condition);
				Start Rule(Bedivere_ult, Restart Rule);
				Wait Until(!Is Using Ultimate(Event Player) || Is In Spawn Room(Event Player), 99999);
				Event Player.playerSpeed[False] -= 20;
				Disallow Button(Event Player, Button(Primary Fire));
			Else If(Event Player.selected_hero_list_number == 7);
				Event Player.playerSpeed[False] += 20;
				Set Damage Dealt(Event Player, 130);
				Allow Button(Event Player, Button(Primary Fire));
				Set Ultimate Charge(Event Player, 0);
				Event Player.Is_Using_Ultimate = True;
				Event Player.Lanling_array = Filtered Array(Players Within Radius(Event Player, 9, Opposite Team Of(Team Of(Event Player)), Off),
					!Is Dummy Bot(Current Array Element));
				Event Player.Lanling_array.Lanling_master = Event Player;
				For Player Variable(Event Player, X, 0, Count Of(Event Player.Lanling_array), True);
					Start Facing(Event Player.Lanling_array[Event Player.X], Facing Direction Of(Event Player), 9999, To World,
						Direction and Turn Rate);
				End;
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate);
					Heal(Players Within Radius(Event Player, 6.500, Team Of(Event Player), Off), Event Player, 135);
					Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player + Vector(False, 1.200, False), 6.500);
					Play Effect(All Players(All Teams), Ring Explosion, Color(Rose), Event Player + Vector(False, 1.200, False), 6.500);
					Wait(0.650, Ignore Condition);
				End;
				Stop Facing(Event Player.Lanling_array);
				Event Player.Lanling_array = Null;
				Small Message(Event Player, Custom String("ultimate over"));
				Event Player.playerSpeed[False] -= 20;
				Set Damage Dealt(Event Player, 110);
				Disallow Button(Event Player, Button(Primary Fire));
			Else If(Event Player.selected_hero_list_number == 8);
				Set Ultimate Charge(Event Player, 0);
				Event Player.raycast_hit_position = Position Of(Event Player);
				Event Player.color = Color(Red);
				Call Subroutine(Area_Casting_Animation);
				Event Player.Is_Using_Ultimate = True;
				Create Effect(All Players(All Teams), Sphere, Color(Red), Event Player.raycast_hit_position, 23, None);
				Event Player.Effects[True] = Last Created Entity;
				Create Effect(All Players(All Teams), Good Aura, Color(Red), Event Player, True, None);
				Event Player.Effects[2] = Last Created Entity;
				Allow Button(Event Player, Button(Primary Fire));
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate);
					Wait Until(Distance Between(Event Player, Event Player.raycast_hit_position) <= 23 || !Event Player.Is_Using_Ultimate, 99999);
					Set Damage Dealt(Event Player, 160);
					Event Player.playerSpeed[False] += 85;
					Set Status(Event Player, Null, Unkillable, 9999);
					Wait Until(Distance Between(Event Player, Event Player.raycast_hit_position) > 23 || !Has Status(Event Player, Unkillable)
						|| !Event Player.Is_Using_Ultimate, 99999);
					Set Damage Dealt(Event Player, 58);
					Event Player.playerSpeed[False] -= 85;
					Clear Status(Event Player, Unkillable);
					Skip If(Event Player.Is_Using_Ultimate, 1);
					Break;
				End;
				Destroy Effect(Event Player.Effects[True]);
				Destroy Effect(Event Player.Effects[2]);
				Set Ultimate Charge(Event Player, 0);
				Clear Status(Event Player, Unkillable);
				Disallow Button(Event Player, Button(Primary Fire));
			Else If(Event Player.selected_hero_list_number == 9);
				Event Player.Is_Using_Ultimate = True;
				Event Player.Y = Position Of(Event Player);
				Create Effect(All Players(All Teams), Sphere, Color(Black), Event Player.Y, Event Player.G, Visible To Position and Radius);
				Event Player.Effects[2] = Last Created Entity;
				Chase Player Variable Over Time(Event Player, G, 13, 0.450, Destination and Duration);
				Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player)
					|| Event Player.Is_Using_Ultimate == False || Event Player.G == 13, 99999);
				Players Within Radius(Event Player.Y, Event Player.G, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers)
					.Is_Using_Ultimate = False;
				Set Ability Cooldown(Event Player, Button(Ability 2), 0);
				Small Message(Players Within Radius(Event Player.Y, Event Player.G, Opposite Team Of(Team Of(Event Player)), Off), Custom String(
					"{0} Ultimate disabled", Hero Icon String(Hero Of(Event Player))));
				Cancel Primary Action(Players Within Radius(Event Player.Y, Event Player.G, Opposite Team Of(Team Of(Event Player)),
					Surfaces And Enemy Barriers));
				Stop Chasing Player Variable(Event Player, G);
				Event Player.G = Null;
				Destroy Effect(Event Player.Effects[2]);
				Event Player.Is_Using_Ultimate = False;
				Set Ultimate Charge(Event Player, 0);
			Else If(Event Player.selected_hero_list_number == 10 && Event Player.Is_Using_Ultimate == False && Event Player.B == False);
				Set Ultimate Charge(Event Player, 0);
				Event Player.Is_Using_Ultimate = True;
				Create Effect(All Players(All Teams), Bad Aura, Color(Blue), Event Player, True, Visible To Position and Radius);
				Event Player.Effects[7] = Last Created Entity;
				Wait(1, Ignore Condition);
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate);
					For Player Variable(Event Player, for_loop, 0, 3, 1);
						Wait Until(!Event Player.Is_Using_Ultimate || Is Button Held(Event Player, Button(Secondary Fire)), 99999);
						Call Subroutine(raycast_hit_position1);
						Event Player.D = Position Of(Event Player);
						Create Beam Effect(All Players(All Teams), Bad Beam, Evaluate Once(Position Of(Event Player)), Event Player.D, Color(Blue),
							Visible To Position and Radius);
						Event Player.Effects[4] = Last Created Entity;
						Create Effect(All Players(All Teams), Sphere, Color(Blue), Event Player.D, 2, Visible To Position and Radius);
						Event Player.Effects[True] = Last Created Entity;
						Chase Player Variable At Rate(Event Player, D, Event Player.raycast_hit_position, 85, Destination and Rate);
						Event Player.V = 2;
						Wait Until(Event Player.D == Event Player.raycast_hit_position || !Event Player.Is_Using_Ultimate || Count Of(Filtered Array(
							Players Within Radius(Event Player.D, 4.500, Opposite Team Of(Team Of(Event Player)), Off), Is Alive(Current Array Element)))
							>= 1, 3);
						Damage(Players Within Radius(Event Player.D, 5, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 100);
						Play Effect(All Players(All Teams), Bad Explosion, Color(Blue), Event Player.D, 5);
						Play Effect(All Players(All Teams), Explosion Sound, Color(Blue), Event Player.D, 150);
						Stop Chasing Player Variable(Event Player, D);
						Destroy Effect(Event Player.Effects[4]);
						Destroy Effect(Event Player.Effects[True]);
						Wait(1, Ignore Condition);
					End;
				End;
				Event Player.Is_Using_Ultimate = False;
				Destroy Effect(Event Player.Effects[7]);
			Else If(Event Player.selected_hero_list_number == 11);
				Set Ultimate Charge(Event Player, 0);
				Set Status(Event Player, Event Player, Rooted, 3);
				Set Status(Event Player, Event Player, Burning, 3);
				Event Player.Is_Using_Ultimate = True;
				Call Subroutine(raycast_hit_position1);
				Wait(True, Ignore Condition);
				Event Player.raycast_hit_position += Facing Direction Of(Event Player) * 150;
				Event Player.Blood_arthur_1 = Position Of(Event Player);
				Event Player.Blood_arthur_2 = Position Of(Event Player);
				Event Player.Blood_arthur_3 = Position Of(Event Player);
				Event Player.Blood_arthur_4 = Position Of(Event Player);
				Event Player.Blood_arthur_5 = Position Of(Event Player);
				Set Status(Event Player, Event Player, Unkillable, 2);
				Start Rule(mordred_ultimate_damage_loop, Restart Rule);
				Create Effect(All Players(All Teams), Sphere, Color(Red), Update Every Frame(Event Player.Blood_arthur_1), 5,
					Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Create Effect(All Players(All Teams), Sphere, Color(Red), Update Every Frame(Event Player.Blood_arthur_2), 5,
					Visible To Position and Radius);
				Event Player.Effects[2] = Last Created Entity;
				Create Effect(All Players(All Teams), Sphere, Color(Red), Update Every Frame(Event Player.Blood_arthur_3), 5,
					Visible To Position and Radius);
				Event Player.Effects[3] = Last Created Entity;
				Create Effect(All Players(All Teams), Sphere, Color(Red), Update Every Frame(Event Player.Blood_arthur_4), 5,
					Visible To Position and Radius);
				Event Player.Effects[4] = Last Created Entity;
				Create Effect(All Players(All Teams), Sphere, Color(Red), Update Every Frame(Event Player.Blood_arthur_5), 5,
					Visible To Position and Radius);
				Event Player.Effects[5] = Last Created Entity;
				Chase Player Variable At Rate(Event Player, Blood_arthur_1, Event Player.raycast_hit_position, 40, Destination and Rate);
				Wait(0.300, Ignore Condition);
				Chase Player Variable At Rate(Event Player, Blood_arthur_2, Event Player.raycast_hit_position, 40, Destination and Rate);
				Wait(0.300, Ignore Condition);
				Chase Player Variable At Rate(Event Player, Blood_arthur_3, Event Player.raycast_hit_position, 40, Destination and Rate);
				Wait(0.300, Ignore Condition);
				Chase Player Variable At Rate(Event Player, Blood_arthur_4, Event Player.raycast_hit_position, 40, Destination and Rate);
				Wait(0.300, Ignore Condition);
				Chase Player Variable At Rate(Event Player, Blood_arthur_5, Event Player.raycast_hit_position, 40, Destination and Rate);
				Call Subroutine(ultimate_ender);
				Event Player.raycast_hit_position = Null;
				Stop Chasing Player Variable(Event Player, Blood_arthur_1);
				Stop Chasing Player Variable(Event Player, Blood_arthur_2);
				Stop Chasing Player Variable(Event Player, Blood_arthur_3);
				Stop Chasing Player Variable(Event Player, Blood_arthur_4);
				Stop Chasing Player Variable(Event Player, Blood_arthur_5);
				Event Player.Is_Using_Ultimate = False;
				Event Player.Blood_arthur_1 = Vector(-222, 10000, 44);
				Event Player.Blood_arthur_2 = Vector(-222, 10000, 44);
				Event Player.Blood_arthur_3 = Vector(-222, 10000, 44);
				Event Player.Blood_arthur_4 = Vector(-222, 10000, 44);
				Event Player.Blood_arthur_5 = Vector(-222, 10000, 44);
				Destroy Effect(Event Player.Effects[True]);
				Destroy Effect(Event Player.Effects[2]);
				Destroy Effect(Event Player.Effects[3]);
				Destroy Effect(Event Player.Effects[4]);
				Destroy Effect(Event Player.Effects[5]);
			Else If(Event Player.selected_hero_list_number == 12);
				Event Player.Is_Using_Ultimate = True;
				Start Facing(Event Player, Vector(Random Integer(-360, 360), Random Integer(-360, 360), Random Integer(-360, 360)), 10000,
					To Player, Direction and Turn Rate);
				Start Camera(Event Player, Position Of(Event Player) + Vector(3, 14, 2), Event Player, 0);
				For Player Variable(Event Player, for_loop, 0, 80, 1);
					Create Homing Projectile(Genji Shuriken, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 135,
						1, 0, Bad Explosion, Explosion Sound, 0.080, 3, 25, 0, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(
						Event Player))), 0.900);
					Skip If(Event Player.Is_Using_Ultimate, 1);
					Break;
					Wait(0.016, Ignore Condition);
				End;
				Stop Camera(Event Player);
				Stop Facing(Event Player);
				Event Player.Is_Using_Ultimate = False;
				Set Ultimate Charge(Event Player, 0);
			End;
		Else If(Hero Of(Event Player) == Hero(Moira));
			If(Event Player.selected_hero_list_number == 0);
				Play Effect(All Players(All Teams), Good Explosion, Color(Purple), Event Player, 1);
				Set Damage Dealt(Event Player, 550);
				Set Move Speed(Event Player, 200);
				Set Damage Received(Event Player, 140);
				Wait Until(!Is Using Ultimate(Event Player), 7);
				Set Status(Event Player, Event Player, Hacked, 0.100);
				Set Damage Dealt(Event Player, 60);
				Set Damage Received(Event Player, 70);
				Set Move Speed(Event Player, 130);
			Else If(Event Player.selected_hero_list_number == 1);
				Call Subroutine(raycast_hit_position2);
				Event Player.Z = Position Of(Event Player);
				Create Effect(All Players(All Teams), Orb, Color(Violet), Update Every Frame(Event Player.Z), True, Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Chase Player Variable At Rate(Event Player, Z, Event Player.raycast_hit_position2, 4.500, Destination and Rate);
				Create Icon(All Players(All Teams), Update Every Frame(Event Player.Z), Warning, Visible To and Position, Color(White), False);
				Event Player.Effects[2] = Last Created Entity;
				Event Player.Is_Using_Ultimate = True;
				Start Rule(vlad_effect_beam_loop, Restart Rule);
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate);
					Event Player.Medusa_trap = Remove From Array(Filtered Array(Players Within Radius(Event Player.Z, 13, All Teams,
						Surfaces And Enemy Barriers), Is Alive(Current Array Element)), Event Player);
					Event Player.Medusa_trap.Vlad_effect_master = Event Player;
					Damage(Event Player.Medusa_trap, Event Player, 20);
					Heal(Event Player, Event Player, Count Of(Event Player.Medusa_trap) * 28);
					Wait(0.100, Ignore Condition);
				End;
				Stop Chasing Player Variable(Event Player, Z);
				Destroy Effect(Event Player.Effects[True]);
				Destroy Icon(Event Player.Effects[2]);
			Else If(Event Player.selected_hero_list_number == 2);
				Event Player.saber_wind_gust = Event Player;
				Create Effect(All Players(All Teams), Sphere, Color(Purple), Event Player.saber_wind_gust, 6, Visible To Position and Radius);
				Event Player.Effects[3] = Last Created Entity;
				Event Player.color = Color(White);
				Event Player.Is_Using_Ultimate = True;
				Wait Until(Is Dead(Event Player) || !Event Player.Is_Using_Ultimate || Is Button Held(Event Player, Button(Primary Fire)), 10);
				Create Icon(All Players(All Teams), Update Every Frame(Event Player.saber_wind_gust), Arrow: Down, Visible To Position and Color,
					Event Player.color, True);
				Event Player.Effects[5] = Last Created Entity;
				Call Subroutine(raycast_hit_position1);
				Event Player.saber_wind_gust = Position Of(Event Player);
				Chase Player Variable At Rate(Event Player, saber_wind_gust, Event Player.raycast_hit_position, 9, Destination and Rate);
				Create Beam Effect(All Players(All Teams), Bad Beam, Eye Position(Event Player), Event Player.raycast_hit_position, Color(Purple),
					None);
				Event Player.Effects[4] = Last Created Entity;
				Wait(0.550, Ignore Condition);
				Event Player.color = Color(Red);
				Start Rule(ultimate_ender, Restart Rule);
				While(Is Alive(Event Player) && Event Player.Is_Using_Ultimate);
					Modify Player Variable(Event Player, has_soul, Append To Array, Players Within Radius(Event Player.saber_wind_gust, 6,
						Opposite Team Of(Team Of(Event Player)), Off));
					Event Player.R = Filtered Array(Event Player.has_soul, Distance Between(Current Array Element, Event Player.saber_wind_gust) > 6);
					Modify Player Variable(Event Player, has_soul, Remove From Array By Value, Event Player.R);
					Modify Global Variable(Falling_floor_array, Append To Array, Event Player.has_soul);
					Wait(0.100, Ignore Condition);
				End;
				Enable Movement Collision With Environment(Event Player.has_soul);
				Destroy Effect(Event Player.Effects[3]);
				Destroy Effect(Event Player.Effects[4]);
				Destroy Icon(Event Player.Effects[5]);
			Else If(Event Player.selected_hero_list_number == 3);
				Event Player.H = 1500;
				Create Effect(All Players(All Teams), Ring, Color(Lime Green), Event Player, Event Player.A, Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Create Effect(All Players(All Teams), Ring, Color(Yellow), Event Player, Event Player.A, Visible To Position and Radius);
				Event Player.Effects[2] = Last Created Entity;
				Chase Player Variable At Rate(Event Player, A, 100, 25, Destination and Rate);
				Chase Player Variable At Rate(Event Player, H, False, 25, Destination and Rate);
				Start Camera(Event Player, Event Player + Vector(False, 35, False), Event Player, 50);
				Event Player.Is_Using_Ultimate = True;
				Start Rule(ultimate_ender, Restart Rule);
				Wait(0.300, Ignore Condition);
				Wait Until(Is Button Held(Event Player, Button(Ultimate)) || !Event Player.Is_Using_Ultimate, 99999);
				Stop Chasing Player Variable(Event Player, H);
				Stop Chasing Player Variable(Event Player, A);
				Event Player.mordred_extra_armor = Remove From Array(Filtered Array(Players Within Radius(Event Player, Event Player.A, All Teams,
					Off), Is Dead(Current Array Element)), Event Player);
				Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player + Vector(False, 2, False), Event Player.A);
				Event Player.trump_wait_middle = Players Within Radius(Event Player, Event Player.A, Opposite Team Of(Team Of(Event Player)), Off);
				For Player Variable(Event Player, for_loop_2, 0, Count Of(Event Player.trump_wait_middle), 1);
					Start Damage Over Time(Event Player.trump_wait_middle[Event Player.for_loop_2], Null, 4, Max Health(
						Event Player.trump_wait_middle[Event Player.for_loop_2]) / 10);
					Wait(0.100, Ignore Condition);
				End;
				Resurrect(Event Player.mordred_extra_armor);
				Play Effect(All Players(All Teams), Ring Explosion, Color(Lime Green), Event Player + Vector(False, 2, False), Event Player.A);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Yellow), Event Player + Vector(False, 2, False), 150);
				Heal(Append To Array(Filtered Array(Event Player.mordred_extra_armor, Team Of(Current Array Element) == Team Of(Event Player)),
					Event Player), Event Player, Event Player.H);
				Small Message(Event Player.mordred_extra_armor, Custom String("Asclepius has cured you of Death"));
				Players Within Radius(Event Player, Event Player.A, All Teams, Off).is_healing_cursed = False;
				Set Healing Received(Players Within Radius(Event Player, Event Player.A, All Teams, Off), 100);
				Event Player.A = 1;
				Destroy Effect(Event Player.Effects[True]);
				Destroy Effect(Event Player.Effects[2]);
				Stop Camera(Event Player);
				Event Player.Is_Using_Ultimate = False;
			Else If(Event Player.selected_hero_list_number == 4);
				Event Player.Is_Using_Ultimate = True;
				"position of ULT"
				Event Player.W = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player)
					* 25, All Players(All Teams), Event Player, True);
				"area of guy inside"
				Event Player.C = Empty Array;
				Create Effect(All Players(All Teams), Sphere, Color(Turquoise), Event Player.W, Update Every Frame(Event Player.size),
					Visible To Position and Radius);
				Event Player.Effects[5] = Last Created Entity;
				Event Player.size = Null;
				Chase Player Variable Over Time(Event Player, size, 13.500, 2.500, Destination and Duration);
				Wait(1.500, Ignore Condition);
				Create Effect(All Players(All Teams), Bad Aura, Color(Black), Event Player.W, 2, Visible To Position and Radius);
				Event Player.Effects[False] = Last Created Entity;
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate);
					Modify Player Variable(Event Player, C, Append To Array, Players Within Radius(Event Player.W, Event Player.size, All Teams, Off));
					Set Gravity(Event Player.C, False);
					For Player Variable(Event Player, for_loop, 0, Count Of(Event Player.C), True);
						Apply Impulse(Event Player.C[Event Player.for_loop], Direction Towards(Event Player.C[Event Player.for_loop], Event Player.W), 1,
							To World, Incorporate Contrary Motion);
					End;
					Damage(Players Within Radius(Event Player.W, 2, All Teams, Off), Event Player, 900);
					Damage(Event Player.C, Event Player, 5);
					For Player Variable(Event Player, for_loop, 0, Count Of(Event Player.C), True);
						If(Distance Between(Event Player.C[Event Player.for_loop], Event Player.W) > Event Player.size);
							Set Gravity(Event Player.C[Event Player.for_loop], 100);
							Modify Player Variable(Event Player, C, Remove From Array By Value, Event Player.C[Event Player.for_loop]);
						End;
					End;
					Wait(0.100, Ignore Condition);
				End;
				Set Gravity(Event Player.C, 100);
				Stop Chasing Player Variable(Event Player, size);
				Destroy Effect(First Of(Event Player.Effects));
				Destroy Effect(Event Player.Effects[5]);
			Else If(Event Player.selected_hero_list_number == 5);
				Event Player.A = 0;
				Event Player.O = Empty Array;
				Event Player.Q = Empty Array;
				Event Player.Is_Using_Ultimate = True;
				Chase Player Variable At Rate(Event Player, A, 1000, 15, Destination and Rate);
				Event Player.L = Position Of(Event Player);
				Create Effect(All Players(All Teams), Sphere, Color(Sky Blue), Event Player.L, Update Every Frame(Event Player.A),
					Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Create Icon(All Players(All Teams), Event Player.L + Vector(False, 2, False), Question Mark, Visible To and Position, Color(Red),
					True);
				Event Player.Effects[2] = Last Created Entity;
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate);
					Modify Player Variable(Event Player, Q, Append To Array, Remove From Array(Filtered Array(Players Within Radius(Event Player.L,
						Event Player.A, All Teams, Off), !Array Contains(Event Player.Q, Current Array Element)), Event Player));
					Damage(Filtered Array(Event Player.Q, !Array Contains(Event Player.O, Current Array Element)), Event Player, 220);
					Event Player.O = Event Player.Q;
					Modify Player Variable(Event Player, O, Remove From Array By Value, Filtered Array(Event Player.O, Distance Between(
						Current Array Element, Event Player.L) > Event Player.A));
					Wait(0.100, Ignore Condition);
				End;
				Stop Chasing Player Variable(Event Player, A);
				Destroy Effect(Event Player.Effects[True]);
				Destroy Icon(Event Player.Effects[2]);
			End;
		Else If(Hero Of(Event Player) == Hero(Doomfist));
			If(Event Player.selected_hero_list_number == Null);
				Set Ability Cooldown(Event Player, Button(Secondary Fire), False);
				Create Effect(All Players(All Teams), Bad Aura, Color(Purple), Event Player, True, Visible To Position and Radius);
				Event Player.Effects[4] = Last Created Entity;
				Event Player.Hassan_Hand_ULT = True;
				Event Player.Is_Using_Ultimate = True;
				Call Subroutine(ultimate_ender);
				Destroy Icon(Event Player.Effects[3]);
				Destroy Effect(Event Player.Effects[4]);
				Event Player.Is_Using_Ultimate = False;
				Event Player.Hassan_Hand_ULT = False;
				Set Ultimate Charge(Event Player, 0);
			Else If(Event Player.selected_hero_list_number == 1);
				Allow Button(Event Player, Button(Primary Fire));
				Event Player.F = Position Of(Event Player);
				Event Player.Is_Using_Ultimate = True;
				Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Event Player.F + Vector(False, 4, False), 23);
				Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Red), Event Player.F + Vector(False, 4, False), 150);
				Create Effect(All Players(All Teams), Ring, Color(Red), Event Player.F, 23, Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Wait Until(Is Assembling Heroes, 4);
				Destroy Effect(Event Player.Effects[True]);
				Press Button(Event Player, Button(Primary Fire));
				Disallow Button(Event Player, Button(Primary Fire));
				Event Player.Is_Using_Ultimate = False;
			Else If(Event Player.selected_hero_list_number == 2);
				Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
				Set Damage Dealt(Event Player, 190);
				Event Player.Is_Using_Ultimate = True;
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(Team 2), Event Player, True, Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Call Subroutine(ultimate_ender);
				Destroy Effect(Event Player.Effects[True]);
				Event Player.Is_Using_Ultimate = False;
				Set Ultimate Charge(Event Player, 0);
			Else If(Event Player.selected_hero_list_number == 3);
				Event Player.P = Random Value In Array(Filtered Array(All Living Players(All Teams), !Is Dummy Bot(Current Array Element)
					&& !Is In Spawn Room(Current Array Element)));
				Skip If(Is In Spawn Room(Event Player), 4);
				Clear Status(Event Player.P, Unkillable);
				Clear Status(Event Player.P, Phased Out);
				Clear Status(Event Player.P, Invincible);
				Kill(Event Player.P, Event Player);
				Small Message(All Players(All Teams), Custom String("{0} Randomly killed {1}", Hero Icon String(Hero(Doomfist)), Event Player.P));
			End;
		End;
		Set Ultimate Charge(Event Player, 0);
	}
}

rule("ULTIMATE SETUP #3: Echo, Roadhog, Mei, Sigma, Bastion, Briggite, Reaper, Rein, Mauga, Rammatra")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		((Is Button Held(Event Player, Button(Ultimate)) && Ultimate Charge Percent(Event Player) == 100) || Is Using Ultimate(
			Event Player)) == True;
		Is Alive(Event Player) == True;
		Is In Spawn Room(Event Player) == False;
		Array Contains(Global.Global_ULTButton_3, Hero Of(Event Player)) == True;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Echo));
			If(Event Player.selected_hero_list_number == 0);
				Event Player.P = Position Of(Event Player);
				Event Player.Is_Using_Ultimate = True;
				Chase Player Variable At Rate(Event Player, C, 18, 10, Destination and Rate);
				Create Effect(All Players(All Teams), Sphere, Color(Yellow), Event Player.P, Update Every Frame(Event Player.C),
					Visible To Position and Radius);
				Event Player.Gate_of_Babylon_index[True] = Last Created Entity;
				Create Effect(All Players(All Teams), Ring, Color(Yellow), Event Player.P, Event Player.C, Visible To Position and Radius);
				Event Player.Gate_of_Babylon_index[2] = Last Created Entity;
				Wait Until(!Event Player.Is_Using_Ultimate || Event Player.C == 18, 99999);
				Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player.P, 130);
				Event Player.trump_wait_middle = Players Within Radius(Event Player.P, Event Player.C, Opposite Team Of(Team Of(Event Player)),
					Off);
				Damage(Players Within Radius(Event Player.P, Event Player.C, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 125);
				Event Player.trump_wait_middle.is_healing_cursed = True;
				For Player Variable(Event Player, for_loop_2, 0, Count Of(Event Player.trump_wait_middle), True);
					If(Event Player.trump_wait_middle[Event Player.for_loop_2].is_player_anchored <= 0);
						Event Player.trump_wait_middle[Event Player.for_loop_2].is_player_anchored = 235;
					Else;
						Event Player.trump_wait_middle[Event Player.for_loop_2].is_player_anchored += 110;
					End;
				End;
				Wait(0.300, Ignore Condition);
				Destroy Effect(Event Player.Gate_of_Babylon_index[True]);
				Destroy Effect(Event Player.Gate_of_Babylon_index[2]);
				Stop Chasing Player Variable(Event Player, C);
				Event Player.C = 1;
				Event Player.Is_Using_Ultimate = False;
				Wait(6, Ignore Condition);
				Event Player.trump_wait_middle.is_healing_cursed = False;
			Else If(Event Player.selected_hero_list_number == 1);
				Small Message(All Players(All Teams), Custom String("{0} ALL UNDER THE SKY PERISHES", Hero Icon String(Hero(Echo))));
				Wait(3.260, Ignore Condition);
				Event Player.W = Remove From Array(All Players(All Teams), Event Player);
				For Player Variable(Event Player, F, 0, Count Of(Event Player.W), 1);
					Event Player.Q = Event Player.W[Event Player.F];
					Event Player.J = Eye Position(Event Player.Q) + Up * 1000;
					Create Beam Effect(All Players(All Teams), Good Beam, Eye Position(Event Player.Q), Event Player.J, Color(Yellow), None);
					Modify Player Variable(Event Player, E, Append To Array, Last Created Entity);
					Damage(Event Player.Q, Event Player, Is In Line of Sight(Event Player.Q, Event Player.J, Barriers Do Not Block LOS) ? 1000 : 100);
				End;
				Wait(1, Ignore Condition);
				Destroy Effect(Filtered Array(Event Player.E, Entity Exists(Current Array Element)));
				Event Player.E = Empty Array;
			End;
		Else If(Hero Of(Event Player) == Hero(Mercy));
			Create Effect(All Players(All Teams), Good Aura, Color(Yellow), Event Player, True, Visible To Position and Radius);
			Event Player.Effects[7] = Last Created Entity;
			Set Status(Players Within Radius(Event Player, 8, Team Of(Event Player), Off), Null, Unkillable, 6);
			Set Status(Event Player, Null, Unkillable, 15);
			Event Player.Is_Using_Ultimate = True;
			Event Player.D = 1;
			Disallow Button(Event Player, Button(Melee));
			Wait(1.500, Ignore Condition);
			Wait Until(!Event Player.Is_Using_Ultimate || Is Button Held(Event Player, Button(Ultimate)), 15);
			Allow Button(Event Player, Button(Melee));
			Event Player.Is_Using_Ultimate = False;
			Heal(Players Within Radius(Event Player, 12, Team Of(Event Player), Off), Event Player, Event Player.D * 1.650);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player + Vector(False, 2, False), 12);
			Damage(Players Within Radius(Event Player, 12, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player,
				Event Player.D * 4);
			Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Yellow), Event Player, 100);
			Destroy Effect(Event Player.Effects[7]);
			Clear Status(Event Player, Unkillable);
			Set Ultimate Charge(Event Player, 0);
		Else If(Hero Of(Event Player) == Hero(Roadhog));
			If(Event Player.selected_hero_list_number == 1);
				Event Player.G = Players Within Radius(Event Player, 8, Opposite Team Of(Team Of(Event Player)), Off);
				Set Healing Received(Event Player.G, 0);
				Event Player.G.is_healing_cursed = True;
				Set Ultimate Charge(Event Player, 0);
				Set Gravity(Event Player.G, False);
				Apply Impulse(Event Player.G, Up, 18, To World, Cancel Contrary Motion);
				Event Player.G.moctezuma_lifted[False] = 2;
				Wait Until(Is In Spawn Room(Event Player) || Is Dead(Event Player), 2);
				Set Gravity(Event Player.G, 100);
				Event Player.G = Empty Array;
			End;
		Else If(Hero Of(Event Player) == Hero(Mei));
			If(Event Player.selected_hero_list_number == 0);
				Event Player.Is_Using_Ultimate = True;
				Event Player.P = Position Of(Event Player) + Vector(False, 2, False);
				Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Sky Blue), Event Player.P, 100);
				Create Effect(All Players(All Teams), Sphere, Color(Sky Blue), Event Player.P, Event Player.chase_Variable_time,
					Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Event Player.chase_Variable_time = 5.500;
				Event Player.chase_variable_destination = 0;
				Event Player.chase_variable_duration = 1.100;
				Call Subroutine(chase_player_var_time);
				Create Icon(All Players(All Teams), Event Player.P, Eye, Visible To and Position, Color(White), False);
				Event Player.Effects[2] = Last Created Entity;
				Wait Until(Is In Spawn Room(Event Player) || !Entity Exists(Event Player) || Is Dead(Event Player)
					|| Event Player.chase_Variable_time == 0 || Event Player.Is_Using_Ultimate == False, 99999);
				Skip If(Is Dead(Event Player) || !Entity Exists(Event Player) || Is In Spawn Room(Event Player)
					|| Event Player.Is_Using_Ultimate == False, 8);
				Destroy Icon(Event Player.Effects[2]);
				Stop Chasing Player Variable(Event Player, chase_Variable_time);
				Create Icon(All Players(All Teams), Event Player.P, Eye, Visible To and Position, Color(Red), False);
				Event Player.Effects[2] = Last Created Entity;
				Wait(0.100, Ignore Condition);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Sky Blue), Event Player.P, 300);
				Event Player.filtered_array = Filtered Array(All Living Players(Opposite Team Of(Team Of(Event Player))), Is In Line of Sight(
					Current Array Element, Event Player.P, Enemy Barriers Block LOS) && Is In View Angle(Current Array Element, Event Player.P,
					80));
				Set Status(Event Player.filtered_array, Null, Frozen, 7);
				Event Player.Is_Using_Ultimate = False;
				Destroy Icon(Event Player.Effects[2]);
				Destroy Effect(Event Player.Effects[True]);
				Stop Chasing Player Variable(Event Player, chase_Variable_time);
			Else If(Event Player.selected_hero_list_number == 1);
				Destroy Effect(Event Player.Effects[1]);
				Event Player.selected_hero_list_number = 13;
				Start Forcing Player To Be Hero(Event Player, Hero(Reinhardt));
				Event Player.Selected_Hero[13] = Custom String("Mahito");
				Call Subroutine(Enable_Buttons_sub);
				Set Damage Dealt(Event Player, 240);
				Event Player.playerSpeed[False] = 160;
				Wait(2, Ignore Condition);
				Modify Global Variable(H, Append To Array, Event Player);
			Else If(Event Player.selected_hero_list_number == 2);
				Event Player.P = Position Of(Event Player);
				Set Invisible(Event Player, Enemies);
				Disallow Button(Event Player, Button(Secondary Fire));
				Allow Button(Event Player, Button(Primary Fire));
				Call Subroutine(create_dummy_of_EventPlayer);
				Event Player.Solomon_pillar_array = Last Of(Event Player.Solomon_pillar_array);
				Event Player.Is_Using_Ultimate = True;
				Create Effect(All Players(All Teams), Sphere, Color(Blue), Position Of(Event Player) + Vector(0, 1, 0), 1,
					Visible To Position and Radius);
				Event Player.Effects[1] = Last Created Entity;
				Create In-World Text(All Players(All Teams), Custom String("{0}", Hero Icon String(Hero(Mei))), Position Of(Event Player) + Vector(
					0, 1, 0), 4, Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
				Event Player.Effects[3] = Last Text ID;
				Create Effect(All Players(All Teams), Bad Aura, Color(Blue), Position Of(Event Player) + Vector(0, 1, 0), 1.250,
					Visible To Position and Radius);
				Event Player.Effects[2] = Last Created Entity;
				Set Gravity(Event Player, 0);
				Set Damage Received(Event Player, 85);
				Wait(0.250, Ignore Condition);
				Wait Until(!Event Player.Is_Using_Ultimate || Is Button Held(Event Player, Button(Ultimate)) || Is Dead(Event Player) || Is Dead(
					Event Player.Solomon_pillar_array) || !Entity Exists(Event Player.Solomon_pillar_array), 99999);
				Skip If(Is Alive(Event Player.Solomon_pillar_array), 1);
				Kill(Event Player, Event Player);
				Skip If(Is Dead(Event Player.Solomon_pillar_array), 2);
				Teleport(Event Player, Event Player.P);
				Resurrect(Event Player);
				Allow Button(Event Player, Button(Secondary Fire));
				Disallow Button(Event Player, Button(Primary Fire));
				Set Gravity(Event Player, 100);
				Kill(Event Player.Solomon_pillar_array, Null);
				Destroy Effect(Event Player.Effects[1]);
				Destroy Effect(Event Player.Effects[2]);
				Destroy In-World Text(Event Player.Effects[3]);
				Event Player.Is_Using_Ultimate = False;
				Set Invisible(Event Player, None);
				Set Damage Received(Event Player, 70);
			End;
		Else If(Hero Of(Event Player) == Hero(Sigma));
			If(Event Player.selected_hero_list_number == 0);
				Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Event Player, 9);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Sky Blue), Event Player, 100);
				Event Player.L = Empty Array;
				Modify Player Variable(Event Player, L, Append To Array, Remove From Array(Players Within Radius(Event Player, 16,
					Opposite Team Of(Team Of(Event Player)), Off), Event Player));
				Set Gravity(Event Player.L, False);
				Wait(0.350, Ignore Condition);
				Clear Status(Event Player.L, Unkillable);
				Apply Impulse(Event Player.L, Facing Direction Of(Event Player), 6000, To World, Cancel Contrary Motion);
				Damage(Event Player.L, Event Player, 55);
				Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player), 4);
				Set Gravity(Event Player.L, 100);
			End;
		Else If(Hero Of(Event Player) == Hero(Bastion));
			If(Event Player.selected_hero_list_number == 0);
				Event Player.Is_Using_Ultimate = True;
				While(Event Player.Is_Using_Ultimate && !Is Button Held(Event Player, Button(Primary Fire)) && Ultimate Charge Percent(
					Event Player) > 0);
					Play Effect(Remove From Array(All Players(All Teams), Event Player), Good Pickup Effect, Color(White), Event Player, 1);
					Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) - 3.500);
					Event Player.D += 30;
					Set Status(Event Player, Null, Rooted, 0.100);
					Wait(0.100, Ignore Condition);
					Skip If(Is Button Held(Event Player, Button(Primary Fire)), 1);
				End;
				Wait Until(Is Button Held(Event Player, Button(Primary Fire)) || !Event Player.Is_Using_Ultimate, 99999);
				Event Player.Z = Eye Position(Event Player);
				Event Player.Is_Using_Ultimate = False;
				Call Subroutine(raycast_hit_position1);
				Create Beam Effect(All Players(All Teams), Good Beam, Evaluate Once(Event Player), Event Player.raycast_hit_position, Color(White),
					None);
				Event Player.Effects[3] = Last Created Entity;
				Create Effect(All Players(All Teams), Sphere, Color(Blue), Update Every Frame(Event Player.Z), 4, Visible To Position and Radius);
				Event Player.Effects[2] = Last Created Entity;
				Chase Player Variable At Rate(Event Player, Z, Event Player.raycast_hit_position, 40, Destination and Rate);
				Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player)
					|| Event Player.Z == Event Player.raycast_hit_position || Count Of(Filtered Array(Players Within Radius(Event Player.Z, 4,
					Opposite Team Of(Team Of(Event Player)), Surfaces), Array Contains(All Heroes, Hero Of(Current Array Element)))) > 0, 99999);
				Damage(Players Within Radius(Event Player.Z, 5, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, Event Player.D);
				Play Effect(All Players(All Teams), Bad Explosion, Color(White), Event Player.raycast_hit_position, 6);
				Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player.raycast_hit_position, 110);
				Wait(0.100, Ignore Condition);
				Stop Chasing Player Variable(Event Player, Z);
				Destroy Effect(Event Player.Effects[2]);
				Destroy Effect(Event Player.Effects[3]);
				Event Player.D = 100;
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.B = Empty Array;
				Set Ultimate Charge(Event Player, 0);
				Small Message(All Players(All Teams), Custom String("{0} It's morbin' Time", Hero Icon String(Hero Of(Event Player))));
				For Player Variable(Event Player, for_loop_2, 0, 1, 1);
					Create Dummy Bot(Hero(Bastion), Team Of(Event Player), -1, Event Player, Closest Player To(Event Player, Opposite Team Of(Team Of(
						Event Player))));
					Modify Player Variable(Event Player, B, Append To Array, Last Created Entity);
					Disable Movement Collision With Environment(Last Created Entity, True);
					Wait(0.300, Ignore Condition);
					Add Health Pool To Player(Event Player.B, Armor, 450, True, True);
				End;
				Press Button(Last Created Entity, Button(Ability 1));
				Set Invisible(Event Player.B, All);
				Set Gravity(Event Player.B, False);
				Set Damage Dealt(Event Player.B, 145);
				Attach Players(First Of(Event Player.B), Event Player, Vector(False, 0.500, False));
				Attach Players(Event Player.B[True], Event Player, Vector(False, 0.500, False));
				Wait(0.300, Ignore Condition);
				Set Projectile Speed(Last Created Entity, 500);
				Event Player.Is_Using_Ultimate = True;
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate && Is True For Any(Event Player.B, Is Alive(Current Array Element) && Entity Exists(
					Current Array Element)));
					Set Facing(First Of(Event Player.B), Facing Direction Of(Event Player), To World);
					Set Facing(Event Player.B[True], Facing Direction Of(Event Player), To World);
					Set Ability Cooldown(Last Of(Event Player.B), Button(Secondary Fire), 0);
					Press Button(Last Of(Event Player.B), Button(Secondary Fire));
					Wait(0.016, Ignore Condition);
				End;
				Event Player.Is_Using_Ultimate = False;
				Destroy Dummy Bot(Team Of(Event Player), First Of(Slot Of(Event Player.B)));
				Wait(0.016, Ignore Condition);
				Destroy Dummy Bot(Team Of(Event Player), First Of(Slot Of(Players On Hero(Hero(Bastion), Team Of(Event Player)))));
			End;
		Else If(Hero Of(Event Player) == Hero(Brigitte));
			If(Event Player.selected_hero_list_number == Null);
				Apply Impulse(Event Player, Up, 1000, To World, Cancel Contrary Motion);
				Set Gravity(Event Player, False);
				Wait(0.500, Ignore Condition);
				Event Player.Y = Y Component Of(Position Of(Event Player));
				Event Player.N = True;
				Start Rule(float_player_above_level, Restart Rule);
				Event Player.Is_Using_Ultimate = True;
				Create Beam Effect(All Players(All Teams), Good Beam, Update Every Frame(Position Of(Event Player)), Update Every Frame(
					Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 500,
					All Players(All Teams), Event Player, True)), Color(Red), Visible To Position and Radius);
				Event Player.Effects[6] = Last Created Entity;
				Create Effect(All Players(All Teams), Bad Aura, Color(Aqua), Event Player, True, Visible To Position and Radius);
				Event Player.Effects[7] = Last Created Entity;
				Wait Until(Is Button Held(Event Player, Button(Primary Fire)) || Is In Spawn Room(Event Player)
					|| Event Player.Is_Using_Ultimate == False, 10);
				Event Player.N = Null;
				Set Gravity(Event Player, 100);
				Event Player.Q = Position Of(Event Player);
				Start Forcing Player Position(Event Player, Event Player.Q, True);
				Event Player.K = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player)
					* 150, All Players(All Teams), Event Player, True);
				Chase Player Variable At Rate(Event Player, Q, Event Player.K, 120, Destination and Rate);
				Wait Until(!Distance Between(Event Player.Q, Event Player.K), 5);
				Stop Forcing Player Position(Event Player);
				Damage(Remove From Array(Players Within Radius(Event Player, 8, All Teams, Off), Event Player), Event Player, 300);
				Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Event Player, 6);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 139);
				Event Player.Is_Using_Ultimate = False;
				Destroy Effect(Event Player.Effects[6]);
				Destroy Effect(Event Player.Effects[7]);
				Wait(0.250, Ignore Condition);
				Set Ultimate Charge(Event Player, 0);
			Else If(Event Player.selected_hero_list_number == 1);
				Event Player.Is_Using_Ultimate = True;
				Set Status(Event Player, Null, Unkillable, 5);
				Disallow Button(Event Player, Button(Secondary Fire));
				Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Event Player + Vector(0, 1, 0), 9);
				Start Holding Button(Event Player, Button(Primary Fire));
				Set Status(Remove From Array(Players Within Radius(Event Player, 8.150, Team Of(Event Player), Off), Event Player), Event Player,
					Phased Out, 5);
				Allow Button(Event Player, Button(Ability 1));
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate);
					If(Is Button Held(Event Player, Button(Primary Fire)) || Is Using Ability 1(Event Player));
						Press Button(Event Player, Button(Ability 1));
					End;
					Wait(0.300, Ignore Condition);
					Set Ability Cooldown(Event Player, Button(Ability 1), 0);
				End;
				Disallow Button(Event Player, Button(Ability 1));
				Allow Button(Event Player, Button(Secondary Fire));
			Else If(Event Player.selected_hero_list_number == 2);
				Set Status(Event Player, Null, Unkillable, 5);
				Create Effect(All Players(All Teams), Bad Aura, Color(Orange), Event Player, True, Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Press Button(Event Player, Button(Ability 1));
				Event Player.Is_Using_Ultimate = True;
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate && Is Alive(Event Player));
					For Player Variable(Event Player, for_loop, 0, 2, True);
						Wait Until(!Is Using Ability 1(Event Player), 99999);
						Set Ability Cooldown(Event Player, Button(Ability 1), 0);
						Wait Until(Is Using Ability 1(Event Player), 99999);
						Wait(0.100, Ignore Condition);
					End;
					Event Player.Is_Using_Ultimate = False;
				End;
				Destroy Effect(Event Player.Effects[True]);
			Else If(Event Player.selected_hero_list_number == 3);
				Set Move Speed(Event Player, 125);
				Set Gravity(Event Player, 80);
				Event Player.Is_Using_Ultimate = True;
				Set Damage Received(Event Player, 5);
				Set Damage Dealt(Event Player, 335);
				Start Scaling Player(Event Player, 3, True);
				Wait Until(!Event Player.Is_Using_Ultimate, 10);
				Stop Scaling Player(Event Player);
				Set Damage Dealt(Event Player, 100);
				Set Damage Received(Event Player, 70);
				Event Player.Is_Using_Ultimate = False;
				Set Gravity(Event Player, 100);
				Set Move Speed(Event Player, 135);
				Set Ultimate Charge(Event Player, 0);
			Else If(Event Player.selected_hero_list_number == 4);
				Set Status(Event Player, Null, Unkillable, 4);
				Start Heal Over Time(Event Player, Null, 4, 10000);
				Event Player.K += 1;
				Call Subroutine(level_up_call_subroutine);
				Event Player.Is_Using_Ultimate = True;
				Call Subroutine(ultimate_ender);
				Event Player.K -= 1;
				Call Subroutine(level_up_call_subroutine);
			End;
		Else If(Hero Of(Event Player) == Hero(Reaper));
			If(Event Player.selected_hero_list_number == 0);
				Set Move Speed(Event Player, 650);
				Wait Until(!Is Using Ultimate(Event Player) || Is Assembling Heroes, 99999);
				Set Move Speed(Event Player, 125);
				Set Ultimate Charge(Event Player, 0);
			Else If(Event Player.selected_hero_list_number == 1);
				Call Subroutine(FoV_and_LoS_player_select);
				Skip If(!Event Player.FoV_and_lineOFsight_player, 6);
				Event Player.A = Normalized Health(Event Player.FoV_and_lineOFsight_player);
				Event Player.B = Normalized Health(Event Player);
				Set Player Health(Event Player, Event Player.A * Max Health(Event Player));
				Set Player Health(Event Player.FoV_and_lineOFsight_player, Event Player.B * Max Health(Event Player.FoV_and_lineOFsight_player));
				Small Message(All Players(All Teams), Custom String("{0} switched Health - {1}", Hero Icon String(Hero(Reaper)),
					Event Player.FoV_and_lineOFsight_player));
				Set Ultimate Charge(Event Player, 0);
			End;
		Else If(Hero Of(Event Player) == Hero(Reinhardt));
			If(Event Player.selected_hero_list_number == Null);
				Event Player.Berserker_lives += Event Player.Berserker_lives < 12 ? 1 : 0;
				Set Player Health(Event Player, Health(Event Player) + 1200);
			Else If(Event Player.selected_hero_list_number == 1);
				Start Forcing Throttle(Event Player, True, False, False, False, False, False);
				Disallow Button(Event Player, Button(Primary Fire));
				Set Gravity(Event Player, 5);
				Set Status(Event Player, Null, Invincible, 6);
				Create Effect(All Players(All Teams), Bad Aura, Color(Red), Event Player, True, Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Set Move Speed(Event Player, 250);
				Event Player.Is_Using_Ultimate = True;
				Start Rule(ultimate_ender, Restart Rule);
				While(Event Player.Is_Using_Ultimate && Is Alive(Event Player) && !(Has Status(Event Player, Asleep) || Has Status(Event Player,
					Frozen) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Rooted) || Has Status(Event Player, Stunned)
					|| Has Status(Event Player, Hacked)));
					Damage(Remove From Array(Players Within Radius(Event Player, 4, Opposite Team Of(Team Of(Event Player)), Off), Event Player),
						Event Player, 60);
					Set Status(Filtered Array(Players Within Radius(Event Player, 4, Opposite Team Of(Team Of(Event Player)), Surfaces), !Has Status(
						Current Array Element, Knocked Down)), Event Player, Knocked Down, 3);
					Apply Impulse(Remove From Array(Players Within Radius(Event Player, 4, Opposite Team Of(Team Of(Event Player)), Off),
						Event Player), Facing Direction Of(Event Player), 105, To World, Cancel Contrary Motion);
					Wait(0.100, Ignore Condition);
				End;
				Set Move Speed(Event Player, 125);
				Destroy Effect(Last Created Entity);
				Set Gravity(Event Player, 100);
				Allow Button(Event Player, Button(Primary Fire));
				Destroy Effect(Event Player.Effects[True]);
				Stop Forcing Throttle(Event Player);
			Else If(Event Player.selected_hero_list_number == 2);
				Play Effect(All Players(All Teams), Explosion Sound, Color(Yellow), Event Player, 150);
				Wait(0.700, Ignore Condition);
				Set Status(Players Within Radius(Event Player, 6.500, Opposite Team Of(Team Of(Event Player)), Surfaces), Null, Rooted, 2.500);
				Set Status(Event Player, Null, Rooted, 10);
				Event Player.raycast_hit_position = Event Player;
				Event Player.color = Color(Orange);
				Call Subroutine(Area_Casting_Animation);
				Abort If(Is Dead(Event Player));
				Clear Status(Players Within Radius(Event Player, 16, Opposite Team Of(Team Of(Event Player)), Off), Unkillable);
				Damage(Players Within Radius(Event Player, 16, All Teams, Surfaces), Event Player, 5000);
				Play Effect(All Players(All Teams), Bad Explosion, Color(Yellow), Event Player, 35);
				Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Event Player, 35);
				Wait(0.350, Ignore Condition);
				Kill(Event Player, Event Player);
			Else If(Event Player.selected_hero_list_number == 3);
				Event Player.Is_Using_Ultimate = True;
				Create Effect(Remove From Array(All Players(All Teams), Event Player), Sphere, Color(Sky Blue), Event Player, Event Player.A,
					Visible To Position and Radius);
				Event Player.Effects[True] = Last Created Entity;
				Create Effect(All Players(All Teams), Ring, Color(Sky Blue), Event Player, Event Player.A, Visible To Position and Radius);
				Event Player.Effects[2] = Last Created Entity;
				Chase Player Variable Over Time(Event Player, A, 16, 2.500, Destination and Duration);
				Wait(True, Ignore Condition);
				Wait Until(Is Button Held(Event Player, Button(Ultimate)) || Is In Spawn Room(Event Player)
					|| Event Player.Is_Using_Ultimate == False, 3);
				Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Event Player + Vector(False, 2.100, False), Event Player.A);
				Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Event Player, Event Player.A);
				Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 150);
				Stop Chasing Player Variable(Event Player, A);
				Destroy Effect(Event Player.Effects[True]);
				Destroy Effect(Event Player.Effects[2]);
				Event Player.P = Players Within Radius(Event Player, Event Player.A, Opposite Team Of(Team Of(Event Player)), Off);
				Start Scaling Player(Event Player.P, 0.800, True);
				Set Damage Received(Event Player.P, 105);
				Set Damage Dealt(Event Player.P, 60);
				Event Player.P.playerSpeed[False] -= 20;
				Call Subroutine(ultimate_ender);
				Stop Scaling Player(Event Player.P);
				Set Damage Dealt(Event Player.P, 115);
				Set Damage Received(Event Player.P, 70);
				Event Player.P.playerSpeed[False] += 20;
				Event Player.P = Empty Array;
				Event Player.Is_Using_Ultimate = False;
				Event Player.A = 1;
			Else If(Event Player.selected_hero_list_number == 4);
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Red), Event Player, 1);
				Play Effect(All Players(All Teams), Buff Impact Sound, Color(Red), Event Player, 100);
				Call Subroutine(create_dummy_of_EventPlayer);
				Last Created Entity.solomon_master = Event Player;
				Set Projectile Speed(Event Player.Solomon_pillar_array, 345);
				Set Damage Received(Event Player.Solomon_pillar_array, 45);
				Set Move Speed(Event Player.Solomon_pillar_array, 165);
				Set Damage Dealt(Event Player.Solomon_pillar_array, 175);
				Call Subroutine(Farthest_solomon_array_minion);
			Else If(Event Player.selected_hero_list_number == 5);
				Call Subroutine(FoV_and_LoS_player_select);
				Skip If(!Entity Exists(Event Player.FoV_and_lineOFsight_player), 8);
				Event Player.A[Slot Of(Event Player.FoV_and_lineOFsight_player)] = Event Player.FoV_and_lineOFsight_player;
				Event Player.U = Slot Of(Event Player.FoV_and_lineOFsight_player) + 5;
				Event Player.A[Event Player.U] += 1;
				Small Message(All Players(All Teams), Custom String("{0} Adapted {2}% to {1}", Hero Icon String(Hero(Reinhardt)),
					Event Player.FoV_and_lineOFsight_player, Event Player.A[Event Player.U] * 100));
				Event Player.Is_Using_Ultimate = True;
				Start Rule(ultimate_ender, Restart Rule);
				Wait Until(!Event Player.Is_Using_Ultimate, 99999);
				Event Player.A[Event Player.U] = 0.300;
			End;
		Else If(Hero Of(Event Player) == Hero(Mauga));
			Set Status(Event Player, Null, Unkillable, 9999);
			Wait(0.600, Ignore Condition);
			Set Ammo(Event Player, 1, 999);
			Wait Until(!Is Using Ultimate(Event Player), 99999);
			Clear Status(Event Player, Unkillable);
			Wait(0.600, Ignore Condition);
			Set Ammo(Event Player, 1, 300);
		Else If(Hero Of(Event Player) == Hero(Ramattra));
			If(Event Player.selected_hero_list_number == 1);
				Call Subroutine(create_dummy_of_EventPlayer);
				Event Player.K = Last Created Entity;
				Attach Players(Last Created Entity, Event Player, Vector(0, 5.500, 0));
				Set Damage Dealt(Event Player, 185);
				Create Effect(All Players(All Teams), Sphere, Color(Purple), Event Player, 14, Visible To Position and Radius);
				Event Player.Effects[1] = Last Created Entity;
				While(Entity Exists(Event Player.K));
					Modify Player Variable(Event Player, R, Append To Array, Players Within Radius(Event Player, 14, Opposite Team Of(Team Of(
						Event Player)), Surfaces));
					Event Player.P = Filtered Array(Event Player.R, Distance Between(Current Array Element, Event Player) > 14);
					Modify Player Variable(Event Player, R, Remove From Array By Value, Event Player.P);
					Event Player.R.is_healing_cursed = True;
					Event Player.P.is_healing_cursed = False;
					Start Heal Over Time(Event Player, Event Player, 1, 9999);
					Wait(0.100, Ignore Condition);
				End;
				Event Player.R.is_healing_cursed = False;
				Set Damage Dealt(Event Player, 100);
				Destroy Effect(Event Player.Effects[1]);
			End;
		End;
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) - (Hero Of(Event Player) == Hero(Reinhardt)
			&& Event Player.selected_hero_list_number == 4 ? 70 : 100));
	}
}

rule("Unkillable Loop (very easy to get ult or just Passive)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Event Player.selected_hero_list_number == 1;
		Has Spawned(Event Player) == True;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		Wait Until(!Has Status(Event Player, Unkillable) || Is In Spawn Room(Event Player), 99999);
		Set Status(Event Player, Null, Unkillable, 3);
		Loop If Condition Is True;
	}
}

rule("Orisa Marcus freeze at 1hp")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Health(Event Player) <= 1;
		Event Player.selected_hero_list_number == 1;
	}

	actions
	{
		Set Status(Event Player, Null, Frozen, 8);
		Wait(8, Ignore Condition);
		Set Player Health(Event Player, Max Health(Event Player));
	}
}

rule("Push Orisa Marcus if damaged at 1hp")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		((Event Player.selected_hero_list_number && Health(Event Player) <= 1 && Hero Of(Event Player) == Hero(Orisa)) || (
			Event Player.selected_hero_list_number == 2 && Event Player.X == 2 && Hero Of(Event Player) == Hero(Doomfist))) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Attacker - Vector(0, 2, 0), Event Player),
			Event Player.selected_hero_list_number ? 70 : 20, To World, Cancel Contrary Motion);
	}
}

rule("Orisa Ab1 Marcus start healing people in range")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Wait(0.350, Ignore Condition);
		While(!(Has Status(Event Player, Frozen) && Is In Spawn Room(Event Player)));
			Play Effect(All Players(All Teams), Ring Explosion, Color(Green), Event Player, 16);
			Heal(Players Within Radius(Event Player, 16, Team Of(Event Player), Off), Event Player, 65);
			Set Player Health(Event Player, Health(Event Player) - 100);
			Skip If(!Is Button Held(Event Player, Button(Ability 1)), 2);
			Wait(0.600, Ignore Condition);
		End;
		Stop Heal Over Time(Event Player.heal_over_time);
		Start Heal Over Time(Event Player, Event Player, 9999, 30);
		Event Player.heal_over_time = Last Heal Over Time ID;
		Start Rule(stop_healing_over_time, Restart Rule);
		Set Ability Cooldown(Event Player, Button(Ability 1), 3);
	}
}

rule("SOMBRA HERO KILLSTREAK: Damage multiplies by the difference of kills of enemies / 2")
{
	event
	{
		Player Dealt Damage;
		All;
		Sombra;
	}

	conditions
	{
		Event Ability == Button(Primary Fire);
		Event Player.selected_hero_list_number == True;
		Number Of Eliminations(Victim) > Number Of Eliminations(Event Player);
	}

	actions
	{
		"difference in kills / 2"
		Damage(Victim, Event Player, Event Damage * ((Number Of Eliminations(Victim) - Number Of Eliminations(Event Player)) / 2));
	}
}

rule("Sombra Junji Ito ULT Reverse damage to parasite")
{
	event
	{
		Player Took Damage;
		All;
		Sombra;
	}

	conditions
	{
		Event Player.Is_Using_Ultimate == True;
		Event Player.selected_hero_list_number == True;
	}

	actions
	{
		Set Player Health(Event Player, Health(Event Player) + Event Damage * 6);
		Damage(Event Player.FoV_and_lineOFsight_player, Attacker, Event Damage);
	}
}

rule("All Mei ab2 (Marie Antoinette stick to enemy and mahito transform)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		If(Event Player.selected_hero_list_number == 0);
			Detach Players(Event Player);
			If(Count Of(Players Within Radius(Event Player, 10, Opposite Team Of(Team Of(Event Player)), Off)) >= 1);
				Event Player.W = Filtered Array(Players Within Radius(Event Player, 10, Opposite Team Of(Team Of(Event Player)), Off), Is Alive(
					Current Array Element) && Closest Player To(Event Player, Opposite Team Of(Team Of(Event Player))) == Current Array Element);
				Attach Players(Event Player, Event Player.W, Vector(False, 0.600, -1));
				Small Message(Event Player.W, Custom String("Crouch to escape"));
				Wait(0.300, Ignore Condition);
				Wait Until(Is Button Held(Event Player.W, Button(Crouch)) || Is Button Held(Event Player, Button(Ability 2)), 6);
				Detach Players(Event Player);
				Event Player.W = Empty Array;
			Else;
				Small Message(Event Player, Custom String("No players in range"));
			End;
			Set Ability Cooldown(Event Player, Button(Ability 2), 8);
		Else If(Event Player.selected_hero_list_number == 1);
			Event Player.K = True;
			Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(Team 2), Event Player, 1, Visible To Position and Radius);
			Event Player.Effects[1] = Last Created Entity;
			Wait(5, Ignore Condition);
			Destroy Effect(Event Player.Effects[1]);
			Event Player.K = False;
			Set Ability Cooldown(Event Player, Button(Ability 2), 10);
	}
}

rule("Mahito Mei Transform enemy")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Mei);
		Attacker.K == True;
		Event Ability == Button(Melee);
		Attacker.selected_hero_list_number == 1;
	}

	actions
	{
		Call Subroutine(transfigure_victim);
	}
}

rule("Make people fall through floor for 3s Global value")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Array Contains(Global.Falling_floor_array, Event Player) == True;
	}

	actions
	{
		Disable Movement Collision With Environment(Event Player, True);
		Skip If(First Of(Event Player.is_falling) == True, 1);
		Wait Until(Is Dead(Event Player) || Is In Spawn Room(Event Player), 1.500);
		Skip If(First Of(Event Player.is_falling) == False, 1);
		Wait Until(Distance Between(Position Of(Event Player) * Vector(0, 1, 0), First Of(Event Player.is_falling)) <= 2, 99999);
		Modify Global Variable(Falling_floor_array, Remove From Array By Value, Event Player);
		Enable Movement Collision With Environment(Event Player);
		Event Player.is_falling = False;
	}
}

rule("Pull enemies  camping in walls")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Meleeing(Event Player) == True;
	}

	actions
	{
		Event Player.Wallee_ing = Filtered Array(Players Within Radius(Event Player, 8, Opposite Team Of(Team Of(Event Player)), Off),
			Is In Line of Sight(Current Array Element, Event Player, Barriers Do Not Block LOS) && !Is In Line of Sight(Event Player,
			Current Array Element, Barriers Do Not Block LOS));
		Apply Impulse(Event Player.Wallee_ing, Direction Towards(Event Player.Wallee_ing, Eye Position(Event Player)), 40, To World,
			Cancel Contrary Motion);
		Wait(6, Ignore Condition);
	}
}

rule("Mahito Transfigure Victim Subroutine")
{
	event
	{
		Subroutine;
		transfigure_victim;
	}

	actions
	{
		Event Player.Mahito_Transfigured[0] = True;
		Event Player.Mahito_Transfigured[2] = Event Player.selected_hero_list_number;
		Small Message(Event Player, Custom String("{0} Transformed you", Hero Icon String(Hero(Mei))));
		Wait(0.250, Ignore Condition);
		Modify Global Variable(Transport_Hero, Append To Array, Victim);
		Wait(0.800, Ignore Condition);
		Set Max Health(Event Player, 40);
		Set Move Speed(Event Player, 50);
		Disallow Button(Event Player, Button(Ability 1));
		Disallow Button(Event Player, Button(Ability 2));
		Disallow Button(Event Player, Button(Ultimate));
		Wait(5, Ignore Condition);
		Skip If(Is Dead(Event Player), 5);
		"second loop for become hero, when you go back to original"
		Event Player.Mahito_Transfigured[3] = True;
		Event Player.selecting_HUD = False;
		Wait(0.300, Ignore Condition);
		Modify Global Variable(Transport_Hero, Append To Array, Victim);
		Event Player.Mahito_Transfigured[0] = False;
	}
}

rule("Mahito Rein Transform enemy")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Reinhardt);
		Event Ability == Button(Ability 2);
		Attacker.selected_hero_list_number == 13;
	}

	actions
	{
		Call Subroutine(transfigure_victim);
	}
}

rule("Remove mordred armor subroutine")
{
	event
	{
		Subroutine;
		remove_mordred_armor;
	}

	actions
	{
		Remove Health Pool From Player(Event Player.mordred_extra_armor);
		Event Player.playerSpeed[False] += 25;
		Set Jump Vertical Speed(Event Player, 150);
		Event Player.K = True;
		Set Damage Dealt(Event Player, 125);
		Set Damage Received(Event Player, 80);
		Heal(Event Player, Event Player, 100000);
		Clear Status(Event Player, Unkillable);
		Small Message(Event Player, Custom String("{0} Armor taken off", Hero Icon String(Hero Of(Event Player))));
	}
}

rule("Illary servant airburst passive")
{
	event
	{
		Ongoing - Each Player;
		All;
		Illari;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Event Player.selected_hero_list_number == True;
	}

	actions
	{
		Event Player.A = Ammo(Event Player, 0);
		Wait Until(!Is Firing Primary(Event Player), 99999);
		Call Subroutine(FoV_and_LoS_player_select);
		If(Ammo(Event Player, 0) < Event Player.A);
			If(Distance Between(Event Player, Event Player.FoV_and_lineOFsight_player) <= 45);
				If(Entity Exists(Event Player.FoV_and_lineOFsight_player) && Is In View Angle(Event Player,
					Event Player.FoV_and_lineOFsight_player, 28 - Distance Between(Event Player, Event Player.FoV_and_lineOFsight_player)
					/ 1.180));
					Event Player.B = Players Within Radius(Event Player.FoV_and_lineOFsight_player, 2, Opposite Team Of(Team Of(Event Player)),
						Surfaces And Enemy Barriers);
					Damage(Event Player.B, Event Player, 25);
					Play Effect(All Players(All Teams), Bad Explosion, Color(Yellow), Event Player.B, 2.500);
	}
}

rule("Illary or Winston combat status passive in area")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == False;
		(Hero Of(Event Player) == Hero(Winston) || (Hero Of(Event Player) == Hero(Illari) && Event Player.selected_hero_list_number))
			== True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Damage Received(Event Player, 100 - Count Of(Players Within Radius(Event Player, 13, Opposite Team Of(Team Of(Event Player)),
			Off)) * 15);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Illari healing stuff")
{
	event
	{
		Player Dealt Healing;
		All;
		Illari;
	}

	conditions
	{
		Event Ability == Button(Primary Fire);
		Event Player.selected_hero_list_number == 1;
		Event Player != Healee;
	}

	actions
	{
		Set Status(Healee, Event Player, Unkillable, 1.200);
	}
}

rule("Lifeweaver passive for disable helthpack")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		((Hero Of(Attacker) == Hero(Brigitte) && Attacker.selected_hero_list_number == 4) || (Hero Of(Attacker) == Hero(Lifeweaver)
			&& Attacker.selected_hero_list_number)) == True;
	}

	actions
	{
		Event Player.healthpack_cursed[1] = Attacker;
		Event Player.healthpack_cursed[0] = True;
		Wait(7, Restart When True);
		Event Player.healthpack_cursed[0] = False;
	}
}

rule("Queen elzabeth received healing damage stuff rules")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	actions
	{
		If(First Of(Event Player.healthpack_cursed) == True && Event Was Health Pack);
			Wait(0.600, Ignore Condition);
			Damage(Event Player, Event Player.healthpack_cursed[1], 150);
		End;
		If(Event Player.healthpack_cursed[4] == True);
			Damage(Event Player, Event Player.healthpack_cursed[1], Event Healing * 4);
	}
}

rule("Reset healthpack denied effects")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(First Of(Event Player.healthpack_cursed) || Event Player.healthpack_cursed[4]) == True;
	}

	actions
	{
		Destroy Effect(Event Player.healthpack_cursed[2]);
		Create Effect(All Players(All Teams), Zenyatta Orb of Discord Target Effect, Color(White), Event Player, 1,
			Visible To Position and Radius);
		Event Player.healthpack_cursed[2] = Last Created Entity;
		Wait Until(!First Of(Event Player.healthpack_cursed) && !Event Player.healthpack_cursed[4], 99999);
		Destroy Effect(Event Player.healthpack_cursed[2]);
	}
}

rule("Check when a player just took damage")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Event Player != Attacker;
	}

	actions
	{
		Event Player.was_damaged = True;
		Wait(1, Restart When True);
		Event Player.was_damaged = False;
	}
}

rule("Mei Surtrr anti-armor and fire burning enemies")
{
	event
	{
		Player Dealt Damage;
		All;
		Mei;
	}

	conditions
	{
		Event Player.selected_hero_list_number == 2;
		Array Contains(Array(Button(Primary Fire), Button(Secondary Fire)), Event Ability) == True;
	}

	actions
	{
		If(Event Player.Is_Using_Ultimate);
			Set Status(Victim, Null, Burning, 2);
			Damage(Victim, Event Player, Event Damage * 0.850);
		Else;
			Damage(Victim, Event Player, Health Of Type(Victim, Armor) / 6);
	}
}

rule("Mei flying Sec.Fire while droning surtr")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Event Player.Is_Using_Ultimate == True;
		Event Player.selected_hero_list_number == 2;
	}

	actions
	{
		Apply Impulse(Event Player, Facing Direction Of(Event Player), 1, To World, Incorporate Contrary Motion);
		Wait(0.090, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Is Crippled Rule for players")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Is_Crippled == True;
	}

	actions
	{
		Set Melee Enabled(Event Player, False);
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ability Cooldown(Event Player, Button(Ability 1), 15);
		Set Ability Cooldown(Event Player, Button(Ability 2), 15);
		Set Ultimate Ability Enabled(Event Player, False);
		Set Status(Event Player, Null, Hacked, 5);
		Wait Until(!Event Player.Is_Crippled, 5);
		Set Ultimate Ability Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Small Message(Event Player, Custom String("enabled"));
		Set Melee Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Clear Status(Event Player, Hacked);
		Event Player.Is_Crippled = False;
	}
}

rule("Houdini Create Clone Subroutine")
{
	event
	{
		Subroutine;
		houdini_create_clone;
	}

	actions
	{
		Create Dummy Bot(Hero(Sombra), Team Of(Event Player), -3, Event Player + Vector(False, 2, False), Event Player);
		Last Created Entity.solomon_master = Event Player;
		Event Player.Solomon_pillar_array = Last Created Entity;
		Set Damage Received(Event Player.Solomon_pillar_array, 80);
		Event Player.U = True;
	}
}

rule("Choose rock paper or scissors")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Choice_rock_paper_scissors == -1;
		(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire)) || Is Button Held(
			Event Player, Button(Melee))) == True;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Event Player.Choice_rock_paper_scissors = 0;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Event Player.Choice_rock_paper_scissors = 1;
		Else If(Is Button Held(Event Player, Button(Melee)));
			Event Player.Choice_rock_paper_scissors = 2;
		End;
		Small Message(Event Player, Custom String("You chose {0}", Event Player.B[Event Player.Choice_rock_paper_scissors]));
	}
}

rule("Higurama only dies from melee or fall")
{
	event
	{
		Player Died;
		All;
		Torbjörn;
	}

	conditions
	{
		Event Player.selected_hero_list_number != Null;
		(Event Player == Attacker || Event Was Environment || Event Ability == Button(Melee) || (Array Contains(Array(Hero(Brigitte), Hero(
			Reinhardt), Null), Hero Of(Attacker)) && Event Ability == Button(Primary Fire))) == False;
	}

	actions
	{
		Resurrect(Event Player);
	}
}

rule("Ana semiramis damage taken poison healing")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Ana);
		Attacker.selected_hero_list_number == 2;
		Event Ability != Button(Primary Fire);
	}

	actions
	{
		Event Player.is_healing_cursed = True;
		Wait(3.500, Restart When True);
		Event Player.is_healing_cursed = False;
	}
}

rule("Rammatra Gandhi ab1 nerf")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ramattra;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Event Player.selected_hero_list_number == Null;
	}

	actions
	{
		Set Max Health(Event Player, 95);
		Chase Player Variable At Rate(Event Player, H, Normalized Health(Event Player), 1, Destination and Rate);
		Wait Until(!Is Using Ability 1(Event Player), 99999);
		Stop Chasing Player Variable(Event Player, H);
		Set Max Health(Event Player, 130);
		Wait(0.050, Ignore Condition);
		Set Player Health(Event Player, Event Player.H * Max Health(Event Player));
	}
}

rule("New Brigg ab 2 throw sphere")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Event Player.K < 4;
		Ability Charge(Event Player, Button(Ability 2)) >= 2;
		Event Player.selected_hero_list_number == 4;
	}

	actions
	{
		Call Subroutine(Felix_ballin);
		Set Ability Charge(Event Player, Button(Ability 2), False);
	}
}

rule("Felix_ballin Rule")
{
	event
	{
		Subroutine;
		Felix_ballin;
	}

	actions
	{
		Event Player.Moving_ball_array = Empty Array;
		Event Player.Moving_ball = Position Of(Event Player);
		"choose area"
		Call Subroutine(raycast_hit_position2);
		Chase Player Variable At Rate(Event Player, Moving_ball, Event Player.raycast_hit_position2, 26, Destination and Rate);
		Create Effect(All Players(All Teams), Sphere, Color(Rose), Update Every Frame(Event Player.Moving_ball), 3,
			Visible To Position and Radius);
		Event Player.Effects[True] = Last Created Entity;
		Wait Until(Event Player.Moving_ball == Event Player.raycast_hit_position2 || Count Of(Players Within Radius(
			Event Player.Moving_ball, 3.100, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers)) >= 1, 6);
		"trapped player"
		Event Player.W = First Of(Is Alive(Event Player) ? Players Within Radius(Event Player.Moving_ball, 3.100, Opposite Team Of(Team Of(
			Event Player)), Surfaces And Enemy Barriers) : Empty Array);
		Modify Global Variable(Spiderman_trap_list, Append To Array, Event Player.W);
		Stop Chasing Player Variable(Event Player, Moving_ball);
		Destroy Effect(Event Player.Effects[True]);
		If(Event Player.W.is_player_anchored <= 0);
			Event Player.W.is_player_anchored = 100;
		Else;
			Event Player.W.is_player_anchored += 45;
		End;
	}
}

rule("Zarya Choso ab2 can stop all damage over time")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Event Player.selected_hero_list_number == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Red), Event Player, 8, Visible To Position and Radius);
		Event Player.Effects[3] = Last Created Entity;
		Wait(0.250, Ignore Condition);
		While(!Is Button Held(Event Player, Button(Ability 2)) && Is Alive(Event Player));
			Heal(Remove From Array(Players Within Radius(Event Player, 8, Team Of(Event Player), Off), Event Player), Event Player, 6);
			Damage(Players Within Radius(Event Player, 8, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 3.500);
			Skip If(Event Player.Is_Using_Ultimate, 1);
			Damage(Event Player, Null, 9);
			Wait(0.050, Ignore Condition);
		End;
		Stop All Damage Over Time(Event Player);
		Destroy Effect(Event Player.Effects[3]);
		Wait(Event Player.Is_Using_Ultimate ? 1 : 9, Ignore Condition);
		Small Message(Event Player, Custom String("Aura ready"));
	}
}

rule("Zarya Choso ab1 laser")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Event Player.selected_hero_list_number == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Aim Speed(Event Player, 40);
		Start Forcing Throttle(Event Player, False, False, False, False, False, False);
		Call Subroutine(FoV_and_LoS_player_select);
		Start Facing(Event Player, Direction Towards(Event Player, Event Player.FoV_and_lineOFsight_player), 480, To World,
			Direction and Turn Rate);
		Create Beam Effect(All Players(All Teams), Good Beam, Event Player, Event Player.FoV_and_lineOFsight_player, Color(Red),
			Visible To Position and Radius);
		Event Player.Effects[2] = Last Created Entity;
		While(Is Button Held(Event Player, Button(Ability 1)));
			Call Subroutine(FoV_and_LoS_player_select);
			Skip If(!Entity Exists(Event Player.FoV_and_lineOFsight_player) || Is Dead(Event Player), 5);
			Skip If(Event Player.Is_Using_Ultimate, 1);
			Damage(Event Player, Null, 6);
			Damage(Event Player.FoV_and_lineOFsight_player, Event Player, 10);
			Wait(0.100, Ignore Condition);
		End;
		Stop Forcing Throttle(Event Player);
		Set Aim Speed(Event Player, 100);
		Destroy Effect(Event Player.Effects[2]);
		Stop Facing(Event Player);
		Wait(Event Player.Is_Using_Ultimate ? 1 : 6, Ignore Condition);
		Small Message(Event Player, Custom String("Laser ready"));
	}
}

rule("Brigg new guy level UP call")
{
	event
	{
		Subroutine;
		level_up_call_subroutine;
	}

	actions
	{
		Event Player.playerSpeed[False] = 130 + Event Player.K * 20;
		Set Damage Dealt(Event Player, 125 + 30 * Event Player.K);
		Small Message(Event Player, Custom String("Level UP: {0}", Event Player.K));
	}
}