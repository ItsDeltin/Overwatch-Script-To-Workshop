settings
{
	main
	{
		Description: "Pokemon-inspired hero designs. Currently 18 Pokemon implemented."
		Mode Name: "Pokemon Overwatch"
	}

	modes
	{
		disabled Assault
		{
			Competitive Rules: On
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		Control
		{
			Competitive Rules: On
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		Escort
		{
			Competitive Rules: On
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		Flashpoint
		{
			Competitive Rules: On
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		Hybrid
		{
			Competitive Rules: On
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		Push
		{
			Competitive Rules: On
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		disabled Skirmish
		{
			Limit Roles: 1 Tank 2 Offense 2 Support
		}
	}

	heroes
	{
		General
		{
			Ana
			{
				Ammunition Clip Size Scalar: 66%
				Biotic Grenade: Off
				No Scope: On
				Primary Fire: Off
				Sleep Dart: Off
				Ultimate Ability Nano Boost: Off
			}

			Baptiste
			{
				Ammunition Clip Size Scalar: 66%
				Immortality Field: Off
				Primary Fire: Off
				Regenerative Burst: Off
				Secondary Fire: Off
				Ultimate Ability Amplification Matrix: Off
			}

			Echo
			{
				Ammunition Clip Size Scalar: 500%
				Flight: Off
				Focusing Beam: Off
				Primary Fire: Off
				Sticky Bombs: Off
				Ultimate Ability Duplicate: Off
			}

			Genji
			{
				Health: 125%
				No Ammunition Requirement: On
				Primary Fire: Off
				Secondary Fire: Off
				Swift Strike: Off
				Ultimate Ability Dragonblade: Off
			}

			Illari
			{
				Ammunition Clip Size Scalar: 70%
				Healing Pylon: Off
				Outburst: Off
				Primary Fire: Off
				Secondary Fire: Off
				Ultimate Ability Captive Sun: Off
			}

			Junker Queen
			{
				Carnage: Off
				Commanding Shout: Off
				Jagged Blade: Off
				Primary Fire: Off
				Ultimate Ability Rampage: Off
			}

			Mercy
			{
				Angelic Descent: Off
				Guardian Angel: Off
				Health: 125%
				Primary Fire: Off
				Resurrect: Off
				Secondary Fire: Off
				Ultimate Ability Valkyrie: Off
				Weapons Enabled: Caduceus Staff Only
			}

			Moira
			{
				Biotic Orb: Off
				Fade: Off
				Primary Fire: Off
				Secondary Fire: Off
				Ultimate Ability Coalescence: Off
			}

			Pharah
			{
				Ammunition Clip Size Scalar: 200%
				Concussive Blast: Off
				Hover Jets: Off
				Jump Jet: Off
				Primary Fire: Off
				Ultimate Ability Barrage: Off
			}

			Reinhardt
			{
				Charge: Off
				Fire Strike: Off
				Primary Fire: Off
				Ultimate Ability Earthshatter: Off
			}

			Roadhog
			{
				Chain Hook: Off
				Pig Pen: Off
				Primary Fire: Off
				Take a Breather: Off
				Ultimate Ability Whole Hog: Off
			}

			Sigma
			{
				Accretion: Off
				Experimental Barrier: Off
				Kinetic Grasp: Off
				Primary Fire: Off
				Ultimate Ability Gravitic Flux: Off
			}

			Sojourn
			{
				Disruptor Shot: Off
				Power Slide: Off
				Primary Fire: Off
				Railgun Alt Fire: Off
				Secondary Fire: Off
				Ultimate Ability Overclock: Off
			}

			Soldier: 76
			{
				Ammunition Clip Size Scalar: 33%
				Biotic Field: Off
				Helix Rockets: Off
				Primary Fire: Off
				Sprint: Off
				Ultimate Ability Tactical Visor: Off
			}

			Widowmaker
			{
				Ammunition Clip Size Scalar: 28%
				Grappling Hook: Off
				Primary Fire: Off
				Ultimate Ability Infra-Sight: Off
				Venom Mine: Off
			}

			Wrecking Ball
			{
				Adaptive Shield: Off
				Ammunition Clip Size Scalar: 50%
				Grappling Claw: Off
				Piledriver: Off
				Primary Fire: Off
				Roll: Off
				Ultimate Ability Minefield: Off
			}

			Zarya
			{
				Ammunition Clip Size Scalar: 500%
				Particle Barrier: Off
				Primary Fire: Off
				Projected Barrier: Off
				Secondary Fire: Off
				Ultimate Ability Graviton Surge: Off
			}

			Zenyatta
			{
				Ammunition Clip Size Scalar: 120%
				Orb of Discord: Off
				Orb of Harmony: Off
				Primary Fire: Off
				Secondary Fire: Off
				Ultimate Ability Transcendence: Off
			}

			enabled heroes
			{
				Ana
				Baptiste
				Echo
				Genji
				Illari
				Junker Queen
				Mercy
				Moira
				Pharah
				Reinhardt
				Roadhog
				Sigma
				Sojourn
				Soldier: 76
				Widowmaker
				Wrecking Ball
				Zarya
				Zenyatta
			}
		}
	}

	extensions
	{
		Beam Effects
		Projectiles
		Debuff Status Effects
	}
}

variables
{
	global:
		0: SleepingTarget1
		1: SleepingTarget2

	player:
		0: range
		1: dps
		2: MoonlightCheck
		3: UltCharge
		4: BeamVisibility
		5: HypnosisCheck
		6: Spinning
		7: Destination
		8: UltDuration
		9: UltWeewoo
		10: StunSpore
		11: AmplifierCheck
		12: AromaID
		13: ParalyzeRNG
		14: UltEooowwww
		15: TailwindActive
		16: EffectID1
		17: EffectID2
		18: EffectID3
		19: EffectID4
		20: Scalding
		21: LeechSeed
		22: EffectID5
		23: ZapEffect
		24: UltEffect
		25: EffectID8
		26: TailwindEffect
		27: Burning
		28: SporeGirlies
		29: BurnCount
		30: HexTarget
		31: ShaftID
		32: FireSpinLocation
		33: FireSpinDestination
		34: SpinActive
		35: RNG
		36: BeamID1
		39: HealingWish
		42: HelpingHand
		43: egg
		44: Softboiled
		45: Wispy
		46: Leafy
		48: BlizzardLocation
		49: BlizID
		50: Spouting
		51: Sapped
		52: Sapping
		53: Silly1
		54: Silly2
		55: Silly3
		56: Size
		57: DischargeDMG
		58: IsCharging
		59: Goop
		60: ThunderedGirlies
		61: Gag
		62: StringShot
		63: Cocoon
		64: Cloud
		65: Juice
		66: BeamDMG
		67: Beamactive
		68: StickyWeb1
		69: BeamEffect
		70: StickyDest1
		71: StickyActive1
		72: StickyID
		73: Mommy
		74: FutureSight
		75: HOTID
		76: Toxic
		77: ToxicDOT
		78: Eeeek
		79: ToxicActive
		80: Readingiswhat
		81: IronDefenseCooldown
		82: IronDefenseLocation
		83: DummyBot
		84: IronDefenseActive
		85: IronDefenseEffects
		86: HealthPool
		87: AcidSpray
		88: AcidVictim
		89: UltTarget
		90: UltStart
		91: UltEffects
		92: HasShields
		93: StealthRock
		94: BubbleID1
		95: BubbleID2
		96: FairyWind
		97: Slashing
		98: Roosting
		99: SkyAttackEffect
		100: SkyAttackDest
		101: SkyAttackLocation
		102: PsychicCount
		103: PsychicTarget
		104: HealPulseTarget
		105: EffectVisibility
		106: Snatching
		107: Snatched
		108: ShadowTag
		109: ShadowTagVisibility
		110: UltimateSizeHenny
		111: SphereID
		112: HydroPump
		113: Mist
		114: Surf
		115: PerishSongTargets
}

subroutines
{
	0: Sub0
}

rule("Primary Fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Ammo(Event Player, 0) != 0;
		Is Alive(Event Player) == True;
		Is Reloading(Event Player) == False;
		Event Player.HypnosisCheck == False;
	}

	actions
	{
		Event Player.BeamVisibility = All Players(All Teams);
		Damage(Filtered Array(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))), Distance Between(
			Event Player, Current Array Element) <= Event Player.range && Is In Line of Sight(Event Player, Current Array Element,
			Enemy Barriers Block LOS) && Is In View Angle(Event Player, Current Array Element, 5.250)), Event Player,
			Event Player.dps / 62.500);
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) - 1);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Event Player.BeamVisibility = Null;
	}
}

rule("Beam Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	actions
	{
		Event Player.BeamVisibility = All Players(All Teams);
		Event Player.range = 18;
		Event Player.dps = 110;
		Event Player.UltCharge = Vector(-0.150, -0.220, 0);
		Create Beam Effect(Event Player.BeamVisibility, Zarya Particle Beam, Eye Position(Event Player) + World Vector Of(
			Event Player.UltCharge, Event Player, Rotation), Eye Position(Event Player) + Facing Direction Of(Event Player)
			* Event Player.range, Color(Rose), Visible To Position and Radius);
	}
}

rule("Rule 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		(Is Button Held(Event Player, Button(Primary Fire)) || Ammo(Event Player, 0) > 0) == False;
	}

	actions
	{
		Event Player.BeamVisibility = Null;
	}
}

rule("LShift Start")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Event Player.MoonlightCheck == 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.MoonlightCheck = True;
		Create Effect(All Players(All Teams), Light Shaft, Color(Rose), Event Player, 2, Visible To Position and Radius);
		Event Player.EffectID1 = Last Created Entity;
		Create Effect(All Players(All Teams), Ring, Color(Rose), Event Player, 10.500, Visible To Position and Radius);
		Event Player.EffectID2 = Last Created Entity;
		Create Effect(All Players(All Teams), Good Aura Sound, Color(White), Event Player, 75, Visible To Position and Radius);
		Event Player.EffectID3 = Last Created Entity;
		Wait(5, Ignore Condition);
		Event Player.MoonlightCheck = False;
		Destroy Effect(Event Player.EffectID1);
		Destroy Effect(Event Player.EffectID2);
		Destroy Effect(Event Player.EffectID3);
		Wait(13, Ignore Condition);
		Event Player.MoonlightCheck = 0;
		Small Message(Event Player, Custom String("Moonlight ready. {0}", Ability Icon String(Hero(Illari), Button(Ultimate))));
	}
}

rule("LShift Effects")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Event Player.MoonlightCheck == True;
	}

	actions
	{
		Heal(Players Within Radius(Event Player, 10.500, Team Of(Event Player), Surfaces And Enemy Barriers), Event Player, 0.640);
		Heal(Event Player, Event Player, 0.560);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("E")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Event Player.HypnosisCheck == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.HypnosisCheck = True;
		Create Beam Effect(All Players(All Teams), Echo Focusing Beam, Eye Position(Event Player) + Vector(0, 0.240, 0), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * 10, Color(Purple), Visible To Position and Radius);
		Event Player.EffectID4 = Last Created Entity;
		Wait(1.500, Ignore Condition);
		Destroy Effect(Event Player.EffectID4);
		Set Ability Cooldown(Event Player, Button(Ability 2), 13);
		Destroy Effect(Last Created Entity);
		Event Player.HypnosisCheck = False;
		Disallow Button(Event Player, Button(Ability 2));
		Wait(14, Ignore Condition);
		Allow Button(Event Player, Button(Ability 2));
		Small Message(Event Player, Custom String("Hypnosis Ready. {0}", Ability Icon String(Hero(Ana), Button(Ability 1))));
	}
}

rule("E Effects")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Event Player.HypnosisCheck == True;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Damage(Filtered Array(Players Within Radius(Event Player, 10, Opposite Team Of(Team Of(Event Player)),
			Surfaces And Enemy Barriers), Is In View Angle(Event Player, Current Array Element, 9) && !Has Status(Current Array Element,
			Asleep)), Event Player, 5);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Event Player.UltEooowwww >= 2730;
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	actions
	{
		Teleport(Event Player, Ray Cast Hit Position(Position Of(Event Player), Position Of(Event Player) + Vector(0, 10, 0), All Players(
			All Teams), Event Player, True));
		Set Gravity(Event Player, 0);
		Wait(0.500, Ignore Condition);
		Wait Until(Is Button Held(Event Player, Button(Primary Fire)), 99999);
		Event Player.UltWeewoo = True;
		Set Gravity(Event Player, 100);
		Big Message(All Players(Team Of(Event Player)), Custom String("{0} {1}: Future Sight! {2}", Hero Icon String(Hero(Zarya)),
			Event Player, Ability Icon String(Hero(Mercy), Button(Ultimate))));
		Big Message(All Players(Opposite Team Of(Team Of(Event Player))), Custom String("{0} {1}: There, I see it! {2}", Hero Icon String(
			Hero(Zarya)), Event Player, Ability Icon String(Hero(Mercy), Button(Ultimate))));
		Event Player.UltDuration = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 40, Null, Event Player, True);
		Create Effect(All Players(All Teams), Light Shaft, Color(Rose), Event Player.UltDuration, 13, Visible To Position and Radius);
		Event Player.EffectID5 = Last Created Entity;
		Wait(2.500, Ignore Condition);
		Damage(Players Within Radius(Event Player.UltDuration, 13, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 80);
		Set Status(Players Within Radius(Event Player.UltDuration, 13, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player,
			Asleep, 5);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Rose), Event Player.UltDuration, 26);
		Event Player.UltDuration = Vector(0, -50, 0);
		Destroy Effect(Event Player.EffectID5);
		Wait(5, Ignore Condition);
		Event Player.UltEooowwww = 0;
		Event Player.UltWeewoo = False;
	}
}

rule("Secondary Fire Orb")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Event Player.AmplifierCheck == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.AmplifierCheck = True;
		Create Projectile(Moira Damage Orb, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 75, 1, 4,
			Ring Explosion, Ring Explosion Sound, 0, 50, 5, 10, 0, 0);
		Wait(5, Ignore Condition);
		Small Message(Event Player, Custom String("Shadow Ball ready. {0}", Ability Icon String(Hero(Zarya), Button(Ability 1))));
		Event Player.AmplifierCheck = False;
	}
}

rule("Orb Init (Below)")
{
	event
	{
		Player Dealt Damage;
		All;
		Zarya;
	}

	conditions
	{
		Event Player.AmplifierCheck == True;
		Event Damage >= 10;
	}

	actions
	{
		Set Status(Victim, Event Player, Hacked, 0.500);
		Event Player.AmplifierCheck = False;
	}
}

rule("E Effects")
{
	event
	{
		Player Dealt Damage;
		All;
		Zarya;
	}

	conditions
	{
		Event Player.HypnosisCheck == True;
	}

	actions
	{
		Skip If(Has Status(Victim, Asleep), 1);
		Set Status(Victim, Event Player, Asleep, 5);
	}
}

rule("Passive Team 1")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zarya;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Global.SleepingTarget1 != 0;
	}

	actions
	{
		Heal(Event Player, Event Player, Global.SleepingTarget1 * 0.560);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Passive Visual Effects Team 1")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zarya;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Global.SleepingTarget1 != 0;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion, Color(Rose), Event Player, 5);
		Create Effect(All Players(All Teams), Sparkles Sound, Color(White), Event Player, 75, Visible To Position and Radius);
		Event Player.EffectID8 = Last Created Entity;
		Wait(0.800, Ignore Condition);
		Destroy Effect(Event Player.EffectID8);
		Loop If Condition Is True;
	}
}

rule("Passive Setup Team 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Status(Event Player, Asleep) == True;
	}

	actions
	{
		Global.SleepingTarget1 += 1;
		Wait Until(!Has Status(Event Player, Asleep), 99999);
		Global.SleepingTarget1 -= 1;
	}
}

rule("Passive Setup Team 2")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Asleep) == True;
	}

	actions
	{
		Global.SleepingTarget2 += 1;
		Wait Until(!Has Status(Event Player, Asleep), 99999);
		Global.SleepingTarget2 -= 1;
	}
}

rule("Passive Team 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zarya;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Global.SleepingTarget2 != 0;
	}

	actions
	{
		Heal(Event Player, Event Player, Global.SleepingTarget2 * 0.560);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Passive Visual Effects Team 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zarya;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Global.SleepingTarget2 != 0;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion, Color(Rose), Event Player, 5);
		Create Effect(All Players(All Teams), Sparkles Sound, Color(White), Event Player, 75, Visible To Position and Radius);
		Event Player.EffectID8 = Last Created Entity;
		Wait(0.800, Ignore Condition);
		Destroy Effect(Event Player.EffectID8);
		Loop If Condition Is True;
	}
}

rule("Ult Charge Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Zarya;
	}

	conditions
	{
		Event Player.UltEooowwww < 2730;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Ult Charge Healing")
{
	event
	{
		Player Dealt Healing;
		All;
		Zarya;
	}

	conditions
	{
		Event Player.UltEooowwww < 2730;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Healing;
	}
}

rule("Passive Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Event Player.UltEooowwww < 2730;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += 5;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult charge ui")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Ultimate Charge: {0}% {1}", Event Player.UltEooowwww / 27.300, Ability Icon String(
			Hero(Sigma), Button(Ultimate))), Null, Null, Top, 0, Color(Rose), Color(Violet), Color(Violet), Visible To and String,
			Default Visibility);
		Wait Until(Event Player.UltEooowwww >= 2730, 99999);
		Destroy HUD Text(Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 75);
		Create HUD Text(Event Player, Custom String("Ultimate Ready!"), Null, Null, Top, 0, Color(Rose), Color(White), Color(Gray),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == True, 99999);
		Destroy HUD Text(Last Text ID);
		Create HUD Text(Event Player, Custom String("Using Future Sight... {0}", Ability Icon String(Hero(Sigma), Button(Ultimate))), Null,
			Null, Top, 0, Color(Rose), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == False, 99999);
		Destroy All HUD Text;
		Loop;
	}
}

rule("Rule 22")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Event Player.UltEooowwww = 0;
	}
}

rule("Add health")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Max Health Of Type(Event Player, Shields) < 230;
	}

	actions
	{
		Add Health Pool To Player(Event Player, Shields, 25, True, False);
	}
}

rule("Health Cap")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Max Health Of Type(Event Player, Shields) > 260;
	}

	actions
	{
		Remove All Health Pools From Player(Event Player);
	}
}

rule("Remove Health Pools")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Zarya);
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Remove All Health Pools From Player(Event Player);
	}
}

rule("Rule 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Illari;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Reloading(Event Player) == False;
		Event Player.StunSpore == 0;
		Is Alive(Event Player) == True;
		Event Player.UltWeewoo != True;
	}

	actions
	{
		Create Projectile(Zarya Particle Cannon, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 70,
			0.500, 3, Good Explosion, Explosion Sound, 0.020, 40, 5, 0, 0, 0);
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) - 1);
		Wait(0.825, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 2")
{
	event
	{
		Player Dealt Damage;
		All;
		Illari;
	}

	conditions
	{
		Event Damage > 1;
	}

	actions
	{
		Stop Heal Over Time(Event Player.AromaID);
		Heal(Players Within Radius(Event Player, 16, Team Of(Event Player), Surfaces And Enemy Barriers), Event Player, 9);
		Start Heal Over Time(Players Within Radius(Event Player, 16, Team Of(Event Player), Surfaces And Enemy Barriers), Event Player,
			4.500, 18);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Lime Green), Event Player, 32);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Event Player, 5);
		Event Player.AromaID = Last Heal Over Time ID;
		Wait(1, Ignore Condition);
	}
}

rule("Rule 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Illari;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Alive(Event Player) == True;
		Event Player.UltWeewoo != True;
	}

	actions
	{
		Event Player.StunSpore = 1;
		Create Projectile(Baptiste Biotic Launcher, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)),
			20, 1, 5, Ring Explosion, Explosion Sound, 0, 50, 0.750, 0, 0, 20);
		Wait(0.750, Ignore Condition);
		Event Player.StunSpore = 0;
		Wait(6, Ignore Condition);
		Small Message(Event Player, Custom String("Stun Spore ready. {0}", Ability Icon String(Hero(Sombra), Button(Secondary Fire))));
	}
}

rule("Rule 4")
{
	event
	{
		Player Dealt Damage;
		All;
		Illari;
	}

	conditions
	{
		Event Player.StunSpore == 1;
	}

	actions
	{
		Wait(0.050, Ignore Condition);
		Event Player.StunSpore = 0;
		Event Player.SporeGirlies = Players Within Radius(Victim, 5, Opposite Team Of(Team Of(Event Player)), Surfaces);
		Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Yellow), Victim, 1,
			Visible To Position and Radius);
		Event Player.ZapEffect = Last Created Entity;
		Start Assist(Event Player, Event Player.SporeGirlies, Assisters and Targets);
		Set Move Speed(Event Player.SporeGirlies, 50);
		Start Damage Over Time(Event Player.SporeGirlies, Event Player, 3, 8.334);
		Event Player.ParalyzeRNG = Random Integer(0, 3);
		If(Event Player.ParalyzeRNG == 3);
			Set Status(Event Player.SporeGirlies, Event Player, Stunned, 0.250);
		End;
		Wait(1, Ignore Condition);
		Event Player.ParalyzeRNG = Random Integer(0, 3);
		If(Event Player.ParalyzeRNG == 3);
			Set Status(Event Player.SporeGirlies, Event Player, Stunned, 0.250);
		End;
		Wait(1, Ignore Condition);
		Event Player.ParalyzeRNG = Random Integer(0, 3);
		If(Event Player.ParalyzeRNG == 3);
			Set Status(Event Player.SporeGirlies, Event Player, Stunned, 0.250);
		End;
		Wait(1, Ignore Condition);
		Set Move Speed(Event Player.SporeGirlies, 100);
		Destroy Effect(Event Player.ZapEffect);
		Stop Assist(Last Assist ID);
	}
}

rule("Rule 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		Illari;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Alive(Event Player) == True;
		Event Player.UltWeewoo != True;
	}

	actions
	{
		Apply Impulse(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), Vertical Facing Angle Of(Event Player)
			+ -20), 20, To World, Cancel Contrary Motion);
		Event Player.TailwindActive = True;
		Create Effect(All Players(All Teams), Ring, Color(White), Event Player, 13, Visible To Position and Radius);
		Event Player.TailwindEffect = Last Created Entity;
		Wait(4, Ignore Condition);
		Destroy Effect(Event Player.TailwindEffect);
		Set Ability Cooldown(Event Player, Button(Ability 1), 10);
		Event Player.TailwindActive = False;
	}
}

rule("Rule 6")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Players On Hero(Hero(Illari), Team Of(Event Player))) <= 13;
		Players On Hero(Hero(Illari), Team Of(Event Player)).TailwindActive == True;
		Is In Line of Sight(Event Player, Players On Hero(Hero(Illari), Team Of(Event Player)), Barriers Do Not Block LOS) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 150);
	}
}

rule("Rule 7")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Players On Hero(Hero(Illari), Team Of(Event Player))) > 13;
	}

	actions
	{
		Wait(1.500, Abort When False);
		Set Move Speed(Event Player, 100);
	}
}

rule("Rule 7")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Players On Hero(Hero(Illari), Team Of(Event Player)).TailwindActive == False;
	}

	actions
	{
		Set Move Speed(Event Player, 100);
	}
}

rule("Rule 7")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Line of Sight(Event Player, Players On Hero(Hero(Illari), Team Of(Event Player)), Barriers Do Not Block LOS) == False;
	}

	actions
	{
		Wait(1.500, Abort When False);
		Set Move Speed(Event Player, 100);
	}
}

rule("Rule 10")
{
	event
	{
		Ongoing - Each Player;
		All;
		Illari;
	}

	conditions
	{
		Event Player.TailwindActive == True;
	}

	actions
	{
		Heal(Players Within Radius(Event Player, 13, Team Of(Event Player), Surfaces), Event Player, 6.250);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 11")
{
	event
	{
		Ongoing - Each Player;
		All;
		Illari;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Jump)) == True;
		Is In Air(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Gravity(Event Player, 20);
		Wait Until(!Is Button Held(Event Player, Button(Jump)), 99999);
		Set Gravity(Event Player, 100);
	}
}

rule("Rule 12")
{
	event
	{
		Ongoing - Each Player;
		All;
		Illari;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Alive(Event Player) == True;
		Event Player.UltWeewoo != True;
	}

	actions
	{
		Event Player.LeechSeed = True;
		Create Projectile(Moira Damage Orb, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 55, 1, 3,
			Bad Explosion, Explosion Sound, 0, 60, 0.800, 0, 0, 0);
		Wait(0.800, Ignore Condition);
		Event Player.LeechSeed = False;
		Set Ability Cooldown(Event Player, Button(Ability 2), 8);
	}
}

rule("Rule 13")
{
	event
	{
		Player Dealt Damage;
		All;
		Illari;
	}

	conditions
	{
		Event Player.LeechSeed == True;
	}

	actions
	{
		Event Player.LeechSeed = False;
		Set Status(Players Within Radius(Victim, 3, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, Hacked, 3);
	}
}

rule("Ult Charge Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Illari;
	}

	conditions
	{
		Event Player.UltEooowwww < 2660;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Ult Charge Healing")
{
	event
	{
		Player Dealt Healing;
		All;
		Illari;
	}

	conditions
	{
		Event Player.UltEooowwww < 2660;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Healing;
	}
}

rule("Passive Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Illari;
	}

	conditions
	{
		Event Player.UltEooowwww < 2660;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += 5;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult charge ui")
{
	event
	{
		Ongoing - Each Player;
		All;
		Illari;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Ultimate Charge: {0}% {1}", Event Player.UltEooowwww / 26.600, Ability Icon String(
			Hero(Lifeweaver), Button(Ultimate))), Null, Null, Top, 0, Color(Lime Green), Color(Violet), Color(Violet),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltEooowwww >= 2660, 99999);
		Destroy HUD Text(Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 75);
		Create HUD Text(Event Player, Custom String("Ultimate Ready!"), Null, Null, Top, 0, Color(Lime Green), Color(White), Color(Gray),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == True, 99999);
		Destroy HUD Text(Last Text ID);
		Create HUD Text(Event Player, Custom String("Using Solar Beam... {0}", Ability Icon String(Hero(Lifeweaver), Button(Ultimate))),
			Null, Null, Top, 0, Color(Lime Green), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.AmplifierCheck = Last Text ID;
		Wait Until(Event Player.UltWeewoo == False, 99999);
		Destroy HUD Text(Event Player.AmplifierCheck);
		Loop;
	}
}

rule("Rule 22")
{
	event
	{
		Ongoing - Each Player;
		All;
		Illari;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 19")
{
	event
	{
		Ongoing - Each Player;
		All;
		Illari;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Alive(Event Player) == True;
		Event Player.UltEooowwww >= 2660;
	}

	actions
	{
		Create Beam Effect(All Players(All Teams), Moira Coalescence Beam, Eye Position(Event Player) + Vector(0, 0.340, 0), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * 30, Color(White), Visible To Position and Radius);
		Event Player.UltEffect[0] = Last Created Entity;
		Create Effect(All Players(All Teams), Ring, Color(Lime Green), Event Player, 9.500, Visible To Position and Radius);
		Event Player.UltEffect[1] = Last Created Entity;
		Event Player.UltWeewoo = True;
		Set Move Speed(Event Player, 135);
		Wait(7, Ignore Condition);
		Destroy Effect(Event Player.UltEffect);
		Event Player.UltWeewoo = False;
		Event Player.UltEooowwww = 0;
		Set Move Speed(Event Player, 100);
	}
}

rule("Rule 20")
{
	event
	{
		Ongoing - Each Player;
		All;
		Illari;
	}

	conditions
	{
		Event Player.UltWeewoo == True;
	}

	actions
	{
		Damage(Filtered Array(Players Within Radius(Event Player, 30, Opposite Team Of(Team Of(Event Player)), Surfaces), Is In View Angle(
			Event Player, Current Array Element, 12)), Event Player, 1.200);
		Heal(Filtered Array(Players Within Radius(Event Player, 30, Team Of(Event Player), Surfaces), Is In View Angle(Event Player,
			Current Array Element, 12)), Event Player, 2.880);
		Heal(Players Within Radius(Event Player, 9.500, Team Of(Event Player), Surfaces), Event Player, 1.920);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Ammo(Event Player, 0) > 0;
		Is Reloading(Event Player) == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create Projectile(Orb Projectile, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 70, 1, 5,
			Bad Explosion, Explosion Sound, 0.100, 20, 5, 8, 0, 0);
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) - 1);
		Wait(0.750, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create Projectile(Orb Projectile, Event Player, Null, Null, To World, Heal, Team Of(Event Player), 14, 1, 2.500, Ring Explosion,
			Explosion Sound, 0, 50, 0.400, 0, 0, 0);
		Wait(0.150, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.Spinning = True;
		Event Player.Destination = Nearest Walkable Position(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 40, All Players(All Teams), Event Player, True));
		Set Move Speed(Event Player, 600);
		Create Effect(All Players(All Teams), Sphere, Color(Blue), Event Player, 1, Visible To Position and Radius);
		Event Player.EffectID1 = Last Created Entity;
		Wait(1, Ignore Condition);
		Event Player.Spinning = False;
		Set Ability Cooldown(Event Player, Button(Ability 1), 4);
		Destroy Effect(Event Player.EffectID1);
		Stop Throttle In Direction(Event Player);
		Set Move Speed(Event Player, 100);
	}
}

rule("Rule 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Event Player.Spinning == True;
	}

	actions
	{
		Damage(Players Within Radius(Event Player, 5, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 5);
		Apply Impulse(Players Within Radius(Event Player, 5, Opposite Team Of(Team Of(Event Player)), Surfaces), Facing Direction Of(
			Event Player), 25, To World, Cancel Contrary Motion);
		Set Environment Credit Player(Players Within Radius(Event Player, 5, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Event Player);
		Heal(Event Player, Event Player, 4);
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.Burning = 0;
		Event Player.Scalding = True;
		Create Beam Effect(All Players(All Teams), Good Beam, Eye Position(Event Player) + Vector(0, -0.300, 0), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 25, Color(Blue), Visible To Position and Radius);
		Event Player.EffectID2 = Last Created Entity;
		Wait(2, Ignore Condition);
		Destroy Effect(Event Player.EffectID2);
		Set Ability Cooldown(Event Player, Button(Ability 2), 9);
		Event Player.Scalding = False;
		Start Damage Over Time(Event Player.Burning, Event Player, 3, 20);
		Set Status(Event Player.Burning, Event Player, Burning, 3);
		Set Damage Dealt(Event Player.Burning, 60);
		Wait(3, Ignore Condition);
		Set Damage Dealt(Event Player.Burning, 100);
	}
}

rule("Rule 6")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Event Player.Scalding == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Damage(Filtered Array(Players Within Radius(Event Player, 25, Opposite Team Of(Team Of(Event Player)),
			Surfaces And Enemy Barriers), Is In View Angle(Event Player, Current Array Element, 10)), Event Player, 1.200);
		Modify Player Variable(Event Player, Burning, Append To Array, Filtered Array(Players Within Radius(Event Player, 25,
			Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Is In View Angle(Event Player, Current Array Element,
			10)));
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 7")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Alive(Event Player) == True;
		Event Player.UltEooowwww >= 2100;
	}

	actions
	{
		Event Player.UltWeewoo = True;
		Set Move Speed(Event Player, 125);
		Create Effect(All Players(All Teams), Ring, Color(Sky Blue), Event Player, 15, Visible To Position and Radius);
		Event Player.EffectID3 = Last Created Entity;
		Event Player.HypnosisCheck = True;
		Wait(8, Ignore Condition);
		Event Player.HypnosisCheck = False;
		Destroy Effect(Event Player.EffectID3);
		Damage(Players Within Radius(Event Player, 20, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 50);
		Apply Impulse(Players Within Radius(Event Player, 20, Opposite Team Of(Team Of(Event Player)), Surfaces), Facing Direction Of(
			Event Player), 20, To World, Cancel Contrary Motion);
		Heal(Players Within Radius(Event Player, 20, Team Of(Event Player), Surfaces), Event Player, 80);
		Event Player.UltWeewoo = False;
		Event Player.UltEooowwww = 0;
		Play Effect(All Players(All Teams), Ring Explosion, Color(Aqua), Event Player, 40);
		Set Move Speed(Event Player, 100);
	}
}

rule("Ult Charge Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Ana;
	}

	conditions
	{
		Event Player.UltEooowwww < 2100;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Ult Charge Healing")
{
	event
	{
		Player Dealt Healing;
		All;
		Ana;
	}

	conditions
	{
		Event Player.UltEooowwww < 2100;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Healing;
	}
}

rule("Passive Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Event Player.UltEooowwww < 2100;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += 5;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult charge ui")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Ultimate Charge: {0}% {1}", Event Player.UltEooowwww / 21, Ability Icon String(Hero(
			Sigma), Button(Ultimate))), Null, Null, Top, 0, Color(Aqua), Color(Violet), Color(Violet), Visible To and String,
			Default Visibility);
		Wait Until(Event Player.UltEooowwww >= 2100, 99999);
		Destroy HUD Text(Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 75);
		Create HUD Text(Event Player, Custom String("Ultimate Ready!"), Null, Null, Top, 0, Color(Aqua), Color(White), Color(Gray),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == True, 99999);
		Destroy HUD Text(Last Text ID);
		Create HUD Text(Event Player, Custom String("Using Surf... {0}", Ability Icon String(Hero(Sigma), Button(Ultimate))), Null, Null,
			Top, 0, Color(Aqua), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.AmplifierCheck = Last Text ID;
		Wait Until(Event Player.UltWeewoo == False, 99999);
		Destroy HUD Text(Event Player.AmplifierCheck);
		Loop;
	}
}

rule("Rule 22")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 13")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Event Player.HypnosisCheck == True;
	}

	actions
	{
		Damage(Players Within Radius(Event Player, 15, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 10);
		Heal(Players Within Radius(Event Player, 15, Team Of(Event Player), Surfaces), Event Player, 30);
		Apply Impulse(Players Within Radius(Event Player, 15, Opposite Team Of(Team Of(Event Player)), Surfaces), Direction From Angles(
			Horizontal Facing Angle Of(Event Player), Vertical Facing Angle Of(Event Player) + -15), 5, To World, Cancel Contrary Motion);
		Set Environment Credit Player(Players Within Radius(Event Player, 15, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Event Player);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Aqua), Event Player, 30);
		Wait(0.200, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == False;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Stunned) == False;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Damage(Filtered Array(Players Within Radius(Event Player, 10, Opposite Team Of(Team Of(Event Player)), Surfaces), Is In View Angle(
			Event Player, Current Array Element, 30) && Altitude Of(Current Array Element) <= 1), Event Player, 60);
		Apply Impulse(Filtered Array(Players Within Radius(Event Player, 10, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Is In View Angle(Event Player, Current Array Element, 30) && Altitude Of(Current Array Element) <= 1), Direction From Angles(
			Horizontal Facing Angle Of(Event Player) + Random Real(-30, 30), Vertical Facing Angle Of(Event Player) + -10), 8, To World,
			Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Good Explosion, Color(Gray), Event Player, 3);
		Wait(0.400, Ignore Condition);
		Loop If Condition Is True;
		Set Environment Credit Player(Filtered Array(Players Within Radius(Event Player, 10, Opposite Team Of(Team Of(Event Player)),
			Surfaces), Is In View Angle(Event Player, Current Array Element, 30) && Altitude Of(Current Array Element) <= 1),
			Event Player);
	}
}

rule("Rule 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Stunned) == False;
	}

	actions
	{
		Apply Impulse(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), Vertical Facing Angle Of(Event Player)
			+ -6), 28, To World, Cancel Contrary Motion);
		Wait(0.500, Ignore Condition);
		Damage(Filtered Array(Players Within Radius(Event Player, 5, Opposite Team Of(Team Of(Event Player)), Surfaces), Is In View Angle(
			Event Player, Current Array Element, 180)), Event Player, 120);
		Apply Impulse(Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)), 180) == True ? Players Within Radius(
			Event Player, 5, Opposite Team Of(Team Of(Event Player)), Surfaces) : Empty Array, Direction From Angles(
			Horizontal Facing Angle Of(Event Player), Vertical Facing Angle Of(Event Player) + -15), 27, To World, Cancel Contrary Motion);
		Set Status(Filtered Array(Players Within Radius(Event Player, 5, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Is In View Angle(Event Player, Current Array Element, 180)), Event Player, Knocked Down, 1.500);
		Play Effect(All Players(All Teams), Good Explosion, Color(Gray), Event Player, 3);
		Set Ability Cooldown(Event Player, Button(Ability 1), 7);
	}
}

rule("Rule 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Stunned) == False;
	}

	actions
	{
		Create Homing Projectile(Bastion A-36 Tactical Grenade, Event Player, Eye Position(Event Player) + World Vector Of(Vector(3, 3, 0),
			Event Player, Rotation), Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 25, 1, 3, Bad Explosion,
			Explosion Sound, 0, 20, 1.500, 6, Filtered Array(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(
			Event Player))), Distance Between(Event Player, Current Array Element) <= 30 && Is In Line of Sight(Event Player,
			Current Array Element, Barriers Do Not Block LOS) && Is In View Angle(Event Player, Current Array Element, 15)), 0.750);
		Wait(0.100, Ignore Condition);
		Create Homing Projectile(Bastion A-36 Tactical Grenade, Event Player, Eye Position(Event Player) + World Vector Of(Vector(-3, 3,
			0), Event Player, Rotation), Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 25, 1, 3, Bad Explosion,
			Explosion Sound, 0, 20, 1.500, 6, Filtered Array(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(
			Event Player))), Distance Between(Event Player, Current Array Element) <= 30 && Is In Line of Sight(Event Player,
			Current Array Element, Barriers Do Not Block LOS) && Is In View Angle(Event Player, Current Array Element, 15)), 0.750);
		Wait(0.100, Ignore Condition);
		Create Homing Projectile(Bastion A-36 Tactical Grenade, Event Player, Eye Position(Event Player) + World Vector Of(Vector(5, 0, 0),
			Event Player, Rotation), Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 25, 1, 3, Bad Explosion,
			Explosion Sound, 0, 20, 1.500, 6, Filtered Array(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(
			Event Player))), Distance Between(Event Player, Current Array Element) <= 30 && Is In Line of Sight(Event Player,
			Current Array Element, Barriers Do Not Block LOS) && Is In View Angle(Event Player, Current Array Element, 15)), 0.750);
		Wait(0.100, Ignore Condition);
		Create Homing Projectile(Bastion A-36 Tactical Grenade, Event Player, Eye Position(Event Player) + World Vector Of(Vector(-5, 0,
			0), Event Player, Rotation), Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 25, 1, 3, Bad Explosion,
			Explosion Sound, 0, 20, 1.500, 6, Filtered Array(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(
			Event Player))), Distance Between(Event Player, Current Array Element) <= 30 && Is In Line of Sight(Event Player,
			Current Array Element, Barriers Do Not Block LOS) && Is In View Angle(Event Player, Current Array Element, 15)), 0.750);
		Wait(0.100, Ignore Condition);
		Create Homing Projectile(Bastion A-36 Tactical Grenade, Event Player, Eye Position(Event Player) + World Vector Of(Vector(0, 5, 0),
			Event Player, Rotation), Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 25, 1, 3, Bad Explosion,
			Explosion Sound, 0, 20, 1.500, 6, Filtered Array(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(
			Event Player))), Distance Between(Event Player, Current Array Element) <= 30 && Is In Line of Sight(Event Player,
			Current Array Element, Barriers Do Not Block LOS) && Is In View Angle(Event Player, Current Array Element, 15)), 0.750);
		Wait(7, Ignore Condition);
		Small Message(Event Player, Custom String("Power Gem ready. {0}", Ability Icon String(Hero(Echo), Button(Secondary Fire))));
	}
}

rule("Ult Charge Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Reinhardt;
	}

	conditions
	{
		Event Player.UltEooowwww < 2240;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Passive Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Event Player.UltEooowwww < 2240;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += 5;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult charge ui")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Ultimate Charge: {0}% {1}", Event Player.UltEooowwww / 22.400, Ability Icon String(
			Hero(Reinhardt), Button(Ultimate))), Null, Null, Top, 0, Color(Gray), Color(Violet), Color(Violet), Visible To and String,
			Default Visibility);
		Wait Until(Event Player.UltEooowwww >= 2240, 99999);
		Destroy HUD Text(Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 75);
		Create HUD Text(Event Player, Custom String("Ultimate Ready!"), Null, Null, Top, 0, Color(Gray), Color(White), Color(Gray),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == True, 99999);
		Destroy HUD Text(Last Text ID);
		Create HUD Text(Event Player, Custom String("Using Earthquake... {0}", Ability Icon String(Hero(Reinhardt), Button(Ultimate))),
			Null, Null, Top, 0, Color(Gray), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == False, 99999);
		Destroy All HUD Text;
		Loop;
	}
}

rule("Rule 14")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 8")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.UltEooowwww >= 2240;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion, Color(Gray), Event Player, 30);
		Event Player.UltWeewoo = True;
		Set Status(Event Player, Null, Stunned, 9999);
		Wait(0.500, Ignore Condition);
		Wait Until(Is On Ground(Event Player), 99999);
		Clear Status(Event Player, Stunned);
		Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player, 75);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Gray), Event Player, 30);
		Event Player.range = Filtered Array(Players Within Radius(Event Player, 15, Opposite Team Of(Team Of(Event Player)),
			Surfaces And Enemy Barriers), Altitude Of(Current Array Element) <= 1);
		Set Status(Event Player.range, Event Player, Knocked Down, 2.500);
		Damage(Event Player.range, Event Player, 65);
		Wait(2.500, Ignore Condition);
		Event Player.UltWeewoo = False;
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Alive(Event Player) == True;
		Ammo(Event Player, 0) > 0;
		Is Reloading(Event Player) == False;
		Event Player.UltWeewoo != True;
	}

	actions
	{
		Create Projectile(Reinhardt Fire Strike, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 40,
			1, 3, Bad Explosion, Explosion Sound, 0, 80, 5, 0, 0, 0);
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) - 1);
		Wait(0.400, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 2")
{
	event
	{
		Player Dealt Damage;
		All;
		Pharah;
	}

	conditions
	{
		Event Damage >= 26;
		Victim.BurnCount < 3;
	}

	actions
	{
		Victim.BurnCount += 1;
	}
}

rule("Rule 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.BurnCount >= 3;
	}

	actions
	{
		Set Status(Event Player, Null, Burning, 4);
		Start Damage Over Time(Event Player, Players On Hero(Hero(Pharah), Opposite Team Of(Team Of(Event Player))), 4, 5);
		Wait(4, Ignore Condition);
		Event Player.BurnCount = 0;
	}
}

rule("Rule 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == False;
	}

	actions
	{
		Event Player.HexTarget = First Of(Sorted Array(Filtered Array(Players Within Radius(Event Player, 40, Opposite Team Of(Team Of(
			Event Player)), Surfaces), Is In View Angle(Event Player, Current Array Element, 8) && Is Alive(Current Array Element)),
			Player Closest To Reticle(Event Player, All Teams)));
		Damage(Event Player.HexTarget, Event Player, 20);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Violet), Event Player.HexTarget, 1);
		If(Has Status(Event Player.HexTarget, Asleep) || Has Status(Event Player.HexTarget, Hacked) || Has Status(Event Player.HexTarget,
			Frozen) || Has Status(Event Player.HexTarget, Burning));
			Damage(Event Player.HexTarget, Event Player, 100);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Violet), Event Player.HexTarget, 5);
			Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player.HexTarget, 25);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Violet), Event Player.HexTarget, 3);
		End;
		Wait(0.750, Ignore Condition);
		Event Player.HexTarget = 0;
		Loop If Condition Is True;
	}
}

rule("Rule 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.BurnCount > 0;
	}

	actions
	{
		Wait(4, Ignore Condition);
		Event Player.BurnCount -= 1;
		Loop If Condition Is True;
	}
}

rule("Rule 6")
{
	event
	{
		Player Died;
		All;
		All;
	}

	actions
	{
		Event Player.BurnCount = 0;
	}
}

rule("Rule 9")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Alive(Event Player) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Create Effect(All Players(All Teams), Light Shaft, Color(Orange), Event Player.FireSpinLocation, 5.500,
			Visible To Position and Radius);
		Event Player.RNG = Random Integer(0, 2);
		If(Event Player.RNG == 0);
			Small Message(Players Within Radius(Event Player, 15, All Teams, Off), Custom String("{0} {1}: A glimpse of the inferno... {2}",
				Hero Icon String(Hero(Pharah)), Event Player, Ability Icon String(Hero(Ramattra), Button(Ability 2))));
		End;
		If(Event Player.RNG == 1);
			Small Message(Players Within Radius(Event Player, 15, All Teams, Off), Custom String(
				"{0} {1}: Why do we call it oven when we oven food cold ovout eat the food? {2}", Hero Icon String(Hero(Pharah)), Event Player,
				Ability Icon String(Hero(Ramattra), Button(Ability 2))));
		End;
		If(Event Player.RNG == 2);
			Small Message(Players Within Radius(Event Player, 15, All Teams, Off), Custom String("{0} {1}: Turning up the heat! {2}",
				Hero Icon String(Hero(Pharah)), Event Player, Ability Icon String(Hero(Ramattra), Button(Ability 2))));
		End;
		Event Player.ShaftID = Last Created Entity;
		Event Player.FireSpinLocation = Eye Position(Event Player);
		Event Player.FireSpinDestination = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 30, Null, Event Player, True);
		Chase Player Variable At Rate(Event Player, FireSpinLocation, Event Player.FireSpinDestination, 30, Destination and Rate);
		Wait Until(Event Player.FireSpinLocation == Event Player.FireSpinDestination, 1);
		Event Player.SpinActive = True;
		Set Ability Cooldown(Event Player, Button(Ability 2), 15);
		Wait(5, Ignore Condition);
		Event Player.SpinActive = False;
		Destroy Effect(Event Player.ShaftID);
	}
}

rule("Rule 8")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Event Player.SpinActive == True;
	}

	actions
	{
		Damage(Players Within Radius(Event Player.FireSpinLocation, 5.500, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Event Player, 15);
		Players Within Radius(Event Player.FireSpinLocation, 5.500, Opposite Team Of(Team Of(Event Player)), Surfaces).BurnCount += 1;
		Wait(0.333, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 9")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Is Alive(Event Player) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Event Player, 5);
		Damage(Filtered Array(Players Within Radius(Event Player, 5, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers),
			Is In View Angle(Event Player, Current Array Element, 45)), Event Player, 20);
		Apply Impulse(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player) + -180, Vertical Facing Angle Of(
			Event Player) + -180), 20, To World, Cancel Contrary Motion);
		Set Ability Cooldown(Event Player, Button(Ability 1), 10);
		Event Player.RNG = Random Integer(0, 2);
		If(Event Player.RNG == 0);
			Small Message(Players Within Radius(Event Player, 15, All Teams, Off), Custom String("{0} {1}: Shablam! {2}", Hero Icon String(
				Hero(Pharah)), Event Player, Ability Icon String(Hero(Ashe), Button(Ability 1))));
		End;
		If(Event Player.RNG == 1);
			Small Message(Players Within Radius(Event Player, 15, All Teams, Off), Custom String("{0} {1}: Bye bye! {2}", Hero Icon String(
				Hero(Pharah)), Event Player, Ability Icon String(Hero(Ashe), Button(Ability 1))));
		End;
		If(Event Player.RNG == 2);
			Small Message(Players Within Radius(Event Player, 15, All Teams, Off), Custom String("{0} {1}: Wheeeee! {2}", Hero Icon String(
				Hero(Pharah)), Event Player, Ability Icon String(Hero(Ashe), Button(Ability 1))));
	}
}

rule("Ult Charge Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Pharah;
	}

	conditions
	{
		Event Player.UltEooowwww < 2520;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Passive Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Event Player.UltEooowwww < 2520;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += 5;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult charge ui")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Ultimate Charge: {0}% {1}", Event Player.UltEooowwww / 25.200, Ability Icon String(
			Hero(Moira), Button(Ultimate))), Null, Null, Top, 0, Color(Orange), Color(Violet), Color(Violet), Visible To and String,
			Default Visibility);
		Wait Until(Event Player.UltEooowwww >= 2520, 99999);
		Destroy HUD Text(Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 75);
		Create HUD Text(Event Player, Custom String("Ultimate Ready!"), Null, Null, Top, 0, Color(Orange), Color(White), Color(Gray),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == True, 99999);
		Destroy HUD Text(Last Text ID);
		Create HUD Text(Event Player, Custom String("Using Overheat... {0}", Ability Icon String(Hero(Sigma), Button(Ultimate))), Null,
			Null, Top, 0, Color(Orange), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == False, 99999);
		Destroy All HUD Text;
		Loop;
	}
}

rule("Rule 14")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 14")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Alive(Event Player) == True;
		Event Player.UltEooowwww >= 2520;
	}

	actions
	{
		Create Beam Effect(All Players(All Teams), Moira Coalescence Beam, Eye Position(Event Player) + Vector(0, 0.200, 0), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * 20, Color(White), Visible To Position and Radius);
		Event Player.BeamID1[0] = Last Created Entity;
		Create Effect(All Players(All Teams), Cloud, Color(Orange), Event Player, 10, Visible To Position and Radius);
		Event Player.BeamID1[1] = Last Created Entity;
		Big Message(Append To Array(All Players(Opposite Team Of(Team Of(Event Player))), Event Player), Custom String(
			"{0} {1}: Taste the inferno, mother****er!!!! {2}", Hero Icon String(Hero(Pharah)), Event Player, Ability Icon String(Hero(
			Moira), Button(Ultimate))));
		Big Message(Remove From Array(All Players(Team Of(Event Player)), Event Player), Custom String(
			"{0} {1}: Activating giant flamethrower! {2}", Hero Icon String(Hero(Pharah)), Event Player, Ability Icon String(Hero(Moira),
			Button(Ultimate))));
		Event Player.UltWeewoo = True;
		Set Move Speed(Event Player, 125);
		Wait(6, Ignore Condition);
		Destroy Effect(Event Player.BeamID1);
		Event Player.UltWeewoo = False;
		Event Player.UltEooowwww = 0;
		Set Move Speed(Event Player, 100);
	}
}

rule("Rule 15")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Event Player.UltWeewoo == True;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Stunned) == False;
	}

	actions
	{
		Damage(Filtered Array(Players Within Radius(Event Player, 20, Opposite Team Of(Team Of(Event Player)), Surfaces), Is In View Angle(
			Event Player, Current Array Element, 60)), Event Player, 0.320);
		Damage(Filtered Array(Players Within Radius(Event Player, 20, Opposite Team Of(Team Of(Event Player)), Surfaces), Is In View Angle(
			Event Player, Current Array Element, 30)), Event Player, 0.320);
		Damage(Filtered Array(Players Within Radius(Event Player, 20, Opposite Team Of(Team Of(Event Player)), Surfaces), Is In View Angle(
			Event Player, Current Array Element, 10)), Event Player, 0.640);
		Filtered Array(Players Within Radius(Event Player, 20, Opposite Team Of(Team Of(Event Player)), Surfaces), Is In View Angle(
			Event Player, Current Array Element, 30)).BurnCount += 0.050;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 16")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Pharah;
	}

	conditions
	{
		Has Status(Victim, Burning) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Event Player.RNG = Random Integer(0, 2);
		If(Event Player.RNG == 0);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: Aww, why I gotta kick someone when they're already on fire?",
				Hero Icon String(Hero(Pharah)), Event Player));
		End;
		If(Event Player.RNG == 1);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: Teehee! The Hex is working!", Hero Icon String(Hero(Pharah)),
				Event Player));
		End;
		If(Event Player.RNG == 2);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: The old one-two!", Hero Icon String(Hero(Pharah)),
				Event Player));
	}
}

rule("Rule 16")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Pharah;
	}

	conditions
	{
		Altitude Of(Victim) >= 3;
	}

	actions
	{
		Event Player.RNG = Random Integer(0, 2);
		If(Event Player.RNG == 0);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: Going up?", Hero Icon String(Hero(Pharah)), Event Player));
		End;
		If(Event Player.RNG == 1);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: EeeeooowwwwBOOM!!!!", Hero Icon String(Hero(Pharah)),
				Event Player));
		End;
		If(Event Player.RNG == 2);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: Oh, that'd be so fun if you weren't dead...", Hero Icon String(
				Hero(Pharah)), Event Player));
	}
}

rule("Rule 16")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Pharah;
	}

	conditions
	{
		Distance Between(Event Player, Victim) >= 35;
	}

	actions
	{
		Event Player.RNG = Random Integer(0, 2);
		If(Event Player.RNG == 0);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: Caught you, teehee!", Hero Icon String(Hero(Pharah)),
				Event Player));
		End;
		If(Event Player.RNG == 1);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: Now, where do you think you're going?", Hero Icon String(Hero(
				Pharah)), Event Player));
		End;
		If(Event Player.RNG == 2);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: Bro was in Alola...", Hero Icon String(Hero(Pharah)),
				Event Player));
	}
}

rule("Rule 16")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Pharah;
	}

	conditions
	{
		Altitude Of(Event Player) >= 3;
	}

	actions
	{
		Event Player.RNG = Random Integer(0, 2);
		If(Event Player.RNG == 0);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: Thanks for not looking up!", Hero Icon String(Hero(Pharah)),
				Event Player));
		End;
		If(Event Player.RNG == 1);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: We just nuked the building.", Hero Icon String(Hero(Pharah)),
				Event Player));
		End;
		If(Event Player.RNG == 2);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: Now that's what I call a fly-by!", Hero Icon String(Hero(
				Pharah)), Event Player));
	}
}

rule("Primary Fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.BeamVisibility = All Players(All Teams);
		Damage(Filtered Array(Players Within Radius(Event Player, Event Player.range, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Is In View Angle(Event Player, Current Array Element, 9)), Event Player, Event Player.dps / 62.500);
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) - 1);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Event Player.BeamVisibility = Null;
	}
}

rule("Beam Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	actions
	{
		Event Player.BeamVisibility = All Players(All Teams);
		Event Player.dps = 60;
		Event Player.UltCharge = Vector(-0.150, -0.220, 0);
		Create Beam Effect(Event Player.BeamVisibility, Good Beam, Eye Position(Event Player) + World Vector Of(Event Player.UltCharge,
			Event Player, Rotation), Eye Position(Event Player) + Facing Direction Of(Event Player) * Event Player.range, Color(Rose),
			Visible To Position and Radius);
		Event Player.range = 20;
		Event Player.egg = 3;
		Create HUD Text(Event Player, Custom String("{0}: {1}", Ability Icon String(Hero(Ana), Button(Ability 2)), Event Player.egg), Null,
			Null, Left, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("Ult Charge Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Mercy;
	}

	conditions
	{
		Event Player.UltEooowwww < 2100;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Ult Charge Healing")
{
	event
	{
		Player Dealt Healing;
		All;
		Mercy;
	}

	conditions
	{
		Event Player.UltEooowwww < 2100;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Healing;
	}
}

rule("Passive Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Event Player.UltEooowwww < 2100;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += 5;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult charge ui")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Ultimate Charge: {0}% {1}", Event Player.UltEooowwww / 21, Ability Icon String(Hero(
			Mercy), Button(Ultimate))), Null, Null, Top, 0, Color(Rose), Color(Violet), Color(Violet), Visible To and String,
			Default Visibility);
		Wait Until(Event Player.UltEooowwww >= 2100, 99999);
		Destroy HUD Text(Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 75);
		Create HUD Text(Event Player, Custom String("Ultimate Ready!"), Null, Null, Top, 0, Color(Rose), Color(White), Color(Gray),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == True, 99999);
		Destroy HUD Text(Last Text ID);
		Create HUD Text(Event Player, Custom String("Using Healing Wish... {0}", Ability Icon String(Hero(Mercy), Button(Ultimate))), Null,
			Null, Top, 0, Color(Rose), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.AmplifierCheck = Last Text ID;
		Wait Until(Event Player.UltWeewoo == False, 99999);
		Destroy HUD Text(Event Player.AmplifierCheck);
		Loop;
	}
}

rule("Rule 22")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 9")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Event Player.HelpingHand = Filtered Array(Player Closest To Reticle(Event Player, Team Of(Event Player)), Is In Line of Sight(
			Event Player, Current Array Element, Barriers Do Not Block LOS) && Distance Between(Event Player, Current Array Element)
			<= 20 && Is In View Angle(Event Player, Current Array Element, 30));
		Abort If(Event Player.HelpingHand == 0);
		Start Damage Modification(All Players(Opposite Team Of(Team Of(Event Player))), Event Player.HelpingHand, 140,
			Receivers Damagers and Damage Percent);
		Create Beam Effect(All Players(All Teams), Mercy Boost Beam, Event Player, Event Player.HelpingHand, Color(White),
			Visible To Position and Radius);
		Start Assist(Event Player, Event Player.HelpingHand, Assisters and Targets);
		Event Player.RNG = Random Integer(0, 2);
		If(Event Player.RNG == 0);
			Small Message(Array(Event Player, Event Player.HelpingHand), Custom String("{0} {1}: Clap, clap, clap your hands! {2}",
				Hero Icon String(Hero(Mercy)), Event Player, Ability Icon String(Hero(Ana), Button(Ultimate))));
		End;
		If(Event Player.RNG == 1);
			Small Message(Array(Event Player, Event Player.HelpingHand), Custom String("{0} {1}: Here, I'll help! {2}", Hero Icon String(Hero(
				Mercy)), Event Player, Ability Icon String(Hero(Ana), Button(Ultimate))));
		End;
		If(Event Player.RNG == 2);
			Small Message(Array(Event Player, Event Player.HelpingHand), Custom String("{0} {1}: And a-one! And a-two! {2}", Hero Icon String(
				Hero(Mercy)), Event Player, Ability Icon String(Hero(Ana), Button(Ultimate))));
		End;
		Wait(3, Ignore Condition);
		Stop Damage Modification(Last Damage Modification ID);
		Destroy Effect(Last Created Entity);
		Stop Assist(Last Assist ID);
		Wait(6, Ignore Condition);
		Small Message(Event Player, Custom String("Helping Hand ready. {0}", Ability Icon String(Hero(Moira), Button(Primary Fire))));
		Event Player.HelpingHand = 0;
	}
}

rule("Rule 10")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Event Player.egg > 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create Homing Projectile(Orb Projectile, Event Player, Null, Null, To World, Heal, Team Of(Event Player), 0, 1, 0, Bad Explosion,
			Explosion Sound, 0, 50, 5, 0, Event Player.Softboiled, 1);
		Event Player.Softboiled = Filtered Array(Player Closest To Reticle(Event Player, Team Of(Event Player)), Is In Line of Sight(
			Event Player, Current Array Element, Barriers Do Not Block LOS) && Distance Between(Event Player, Current Array Element)
			<= 30 && Is In View Angle(Event Player, Current Array Element, 30));
		Heal(Event Player.Softboiled, Event Player, 45);
		Start Heal Over Time(Event Player.Softboiled, Event Player, 3, 35);
		Event Player.egg -= 1;
		Play Effect(All Players(All Teams), Ring Explosion, Color(White), Event Player.Softboiled, 5);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Event Player.Softboiled, 1);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Event Player.Softboiled, 50);
		Event Player.RNG = Random Integer(0, 2);
		If(Event Player.RNG == 0);
			Small Message(Array(Event Player, Event Player.Softboiled), Custom String("{0} {1}: Eat this! You'll feel much better. {2}",
				Hero Icon String(Hero(Mercy)), Event Player, Ability Icon String(Hero(Brigitte), Button(Ability 2))));
		End;
		If(Event Player.RNG == 1);
			Small Message(Array(Event Player, Event Player.Softboiled), Custom String("{0} {1}: I personally enjoy mine over-easy, but... {2}",
				Hero Icon String(Hero(Mercy)), Event Player, Ability Icon String(Hero(Brigitte), Button(Ability 2))));
		End;
		If(Event Player.RNG == 2);
			Small Message(Array(Event Player, Event Player.HelpingHand), Custom String("{0} {1}: You can't fight on an empty stomach! {2}",
				Hero Icon String(Hero(Mercy)), Event Player, Ability Icon String(Hero(Brigitte), Button(Ability 2))));
	}
}

rule("Rule 11")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Event Player.egg < 3;
	}

	actions
	{
		Wait(5, Ignore Condition);
		Event Player.egg += 1;
		Loop If Condition Is True;
	}
}

rule("Rule 11")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 50);
		Set Damage Received(Event Player, 70);
		Event Player.RNG = Random Integer(0, 2);
		If(Event Player.RNG == 0);
			Small Message(Array(Event Player), Custom String("{0} {1}: I'm not done yet! {2}", Hero Icon String(Hero(Mercy)), Event Player,
				Ability Icon String(Hero(Baptiste), Button(Ability 1))));
		End;
		If(Event Player.RNG == 1);
			Small Message(Array(Event Player), Custom String("{0} {1}: By the moon and stars! {2}", Hero Icon String(Hero(Mercy)),
				Event Player, Ability Icon String(Hero(Baptiste), Button(Ability 1))));
		End;
		If(Event Player.RNG == 2);
			Small Message(Array(Event Player), Custom String("{0} {1}: It's okay, it's okay... {2}", Hero Icon String(Hero(Mercy)),
				Event Player, Ability Icon String(Hero(Baptiste), Button(Ability 1))));
		End;
		Set Move Speed(Event Player, 125);
		Add Health Pool To Player(Event Player, Health, 50, False, True);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Rose), Event Player, 10);
		Start Heal Over Time(Players Within Radius(Event Player, 10, Team Of(Event Player), Surfaces And Enemy Barriers), Event Player, 4,
			15);
		Start Heal Over Time(Event Player, Event Player, 4, 10);
		Wait(4, Ignore Condition);
		Set Damage Received(Event Player, 100);
		Set Move Speed(Event Player, 100);
		Remove Health Pool From Player(Last Created Health Pool);
		Set Ability Cooldown(Event Player, Button(Ability 1), 10);
	}
}

rule("Rule 12")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Damage Over Time Count > 0;
	}

	actions
	{
		Stop All Damage Over Time(Event Player);
	}
}

rule("Rule 14")
{
	event
	{
		Subroutine;
		Sub0;
	}

	actions
	{
		Destroy Effect(Event Player.StunSpore);
		Event Player.UltEooowwww = 0;
		Event Player.UltWeewoo = False;
	}
}

rule("Rule 13")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.UltEooowwww >= 2100;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.UltWeewoo = True;
		Big Message(All Players(Team Of(Event Player)), Custom String("{0} {1}: Great Arceus, answer my prayer! {2}", Hero Icon String(
			Hero(Mercy)), Event Player, Ability Icon String(Hero(Mercy), Button(Ultimate))));
		Big Message(All Players(Opposite Team Of(Team Of(Event Player))), Custom String("{0} {1}: We won't be defeated! {2}",
			Hero Icon String(Hero(Mercy)), Event Player, Ability Icon String(Hero(Mercy), Button(Ultimate))));
		Create Effect(All Players(All Teams), Ring, Color(White), Event Player, 15, Visible To Position and Radius);
		Event Player.StunSpore[0] = Last Created Entity;
		Wait(1.500, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1}: {0}", Count Of(Filtered Array(Players Within Radius(Event Player, 15, Team Of(
			Event Player), Off), Is Dead(Current Array Element))), Ability Icon String(Hero(Mercy), Button(Ability 2))), Null, Null, Top,
			0, Color(Rose), Color(White), Color(White), Visible To and String, Default Visibility);
		Set Move Speed(Event Player, 130);
		Create Effect(All Players(All Teams), Sparkles, Color(White), Event Player, 1, Visible To Position and Radius);
		Event Player.StunSpore[1] = Last Created Entity;
		Create Effect(All Players(All Teams), Good Aura Sound, Color(White), Event Player, 50, Visible To Position and Radius);
		Event Player.StunSpore[2] = Last Created Entity;
		Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 50);
		Wait Until(Is Button Held(Event Player, Button(Ultimate)), 4);
		Destroy HUD Text(Last Text ID);
		If(Is Dead(Event Player));
			Start Rule(Sub0, Do Nothing);
			Abort;
		End;
		Event Player.HealingWish = Filtered Array(Players Within Radius(Event Player, 15, Team Of(Event Player), Off), Is Dead(
			Current Array Element));
		Resurrect(Event Player.HealingWish);
		Destroy Effect(Event Player.StunSpore);
		Set Status(Event Player.HealingWish, Null, Stunned, 2);
		Set Status(Event Player.HealingWish, Event Player, Phased Out, 3);
		Set Status(Event Player, Event Player, Phased Out, 3);
		Small Message(Event Player.HealingWish, Custom String("Resurrected by Clefable ({0})", Event Player));
		Event Player.UltEooowwww = 0;
		Play Effect(All Players(All Teams), Ring Explosion, Color(White), Event Player, 30);
		Wait(3, Ignore Condition);
		Event Player.UltWeewoo = False;
		Set Move Speed(Event Player, 100);
	}
}

rule("Ult Charge Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Sojourn;
	}

	conditions
	{
		Event Player.UltEooowwww < 2240;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Passive Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sojourn;
	}

	conditions
	{
		Event Player.UltEooowwww < 2240;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += 5;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult charge ui")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sojourn;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Ultimate Charge: {0}% {1}", Event Player.UltEooowwww / 22.400, Ability Icon String(
			Hero(Illari), Button(Ultimate))), Null, Null, Top, 0, Color(Rose), Color(Violet), Color(Violet), Visible To and String,
			Default Visibility);
		Wait Until(Event Player.UltEooowwww >= 2240, 99999);
		Destroy HUD Text(Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 75);
		Create HUD Text(Event Player, Custom String("Ultimate Ready!"), Null, Null, Top, 0, Color(Rose), Color(White), Color(Gray),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == True, 99999);
		Destroy HUD Text(Last Text ID);
		Create HUD Text(Event Player, Custom String("Using Moonblast... {0}", Ability Icon String(Hero(Sigma), Button(Ultimate))), Null,
			Null, Top, 0, Color(Rose), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == False, 99999);
		Destroy All HUD Text;
		Loop;
	}
}

rule("Rule 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sojourn;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Reloading(Event Player) == False;
		Is Button Held(Event Player, Button(Secondary Fire)) == False;
		Event Player.Wispy != 1;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create Projectile(Zarya Graviton, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 70, 2, 0,
			Bad Explosion, Explosion Sound, 0.035, 80, 5, 0, 0, 0);
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) - 1);
		Wait(0.625, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 6")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sojourn;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Reloading(Event Player) == False;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
		Event Player.Wispy != 1;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create Homing Projectile(Lucio Sonic Amplifier, Event Player, Eye Position(Event Player) + World Vector Of(Vector(Random Real(-3,
			3), Random Real(0, 3), 0), Event Player, Rotation), Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 16, 1, 0,
			Bad Explosion, Explosion Sound, 0.025, 7.500, 4, 0, Filtered Array(Player Closest To Reticle(Event Player, Opposite Team Of(
			Team Of(Event Player))), Distance Between(Event Player, Current Array Element) <= 15 && Is In View Angle(Event Player,
			Current Array Element, 30) && Is Alive(Current Array Element)), 0.700);
		Event Player.Leafy -= 1;
		Wait(0.050, Ignore Condition);
		Loop If(Event Player.Leafy > 0);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 5);
		Event Player.Leafy = 12;
		Wait(5, Ignore Condition);
		Small Message(Event Player, Custom String("Magical Leaf ready. {0}", Ability Icon String(Hero(Lifeweaver), Button(
			Secondary Fire))));
	}
}

rule("Rule 7")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sojourn;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create Projectile(Reinhardt Fire Strike, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 25,
			1, 0, Bad Explosion, Explosion Sound, 0, 75, 0.400, 0, 0, 0);
		Set Ability Cooldown(Event Player, Button(Ability 2), 8);
		Event Player.Wispy = 1;
		Wait(0.400, Ignore Condition);
		Event Player.Wispy = 0;
	}
}

rule("Rule 8")
{
	event
	{
		Player Dealt Damage;
		All;
		Sojourn;
	}

	conditions
	{
		Event Player.Wispy == 1;
	}

	actions
	{
		Event Player.Wispy = 0;
		Event Player.RNG = Random Integer(0, 2);
		If(Event Player.RNG == 1);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: Tell me, how does that feel? {2}", Hero Icon String(Hero(
				Sojourn)), Event Player, Ability Icon String(Hero(Sojourn), Button(Ability 2))));
		End;
		If(Event Player.RNG == 0);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: Fall to ashes. {2}", Hero Icon String(Hero(Sojourn)),
				Event Player, Ability Icon String(Hero(Sojourn), Button(Ability 2))));
		End;
		If(Event Player.RNG == 2);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: A ghostly wisp. {2}", Hero Icon String(Hero(Sojourn)),
				Event Player, Ability Icon String(Hero(Sojourn), Button(Ability 2))));
		End;
		Set Status(Victim, Event Player, Burning, 2.500);
		Set Move Speed(Victim, 70);
		Set Damage Dealt(Victim, 50);
		Start Damage Over Time(Victim, Event Player, 2.500, 20);
		Wait(2.500, Ignore Condition);
		Set Damage Dealt(Victim, 100);
		Set Move Speed(Victim, 100);
	}
}

rule("Rule 9")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sojourn;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 0.900);
		Teleport(Event Player, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 15, Null, Event Player, True));
		Play Effect(All Players(All Teams), Good Explosion, Color(Rose), Event Player, 5);
		Set Ability Cooldown(Event Player, Button(Ability 1), 6);
		Event Player.RNG = Random Integer(0, 2);
		If(Event Player.RNG == 1);
			Small Message(Array(Event Player, Players Within Radius(Event Player, 10, All Teams, Off)), Custom String("{0} {1}: Blink! {2}",
				Hero Icon String(Hero(Sojourn)), Event Player, Ability Icon String(Hero(Kiriko), Button(Ability 1))));
		End;
		If(Event Player.RNG == 0);
			Small Message(Array(Event Player, Players Within Radius(Event Player, 10, All Teams, Off)), Custom String("{0} {1}: Teleport! {2}",
				Hero Icon String(Hero(Sojourn)), Event Player, Ability Icon String(Hero(Kiriko), Button(Ability 1))));
		End;
		If(Event Player.RNG == 2);
			Small Message(Array(Event Player, Players Within Radius(Event Player, 10, All Teams, Off)), Custom String(
				"{0} {1}: Swift as the wind... {2}", Hero Icon String(Hero(Sojourn)), Event Player, Ability Icon String(Hero(Kiriko), Button(
				Ability 1))));
	}
}

rule("Rule 10")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sojourn;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.UltEooowwww >= 2240;
		Event Player.UltWeewoo != True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create Effect(Event Player, Ring, Color(Rose), Nearest Walkable Position(Ray Cast Hit Position(Eye Position(Event Player),
			Eye Position(Event Player) + Facing Direction Of(Event Player) * 40, Null, Event Player, True)), 10,
			Visible To Position and Radius);
		Wait Until(Is Button Held(Event Player, Button(Primary Fire)), 99999);
		Destroy Effect(Last Created Entity);
		Create Effect(All Players(All Teams), Light Shaft, Color(Rose), Event Player.MoonlightCheck, 10, Visible To Position and Radius);
		Big Message(Array(All Players(Opposite Team Of(Team Of(Event Player))), Event Player), Custom String(
			"{0} {1}: Witness the moon's power! {2}", Hero Icon String(Hero(Sojourn)), Event Player, Ability Icon String(Hero(Illari),
			Button(Ultimate))));
		Big Message(Remove From Array(All Players(Team Of(Event Player)), Event Player), Custom String("{0} {1}: Using Moonblast... {2}",
			Hero Icon String(Hero(Sojourn)), Event Player, Ability Icon String(Hero(Illari), Button(Ultimate))));
		Event Player.MoonlightCheck = Nearest Walkable Position(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * 40, Null, Event Player, True));
		Event Player.UltWeewoo = True;
		Wait(4.750, Ignore Condition);
		Create Projectile(Zarya Graviton, Event Player, Ray Cast Hit Position(Event Player.MoonlightCheck,
			Event Player.MoonlightCheck + Vector(0, 40, 0), Null, Event Player, True), Direction Towards(
			Event Player.MoonlightCheck + Vector(0, 8, 0), Vector(0, -5000, 0)), To World, Damage, Opposite Team Of(Team Of(Event Player)),
			120, 1, 10, Ring Explosion, Ring Explosion Sound, 0.200, 30, 5, 0, 0, 0);
		Wait(1.250, Ignore Condition);
		Event Player.UltWeewoo = False;
		Destroy Effect(Last Created Entity);
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 10")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sojourn;
	}

	conditions
	{
		Event Player.UltWeewoo == True;
	}

	actions
	{
		Create Projectile(Zarya Particle Cannon, Event Player, Ray Cast Hit Position(Event Player.MoonlightCheck,
			Event Player.MoonlightCheck + Vector(Random Real(-9, 9), 40, Random Real(-9, 9)), All Players(All Teams), Event Player, True),
			Down, To World, Damage, Opposite Team Of(Team Of(Event Player)), 25, 1, 6, Bad Explosion, Explosion Sound, 0.015, 100, 5, 0, 0,
			0);
		Wait(0.125, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 11")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Sojourn;
	}

	conditions
	{
		Event Player.UltWeewoo == True;
	}

	actions
	{
		Event Player.RNG = Random Integer(0, 2);
		If(Event Player.RNG == 1);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: Super effective.", Hero Icon String(Hero(Sojourn)),
				Event Player));
		End;
		If(Event Player.RNG == 0);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: There is nothing I won't do.", Hero Icon String(Hero(Sojourn)),
				Event Player));
		End;
		If(Event Player.RNG == 2);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: The power of the moon is quite something.", Hero Icon String(
				Hero(Sojourn)), Event Player));
	}
}

rule("Rule 11")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Sojourn;
	}

	conditions
	{
		Is Meleeing(Event Player) == True;
	}

	actions
	{
		Event Player.RNG = Random Integer(0, 2);
		If(Event Player.RNG == 1);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: Should've put some ice on that one...", Hero Icon String(Hero(
				Sojourn)), Event Player));
		End;
		If(Event Player.RNG == 0);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: You forget yourself.", Hero Icon String(Hero(Sojourn)),
				Event Player));
		End;
		If(Event Player.RNG == 2);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: Back up.", Hero Icon String(Hero(Sojourn)), Event Player));
	}
}

rule("Rule 11")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Sojourn;
	}

	conditions
	{
		Event Was Critical Hit == True;
	}

	actions
	{
		Event Player.RNG = Random Integer(0, 2);
		If(Event Player.HypnosisCheck == 1);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: Critical hit.", Hero Icon String(Hero(Sojourn)), Event Player));
		End;
		If(Event Player.RNG == 0);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: Mind your head.", Hero Icon String(Hero(Sojourn)),
				Event Player));
		End;
		If(Event Player.RNG == 2);
			Small Message(Array(Event Player, Victim), Custom String("{0} {1}: An inferior mind.", Hero Icon String(Hero(Sojourn)),
				Event Player));
	}
}

rule("Rule 14")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sojourn;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Alive(Event Player) == True;
		Ammo(Event Player, 0) > 0;
		Is Reloading(Event Player) == False;
	}

	actions
	{
		Create Beam Effect(All Players(All Teams), Bad Beam, Eye Position(Event Player) + World Vector Of(Vector(-0.150, -0.220, 0),
			Event Player, Rotation), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 1000, All Players(All Teams), Event Player, True), Color(Sky Blue), None);
		If(Is Button Held(Event Player, Button(Secondary Fire)));
			Create Projectile(Mei Icicle, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 85, 3, 0,
				Bad Explosion, Explosion Sound, 0.035, 1000, 5, 0, 0, 0);
			Wait(0.150, Ignore Condition);
		Else;
			Create Projectile(Mei Icicle, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 75, 2, 0,
				Bad Explosion, Explosion Sound, 0.035, 1000, 5, 0, 0, 0);
		End;
		Event Player.BeamID1 = Last Created Entity;
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) - 1);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Event Player.BeamID1);
		Wait(0.550, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 2")
{
	event
	{
		Player Dealt Damage;
		All;
		Widowmaker;
	}

	conditions
	{
		Event Was Critical Hit == True;
	}

	actions
	{
		Set Status(Victim, Event Player, Frozen, 0.500);
	}
}

rule("Rule 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Explosion, Color(White), Event Player, 5);
		Play Effect(All Players(All Teams), Ring Explosion, Color(White), Event Player, 20);
		Damage(Players Within Radius(Event Player, 10, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player,
			30);
		Set Status(Players Within Radius(Event Player, 10, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers),
			Event Player, Frozen, 0.500);
		Set Ability Cooldown(Event Player, Button(Ability 2), 10);
	}
}

rule("Rule 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Facing Direction Of(Event Player), 25, To World, Cancel Contrary Motion);
		Damage(Players Within Radius(Event Player, 3, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player,
			50);
		Apply Impulse(Players Within Radius(Event Player, 3, Opposite Team Of(Team Of(Event Player)), Surfaces), Facing Direction Of(
			Event Player), 10, To World, Cancel Contrary Motion);
		Set Ability Cooldown(Event Player, Button(Ability 1), 12);
		Play Effect(All Players(All Teams), Good Explosion, Color(White), Event Player, 1);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Event Player, 75);
	}
}

rule("Ult Charge Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Widowmaker;
	}

	conditions
	{
		Event Player.UltEooowwww < 2240;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Passive Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Event Player.UltEooowwww < 2240;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += 5;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult charge ui")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Ultimate Charge: {0}% {1}", Event Player.UltEooowwww / 22.400, Ability Icon String(
			Hero(Mei), Button(Ultimate))), Null, Null, Top, 0, Color(Sky Blue), Color(Violet), Color(Violet), Visible To and String,
			Default Visibility);
		Wait Until(Event Player.UltEooowwww >= 2240, 99999);
		Destroy HUD Text(Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 75);
		Create HUD Text(Event Player, Custom String("Ultimate Ready!"), Null, Null, Top, 0, Color(Sky Blue), Color(White), Color(Gray),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == True, 99999);
		Destroy HUD Text(Last Text ID);
		Create HUD Text(Event Player, Custom String("Using Blizzard... {0}", Ability Icon String(Hero(Sigma), Button(Ultimate))), Null,
			Null, Top, 0, Color(Sky Blue), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == False, 99999);
		Destroy All HUD Text;
		Loop;
	}
}

rule("Rule 14")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 10")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.UltEooowwww >= 2240;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create Effect(Event Player, Sphere, Color(White), Nearest Walkable Position(Ray Cast Hit Position(Eye Position(Event Player),
			Eye Position(Event Player) + Facing Direction Of(Event Player) * 30, Null, Event Player, True)), 15,
			Visible To Position and Radius);
		Event Player.BlizID = Last Created Entity;
		Wait Until(Is Button Held(Event Player, Button(Primary Fire)), 99999);
		Event Player.UltWeewoo = True;
		Destroy Effect(Event Player.BlizID);
		Event Player.BlizzardLocation = Nearest Walkable Position(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * 30, Null, Event Player, True));
		Create Effect(All Players(All Teams), Sphere, Color(White), Event Player.BlizzardLocation, 15, Visible To Position and Radius);
		Event Player.BlizID = Last Created Entity;
		Wait(8, Ignore Condition);
		Destroy Effect(Event Player.BlizID);
		Event Player.UltWeewoo = False;
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 11")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Event Player.UltWeewoo == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Explosion, Color(White), Event Player.BlizzardLocation, 15);
		Damage(Players Within Radius(Event Player.BlizzardLocation, 15, Opposite Team Of(Team Of(Event Player)),
			Surfaces And Enemy Barriers), Event Player, 35);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 12")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Players On Hero(Hero(Widowmaker), Opposite Team Of(Team Of(Event Player))).UltWeewoo == True;
		Distance Between(Event Player, Players On Hero(Hero(Widowmaker), Opposite Team Of(Team Of(Event Player))).BlizzardLocation) <= 15;
		Is In Line of Sight(Event Player, Players On Hero(Hero(Widowmaker), Opposite Team Of(Team Of(Event Player))).BlizzardLocation,
			Barriers Do Not Block LOS) == True;
	}

	actions
	{
		Damage(Event Player, Players On Hero(Hero(Widowmaker), Opposite Team Of(Team Of(Event Player))), 3);
		Set Move Speed(Event Player, 50);
		Start Assist(Players On Hero(Hero(Widowmaker), Opposite Team Of(Team Of(Event Player))), Event Player, Assisters and Targets);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Set Move Speed(Event Player, 100);
		Stop All Assists;
	}
}

rule("Rule 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Alive(Event Player) == True;
		Is Reloading(Event Player) == False;
		Ammo(Event Player, 0) > 0;
		Event Player.UltWeewoo != True;
	}

	actions
	{
		Create Projectile(Echo Sticky Bomb, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 5, 2, 0,
			Good Explosion, Explosion Sound, 0.070, 50, 0.400, 0, 0, 0);
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) - 1);
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	actions
	{
		Set Max Ammo(Event Player, 0, 150);
		Set Ammo(Event Player, 0, 150);
	}
}

rule("Rule 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Alive(Event Player) == True;
		Is Reloading(Event Player) == False;
		Ammo(Event Player, 0) > 0;
		Is Button Held(Event Player, Button(Primary Fire)) == False;
		Event Player.UltWeewoo != True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Create Projectile(Moira Damage Orb, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 70, 0.500,
			5, Bad Explosion, Explosion Sound, 0, 75, 5, 0, 0, 0);
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) - 10);
		Wait(0.550, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Color(Blue), Event Player, 12, Visible To Position and Radius);
		Event Player.Silly3 = Last Created Entity;
		Set Move Speed(Event Player, 80);
		Event Player.Spouting = True;
		Wait(4, Ignore Condition);
		Destroy Effect(Event Player.Silly3);
		Event Player.Spouting = False;
		Set Ability Cooldown(Event Player, Button(Ability 2), 12);
		Set Move Speed(Event Player, 100);
	}
}

rule("Rule 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Event Player.Spouting == True;
	}

	actions
	{
		Damage(Players Within Radius(Event Player, 12, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player,
			6);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 6")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Create Projectile(Orb Projectile, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 40, 1, 0,
			Bad Explosion, Explosion Sound, 0.045, 80, 0.500, 0, 0, 0);
		Event Player.Sapping = True;
		Wait(0.500, Ignore Condition);
		Event Player.Sapping = False;
		Set Ability Cooldown(Event Player, Button(Ability 1), 8);
	}
}

rule("Rule 7")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Event Player.Sapping == True;
	}

	actions
	{
		Event Player.Sapped = Victim;
		Set Damage Dealt(Event Player.Sapped, 70);
		Start Damage Over Time(Event Player.Sapped, Event Player, 3, 10);
		Heal(Event Player, Event Player, 150);
		Set Move Speed(Event Player.Sapped, 75);
		Start Heal Over Time(Event Player, Event Player, 3, 70);
		Wait(3, Ignore Condition);
		Set Damage Dealt(Event Player.Sapped, 100);
		Set Move Speed(Event Player.Sapped, 100);
	}
}

rule("Ult Charge Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Event Player.UltEooowwww < 2730;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Ult Charge Healing")
{
	event
	{
		Player Dealt Healing;
		All;
		Roadhog;
	}

	conditions
	{
		Event Player.UltEooowwww < 2730;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Healing;
	}
}

rule("Passive Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Event Player.UltEooowwww < 2730;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += 5;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult charge ui")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Ultimate Charge: {0}% {1}", Event Player.UltEooowwww / 27.300, Ability Icon String(
			Hero(Moira), Button(Ultimate))), Null, Null, Top, 0, Color(Violet), Color(Violet), Color(Violet), Visible To and String,
			Default Visibility);
		Wait Until(Event Player.UltEooowwww >= 2730, 99999);
		Destroy HUD Text(Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 75);
		Create HUD Text(Event Player, Custom String("Ultimate Ready!"), Null, Null, Top, 0, Color(Violet), Color(White), Color(Gray),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == True, 99999);
		Destroy HUD Text(Last Text ID);
		Create HUD Text(Event Player, Custom String("Using Destiny Bond... {0}", Ability Icon String(Hero(Sigma), Button(Ultimate))), Null,
			Null, Top, 0, Color(Violet), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == False, 99999);
		Destroy All HUD Text;
		Loop;
	}
}

rule("Rule 22")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 13")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.UltEooowwww >= 2730;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.UltWeewoo = True;
		Start Scaling Player(Event Player, 1.450, True);
		Start Heal Over Time(Event Player, Event Player, 10, 40);
		Add Health Pool To Player(Event Player, Health, 500, True, True);
		Event Player.Silly2 = Last Created Health Pool;
		Create Effect(All Players(All Teams), Light Shaft, Color(Violet), Event Player, 15, Visible To Position and Radius);
		Event Player.Silly1 = Last Created Entity;
		Set Move Speed(Event Player, 50);
		Wait Until(Is Dead(Event Player), 10);
		Destroy Effect(Event Player.Silly1);
		Remove Health Pool From Player(Event Player.Silly2);
		Event Player.UltWeewoo = False;
		Event Player.UltEooowwww = 0;
		Set Move Speed(Event Player, 100);
		Stop Scaling Player(Event Player);
	}
}

rule("Rule 14")
{
	event
	{
		Player Took Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Event Player.UltWeewoo == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Damage(Players Within Radius(Event Player, 15, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, Event Damage / 2);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Violet), Event Player, 2);
		Wait(0.016, Ignore Condition);
	}
}

rule("Rule 15")
{
	event
	{
		Player Died;
		All;
		Roadhog;
	}

	conditions
	{
		Event Player.UltWeewoo == True;
	}

	actions
	{
		Event Player.Size = 1;
		Chase Player Variable Over Time(Event Player, Size, 15, 3.500, Destination and Duration);
		Create Effect(All Players(All Teams), Light Shaft, Color(White), Event Player, Event Player.Size, Visible To Position and Radius);
		Wait(3.500, Ignore Condition);
		Kill(Players Within Radius(Event Player, 15, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player);
		Destroy Effect(Last Created Entity);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 30);
		Stop Chasing Player Variable(Event Player, Size);
	}
}

rule("Rule 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Reloading(Event Player) == False;
		Ammo(Event Player, 0) > 0;
		Event Player.IsCharging != True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create Projectile(Baptiste Biotic Launcher, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)),
			70, 1.500, 0, Bad Explosion, Explosion Sound, 0.025, 1000, 5, 0, 0, 0);
		Create Beam Effect(All Players(All Teams), Bad Beam, Eye Position(Event Player) + World Vector Of(Vector(-0.150, -0.220, 0),
			Event Player, Rotation), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 1000, All Players(All Teams), Event Player, True), Color(Yellow), None);
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) - 1);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Wait(0.350, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
	}

	actions
	{
		Event Player.DischargeDMG = 10;
		Chase Player Variable Over Time(Event Player, DischargeDMG, 80, 1, Destination and Duration);
		Wait Until(!Is Button Held(Event Player, Button(Secondary Fire)), 1);
		Stop Chasing Player Variable(Event Player, DischargeDMG);
		Damage(Players Within Radius(Event Player, 12.500, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers),
			Event Player, Event Player.DischargeDMG);
		Set Status(Players Within Radius(Event Player, 12.500, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, Stunned,
			Event Player.DischargeDMG * 0.006);
		Apply Impulse(Event Player, Up, Event Player.DischargeDMG / 6, To World, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player, 25);
		Wait(8, Ignore Condition);
		Small Message(Event Player, Custom String("Discharge ready. {0}", Ability Icon String(Hero(Illari), Button(Ability 1))));
	}
}

rule("Rule 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
	}

	actions
	{
		Event Player.IsCharging = True;
		Damage(Event Player, Null, Health(Event Player) * 0.200);
		Set Move Speed(Event Player, 600);
		Create Effect(All Players(All Teams), Good Aura, Color(Yellow), Event Player, 1, Visible To Position and Radius);
		Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 0);
		Start Facing(Event Player, Facing Direction Of(Event Player), 0, To World, None);
		Wait(0.250, Ignore Condition);
		Wait Until(Is Button Held(Event Player, Button(Ability 1)), 1.250);
		Destroy Effect(Last Created Entity);
		Stop Forcing Throttle(Event Player);
		Stop Facing(Event Player);
		Set Move Speed(Event Player, 100);
		Event Player.IsCharging = False;
		Wait(7, Ignore Condition);
		Small Message(Event Player, Custom String("Wild Charge ready. {0}", Ability Icon String(Hero(Cassidy), Button(Ability 1))));
	}
}

rule("Rule 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Event Player.IsCharging == True;
	}

	actions
	{
		Damage(Players Within Radius(Event Player, 2, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 7.500);
		Apply Impulse(Players Within Radius(Event Player, 2, Opposite Team Of(Team Of(Event Player)), Surfaces), Direction From Angles(
			Random Real(-45, 45) + Horizontal Facing Angle Of(Event Player), Vertical Facing Angle Of(Event Player) + -15), 16, To World,
			Cancel Contrary Motion);
		Set Environment Credit Player(Players Within Radius(Event Player, 2, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Event Player);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Event Player.Goop = Position Of(Event Player);
		Create Projectile(Zarya Particle Cannon, Event Player, Ray Cast Hit Position(Event Player.Goop, Vector(0, 30, 0)
			+ Event Player.Goop, All Players(All Teams), Event Player, True), Down, To World, Heal, Team Of(Event Player), 0, 1, 20,
			Ring Explosion, Ring Explosion Sound, 0, 20, 5, 0, 0, 0);
		Wait(1.500, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 2), 12);
		Heal(Players Within Radius(Event Player.Goop, 10, Team Of(Event Player), Surfaces), Event Player, 150);
	}
}

rule("Rule 6")
{
	event
	{
		Player Died;
		All;
		Soldier: 76;
	}

	actions
	{
		Event Player.IsCharging = False;
	}
}

rule("Ult Charge Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Soldier: 76;
	}

	conditions
	{
		Event Player.UltEooowwww < 2660;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Ult Charge Healing")
{
	event
	{
		Player Dealt Healing;
		All;
		Soldier: 76;
	}

	conditions
	{
		Event Player.UltEooowwww < 2660;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Healing;
	}
}

rule("Passive Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Event Player.UltEooowwww < 2660;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += 5;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult charge ui")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Ultimate Charge: {0}% {1}", Event Player.UltEooowwww / 26.600, Ability Icon String(
			Hero(Moira), Button(Secondary Fire))), Null, Null, Top, 0, Color(Yellow), Color(Violet), Color(Violet), Visible To and String,
			Default Visibility);
		Wait Until(Event Player.UltEooowwww >= 2660, 99999);
		Destroy HUD Text(Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 75);
		Create HUD Text(Event Player, Custom String("Ultimate Ready!"), Null, Null, Top, 0, Color(Yellow), Color(White), Color(Gray),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == True, 99999);
		Destroy HUD Text(Last Text ID);
		Create HUD Text(Event Player, Custom String("Using Thunder... {0}", Ability Icon String(Hero(Moira), Button(Secondary Fire))),
			Null, Null, Top, 0, Color(Yellow), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.AmplifierCheck = Last Text ID;
		Wait Until(Event Player.UltWeewoo == False, 99999);
		Destroy HUD Text(Event Player.AmplifierCheck);
		Loop;
	}
}

rule("Rule 22")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 12")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.UltEooowwww >= 2660;
	}

	actions
	{
		Create Effect(Event Player, Light Shaft, Color(Yellow), Nearest Walkable Position(Ray Cast Hit Position(Eye Position(Event Player),
			Eye Position(Event Player) + Facing Direction Of(Event Player) * 40, Null, Event Player, True)), 10,
			Visible To Position and Radius);
		Wait Until(Is Button Held(Event Player, Button(Primary Fire)), 99999);
		Destroy All Effects;
		Event Player.Gag = Nearest Walkable Position(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 40, Null, Event Player, True));
		Event Player.UltWeewoo = True;
		Play Effect(All Players(All Teams), Bad Explosion, Color(Yellow), Event Player, 5);
		Create Effect(All Players(All Teams), Light Shaft, Color(Yellow), Event Player.Gag, 0.250, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(Yellow), Event Player.Gag, 10, Visible To Position and Radius);
		Wait(1.250, Ignore Condition);
		Destroy All Effects;
		Play Effect(All Players(All Teams), Bad Explosion, Color(Yellow), Event Player.Gag, 20);
		Event Player.ThunderedGirlies = Players Within Radius(Event Player.Gag, 10, Opposite Team Of(Team Of(Event Player)), Surfaces);
		Damage(Event Player.ThunderedGirlies, Event Player, 100);
		Start Damage Over Time(Event Player.ThunderedGirlies, Event Player, 6, 15);
		Set Move Speed(Event Player.ThunderedGirlies, 50);
		Set Status(Event Player.ThunderedGirlies, Event Player, Stunned, 0.850);
		Wait(6, Ignore Condition);
		Set Move Speed(Event Player.ThunderedGirlies, 100);
		Event Player.UltEooowwww = 0;
		Event Player.UltWeewoo = False;
	}
}

rule("Rule 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Alive(Event Player) == True;
		Ammo(Event Player, 0) > 0;
		Is Reloading(Event Player) == False;
		Event Player.UltWeewoo != True;
	}

	actions
	{
		Create Projectile(Genji Shuriken, Event Player, Null, Direction From Angles(Horizontal Facing Angle Of(Event Player) + Random Real(
			-2, 2), Vertical Facing Angle Of(Event Player) + Random Real(-2, 2)), To World, Damage, Opposite Team Of(Team Of(
			Event Player)), 10, 2, 0, Bad Explosion, Explosion Sound, 0.060, 75, 5, 0, 0, 0);
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) - 1);
		Wait(0.075, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Alive(Event Player) == True;
		Is Reloading(Event Player) == False;
		Is Button Held(Event Player, Button(Primary Fire)) == False;
		Event Player.UltWeewoo != True;
		Event Player.Juice > 10;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, Juice);
		Create Beam Effect(All Players(All Teams), Good Beam, Eye Position(Event Player) + World Vector Of(Vector(-0.220, -0.150, 0),
			Event Player, Rotation), Eye Position(Event Player) + Facing Direction Of(Event Player) * 20, Color(Green),
			Visible To Position and Radius);
		Chase Player Variable At Rate(Event Player, Juice, 0, 20, Destination and Rate);
		Event Player.Cloud = Last Created Entity;
		While(Event Player.Juice > 0 && Is Button Held(Event Player, Button(Secondary Fire)));
			Heal(Filtered Array(Players Within Radius(Event Player, 20, Team Of(Event Player), Surfaces), Is In View Angle(Event Player,
				Current Array Element, 15)), Event Player, 1.440);
			Wait(0.016, Ignore Condition);
		End;
		Destroy Effect(Event Player.Cloud);
		Stop Chasing Player Variable(Event Player, Juice);
		Chase Player Variable At Rate(Event Player, Juice, 100, 5, Destination and Rate);
	}
}

rule("Rule 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Alive(Event Player) == True;
		Event Player.UltWeewoo != True;
	}

	actions
	{
		Event Player.StringShot = Filtered Array(Player Closest To Reticle(Event Player, Team Of(Event Player)), Is Alive(
			Current Array Element) && Is In View Angle(Event Player, Current Array Element, 35) && Is In Line of Sight(Event Player,
			Current Array Element, Barriers Do Not Block LOS));
		If(Is True For Any(All Players(Team Of(Event Player)), Current Array Element == Event Player.StringShot));
			Create Effect(All Players(All Teams), Sphere, Color(Lime Green), Event Player.StringShot, 1.500, Visible To Position and Radius);
			Event Player.Cocoon = Last Created Entity;
			Add Health Pool To Player(Event Player.StringShot, Health, 100, False, True);
			Start Heal Over Time(Event Player.StringShot, Event Player, 4, 30);
			Set Damage Received(Event Player.StringShot, 70);
			Wait(4, Ignore Condition);
			Remove Health Pool From Player(Last Created Health Pool);
			Destroy Effect(Event Player.Cocoon);
			Set Damage Received(Event Player.StringShot, 100);
			Event Player.StringShot = 0;
			Wait(10, Ignore Condition);
			Small Message(Event Player, Custom String("String Shot ready. {0}", Ability Icon String(Hero(Lifeweaver), Button(Ability 2))));
		Else;
			Create Effect(All Players(All Teams), Sphere, Color(Lime Green), Event Player, 1.500, Visible To Position and Radius);
			Event Player.Cocoon = Last Created Entity;
			Add Health Pool To Player(Event Player, Health, 100, False, True);
			Start Heal Over Time(Event Player, Event Player, 4, 25);
			Set Damage Received(Event Player, 70);
			Wait(4, Ignore Condition);
			Remove Health Pool From Player(Last Created Health Pool);
			Destroy Effect(Event Player.Cocoon);
			Set Damage Received(Event Player, 100);
			Event Player.StringShot = 0;
			Wait(10, Ignore Condition);
			Small Message(Event Player, Custom String("String Shot ready. {0}", Ability Icon String(Hero(Lifeweaver), Button(Ability 2))));
	}
}

rule("Rule 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Is Alive(Event Player) == True;
		Event Player.UltWeewoo != True;
	}

	actions
	{
		Set Move Speed(Event Player, 175);
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Event Player, 5);
		Damage(Filtered Array(Players Within Radius(Event Player, 8, Opposite Team Of(Team Of(Event Player)), Surfaces), Is In View Angle(
			Event Player, Current Array Element, 60)), Event Player, 70);
		Start Damage Over Time(Filtered Array(Players Within Radius(Event Player, 8, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Is In View Angle(Event Player, Current Array Element, 60)), Event Player, 3, 10);
		Heal(Event Player, Event Player, Count Of(Filtered Array(Players Within Radius(Event Player, 8, Opposite Team Of(Team Of(
			Event Player)), Surfaces), Is In View Angle(Event Player, Current Array Element, 60))) * 40);
		Start Heal Over Time(Event Player, Event Player, 3, Count Of(Filtered Array(Players Within Radius(Event Player, 8,
			Opposite Team Of(Team Of(Event Player)), Surfaces), Is In View Angle(Event Player, Current Array Element, 60))) * 15);
		Set Environment Credit Player(Filtered Array(Players Within Radius(Event Player, 8, Opposite Team Of(Team Of(Event Player)),
			Surfaces), Is In View Angle(Event Player, Current Array Element, 60)), Event Player);
		Set Move Speed(Event Player, 100);
		Apply Impulse(Filtered Array(Players Within Radius(Event Player, 8, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Is In View Angle(Event Player, Current Array Element, 60)), Direction From Angles(Horizontal Facing Angle Of(Event Player),
			Vertical Facing Angle Of(Event Player) + -12), 25, To World, Cancel Contrary Motion);
		Wait(6, Ignore Condition);
		Small Message(Event Player, Custom String("Leaf Blade ready. {0}", Ability Icon String(Hero(Lifeweaver), Button(Ability 1))));
	}
}

rule("Rule 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Health(Event Player) == Max Health(Event Player);
	}

	actions
	{
		Set Damage Received(Event Player, 50);
		Play Effect(All Players(All Teams), Good Explosion, Color(Lime Green), Event Player, 1);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Event Player, 25);
	}
}

rule("Rule 6")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Health(Event Player) < Max Health(Event Player);
	}

	actions
	{
		Wait(0.450, Ignore Condition);
		Set Damage Received(Event Player, 100);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 25);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Green), Event Player, 3);
	}
}

rule("Ult Charge Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Zenyatta;
	}

	conditions
	{
		Event Player.UltEooowwww < 2520;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Ult Charge Healing")
{
	event
	{
		Player Dealt Healing;
		All;
		Zenyatta;
	}

	conditions
	{
		Event Player.UltEooowwww < 2520;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Healing;
	}
}

rule("Passive Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Event Player.UltEooowwww < 2520;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += 5;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult charge ui")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("Ultimate Charge: {0}% {1}", Event Player.UltEooowwww / 25.200, Ability Icon String(
			Hero(Lifeweaver), Button(Ultimate))), Null, Null, Top, 0, Color(Lime Green), Color(Violet), Color(Violet),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltEooowwww >= 2520, 99999);
		Destroy HUD Text(Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 75);
		Create HUD Text(Event Player, Custom String("Ultimate Ready!"), Null, Null, Top, 0, Color(Lime Green), Color(White), Color(Gray),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == True, 99999);
		Destroy HUD Text(Last Text ID);
		Create HUD Text(Event Player, Custom String("Using Leaf Storm... {0}", Ability Icon String(Hero(Lifeweaver), Button(Ultimate))),
			Null, Null, Top, 0, Color(Lime Green), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.AmplifierCheck = Last Text ID;
		Wait Until(Event Player.UltWeewoo == False, 99999);
		Destroy HUD Text(Event Player.AmplifierCheck);
		Loop;
	}
}

rule("Rule 22")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 12")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.UltEooowwww >= 2520;
	}

	actions
	{
		Set Move Speed(Event Player, 75);
		Event Player.UltWeewoo = True;
		Start Heal Over Time(Event Player, Event Player, 8, 50);
		Wait(6, Ignore Condition);
		Event Player.UltWeewoo = False;
		Event Player.UltEooowwww = 0;
		Set Move Speed(Event Player, 100);
	}
}

rule("Rule 13")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Event Player.UltWeewoo == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create Homing Projectile(Genji Shuriken, Event Player, Eye Position(Event Player) + World Vector Of(Vector(Random Real(-5, 5),
			Random Real(0, 5), 0), Event Player, Rotation), Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 8, 1, 4,
			Bad Explosion, Explosion Sound, 0.090, 50, 1, 8, Filtered Array(Player Closest To Reticle(Event Player, Opposite Team Of(
			Team Of(Event Player))), Distance Between(Event Player, Current Array Element) <= 80 && Is In View Angle(Event Player,
			Current Array Element, 30) && Is Alive(Current Array Element)), 0.700);
		Create Homing Projectile(Genji Shuriken, Event Player, Eye Position(Event Player) + World Vector Of(Vector(Random Real(-5, 5),
			Random Real(0, 5), 0), Event Player, Rotation), Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 8, 1, 4,
			Bad Explosion, Explosion Sound, 0.090, 50, 1, 8, Filtered Array(Player Closest To Reticle(Event Player, Opposite Team Of(
			Team Of(Event Player))), Distance Between(Event Player, Current Array Element) <= 80 && Is In View Angle(Event Player,
			Current Array Element, 30) && Is Alive(Current Array Element)), 0.700);
		Create Homing Projectile(Genji Shuriken, Event Player, Eye Position(Event Player) + World Vector Of(Vector(Random Real(-5, 5),
			Random Real(0, 5), 0), Event Player, Rotation), Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 8, 1, 4,
			Bad Explosion, Explosion Sound, 0.090, 50, 1, 8, Filtered Array(Player Closest To Reticle(Event Player, Opposite Team Of(
			Team Of(Event Player))), Distance Between(Event Player, Current Array Element) <= 80 && Is In View Angle(Event Player,
			Current Array Element, 30) && Is Alive(Current Array Element)), 0.700);
		Create Homing Projectile(Lucio Sonic Amplifier, Event Player, Eye Position(Event Player) + World Vector Of(Vector(Random Real(-5,
			5), Random Real(0, 5), 0), Event Player, Rotation), Null, To World, Heal, Team Of(Event Player), 12, 1, 4, Bad Explosion,
			Explosion Sound, 0.090, 50, 1, 0, Filtered Array(Player Closest To Reticle(Event Player, Team Of(Event Player)),
			Distance Between(Event Player, Current Array Element) <= 80 && Is In View Angle(Event Player, Current Array Element, 30)
			&& Is Alive(Current Array Element)), 0.700);
		Create Homing Projectile(Lucio Sonic Amplifier, Event Player, Eye Position(Event Player) + World Vector Of(Vector(Random Real(-5,
			5), Random Real(0, 5), 0), Event Player, Rotation), Null, To World, Heal, Team Of(Event Player), 12, 1, 4, Bad Explosion,
			Explosion Sound, 0.090, 50, 1, 0, Filtered Array(Player Closest To Reticle(Event Player, Team Of(Event Player)),
			Distance Between(Event Player, Current Array Element) <= 80 && Is In View Angle(Event Player, Current Array Element, 30)
			&& Is Alive(Current Array Element)), 0.700);
		Create Homing Projectile(Lucio Sonic Amplifier, Event Player, Eye Position(Event Player) + World Vector Of(Vector(Random Real(-5,
			5), Random Real(0, 5), 0), Event Player, Rotation), Null, To World, Heal, Team Of(Event Player), 12, 1, 4, Bad Explosion,
			Explosion Sound, 0.090, 50, 1, 0, Filtered Array(Player Closest To Reticle(Event Player, Team Of(Event Player)),
			Distance Between(Event Player, Current Array Element) <= 80 && Is In View Angle(Event Player, Current Array Element, 30)
			&& Is Alive(Current Array Element)), 0.700);
		Wait(0.075, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 14")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	actions
	{
		Create Progress Bar HUD Text(Event Player, Event Player.Juice, Custom String("{0}", Icon String(Plus)), Left, 0, Color(Yellow),
			Color(White), Values, Default Visibility);
		Event Player.Juice = 100;
	}
}

rule("Rule 15")
{
	event
	{
		Player Dealt Damage;
		All;
		Zenyatta;
	}

	conditions
	{
		Event Damage >= 2;
	}

	actions
	{
		Event Player.Juice += 2;
	}
}

rule("Rule 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Reloading(Event Player) == False;
		Is Alive(Event Player) == True;
		Event Player.UltWeewoo != True;
		Ammo(Event Player, 0) > 0;
	}

	actions
	{
		Create Projectile(Mercy Caduceus Blaster, Event Player, Null, Direction From Angles(Horizontal Facing Angle Of(Event Player)
			+ Random Real(-4, 4), Vertical Facing Angle Of(Event Player) + Random Real(-4, 4)), To World, Damage, Opposite Team Of(Team Of(
			Event Player)), 5, 2, 0, Bad Explosion, Explosion Sound, 0.025, 80, 5, 0, 0, 0);
		Create Projectile(Mercy Caduceus Blaster, Event Player, Null, Direction From Angles(Horizontal Facing Angle Of(Event Player)
			+ Random Real(-4, 4), Vertical Facing Angle Of(Event Player) + Random Real(-4, 4)), To World, Damage, Opposite Team Of(Team Of(
			Event Player)), 5, 2, 0, Bad Explosion, Explosion Sound, 0.025, 80, 5, 0, 0, 0);
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) - 2);
		Wait(0.025, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == False;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
		Is Alive(Event Player) == True;
		Event Player.UltWeewoo != True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Primary Fire));
		Create Effect(All Players(All Teams), Good Aura, Color(Lime Green), Event Player, 1, Visible To Position and Radius);
		Event Player.BeamEffect = Last Created Entity;
		Event Player.BeamDMG = 20;
		Chase Player Variable Over Time(Event Player, BeamDMG, 200, 1.500, Destination and Duration);
		Wait Until(!Is Button Held(Event Player, Button(Secondary Fire)), 1.500);
		Destroy Effect(Event Player.BeamEffect);
		Stop Chasing Player Variable(Event Player, BeamDMG);
		Create Beam Effect(All Players(All Teams), Bad Beam, Eye Position(Event Player) + Vector(0, 0.300, 0), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 20, Color(Lime Green), Visible To Position and Radius);
		Event Player.BeamEffect = Last Created Entity;
		Event Player.Beamactive = True;
		Wait(1.500, Ignore Condition);
		Destroy Effect(Event Player.BeamEffect);
		Event Player.Beamactive = False;
		Allow Button(Event Player, Button(Primary Fire));
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 8);
	}
}

rule("Rule 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Event Player.Beamactive == True;
		Is Alive(Event Player) == True;
		Event Player.UltWeewoo != True;
	}

	actions
	{
		Damage(Filtered Array(Players Within Radius(Event Player, 20, Opposite Team Of(Team Of(Event Player)),
			Surfaces And Enemy Barriers), Is In View Angle(Event Player, Current Array Element, 5)), Event Player,
			Event Player.BeamDMG / 62.500);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Alive(Event Player) == True;
		Event Player.UltWeewoo != True;
	}

	actions
	{
		Event Player.StickyWeb1 = Position Of(Event Player) + Vector(0, 4, 0);
		Create Effect(All Players(All Teams), Ring, Color(Lime Green), Event Player.StickyWeb1, 7.500, Visible To Position and Radius);
		Event Player.StickyID[0] = Last Created Entity;
		Event Player.StickyDest1 = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 1000, Null, Event Player, True);
		Chase Player Variable At Rate(Event Player, StickyWeb1, Event Player.StickyDest1, 50, Destination and Rate);
		Set Ability Cooldown(Event Player, Button(Ability 2), 15);
	}
}

rule("Sticky Web Init 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Event Player.StickyWeb1 == Event Player.StickyDest1;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, StickyWeb1);
		Event Player.StickyActive1 = True;
		Wait(4, Ignore Condition);
		Event Player.StickyActive1 = False;
		Destroy Effect(First Of(Event Player.StickyID));
	}
}

rule("Sticky Web 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Players On Hero(Hero(Echo), Opposite Team Of(Team Of(Event Player))).StickyWeb1) <= 7.500;
		Players On Hero(Hero(Echo), Opposite Team Of(Team Of(Event Player))).StickyActive1 == True;
		Altitude Of(Event Player) <= 1;
	}

	actions
	{
		Damage(Event Player, Players On Hero(Hero(Echo), Opposite Team Of(Team Of(Event Player))), 4);
		Set Move Speed(Event Player, 50);
		Start Assist(Players On Hero(Hero(Echo), Opposite Team Of(Team Of(Event Player))), Event Player, Assisters and Targets);
		Wait(0.200, Ignore Condition);
		Loop If Condition Is True;
		Set Move Speed(Event Player, 100);
		Stop All Assists;
	}
}

rule("Rule 11")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	actions
	{
		Event Player.StickyWeb1 = Vector(0, -5000, 0);
	}
}

rule("Rule 8")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), Vertical Angle From Direction(Up)), 20,
			To World, Cancel Contrary Motion);
		Set Move Speed(Event Player, 175);
		Add Health Pool To Player(Event Player, Health, 50, False, True);
		Start Heal Over Time(Event Player, Event Player, 2, 37.500);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
		Set Ability Cooldown(Event Player, Button(Ability 1), 5);
		Remove Health Pool From Player(Last Created Health Pool);
	}
}

rule("Ult Charge Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Echo;
	}

	conditions
	{
		Event Player.UltEooowwww < 2240;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Passive Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Event Player.UltEooowwww < 2240;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += 5;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult charge ui")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Ultimate Charge: {0}% {1}", Event Player.UltEooowwww / 22.400, Ability Icon String(
			Hero(Ramattra), Button(Ultimate))), Null, Null, Top, 0, Color(Lime Green), Color(Violet), Color(Violet), Visible To and String,
			Default Visibility);
		Wait Until(Event Player.UltEooowwww >= 2240, 99999);
		Destroy HUD Text(Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 75);
		Create HUD Text(Event Player, Custom String("Ultimate Ready!"), Null, Null, Top, 0, Color(Lime Green), Color(White), Color(Gray),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == True, 99999);
		Destroy HUD Text(Last Text ID);
		Create HUD Text(Event Player, Custom String("Using Pollen Puff... {0}", Ability Icon String(Hero(Ramattra), Button(Ultimate))),
			Null, Null, Top, 0, Color(Lime Green), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == False, 99999);
		Destroy All HUD Text;
		Loop;
	}
}

rule("Rule 14")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 13")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.UltEooowwww >= 2240;
	}

	actions
	{
		Event Player.UltWeewoo = True;
		Apply Impulse(Event Player, Up, 25, To World, Cancel Contrary Motion);
		Wait Until(Is Button Held(Event Player, Button(Primary Fire)), 4);
		Create Projectile(Mercy Caduceus Blaster, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 50,
			1, 10, Ring Explosion, Explosion Sound, 0.300, 50, 5, 0, 0, 0);
		Wait(0.800, Ignore Condition);
		Start Damage Over Time(Event Player.Mommy, Event Player, 3, 35);
		Start Assist(Event Player, Event Player.Mommy, Assisters and Targets);
		Set Move Speed(Event Player.Mommy, 40);
		Event Player.UltWeewoo = False;
		Event Player.UltEooowwww = 0;
		Wait(3, Ignore Condition);
		Play Effect(All Players(All Teams), Good Explosion, Color(Lime Green), First Of(Event Player.Mommy), 3);
		Play Effect(All Players(All Teams), Good Explosion, Color(Lime Green), Event Player.Mommy[1], 3);
		Play Effect(All Players(All Teams), Good Explosion, Color(Lime Green), Event Player.Mommy[2], 3);
		Play Effect(All Players(All Teams), Good Explosion, Color(Lime Green), Event Player.Mommy[3], 3);
		Play Effect(All Players(All Teams), Good Explosion, Color(Lime Green), Event Player.Mommy[4], 3);
		Set Move Speed(Event Player.Mommy, 100);
		Stop Assist(Last Assist ID);
		Damage(Players Within Radius(First Of(Event Player.Mommy), 4, Opposite Team Of(Team Of(Event Player)),
			Surfaces And Enemy Barriers), Event Player, 100);
		Damage(Players Within Radius(Event Player.Mommy[1], 4, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers),
			Event Player, 100);
		Damage(Players Within Radius(Event Player.Mommy[2], 4, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers),
			Event Player, 100);
		Damage(Players Within Radius(Event Player.Mommy[3], 4, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers),
			Event Player, 100);
		Damage(Players Within Radius(Event Player.Mommy[4], 4, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers),
			Event Player, 100);
		Event Player.Mommy = 0;
		Wait(0.250, Ignore Condition);
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 14")
{
	event
	{
		Player Dealt Damage;
		All;
		Echo;
	}

	conditions
	{
		Event Player.UltWeewoo == True;
		Event Damage > 3;
	}

	actions
	{
		Modify Player Variable(Event Player, Mommy, Append To Array, Players Within Radius(Victim, 6, Opposite Team Of(Team Of(
			Event Player)), Surfaces));
	}
}

rule("Ult Charge Healing")
{
	event
	{
		Player Dealt Healing;
		All;
		Echo;
	}

	conditions
	{
		Event Player.UltEooowwww < 2240;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Rule 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junker Queen;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Alive(Event Player) == True;
		Ammo(Event Player, 0) > 0;
		Event Player.UltWeewoo != True;
	}

	actions
	{
		Create Projectile(Moira Damage Orb, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 80, 0.500,
			3, Bad Explosion, Explosion Sound, 0.015, 45, 5, 0, 0, 30);
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) - 1);
		Wait(0.900, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junker Queen;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.FutureSight = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 20, All Players(All Teams), Event Player, True);
		Play Effect(All Players(All Teams), Good Explosion, Color(Rose), Event Player.FutureSight, 1);
		Wait(1.500, Ignore Condition);
		Play Effect(All Players(All Teams), Good Explosion, Color(Rose), Event Player.FutureSight, 6);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Rose), Event Player.FutureSight, 6);
		Damage(Players Within Radius(Event Player.FutureSight, 6, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers),
			Event Player, 80);
		Set Status(Players Within Radius(Event Player.FutureSight, 6, Opposite Team Of(Team Of(Event Player)),
			Surfaces And Enemy Barriers), Event Player, Stunned, 0.750);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 6);
	}
}

rule("Rule 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junker Queen;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.Readingiswhat = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 20, All Players(All Teams), Event Player, True);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Purple), Event Player, 1);
		Set Status(Event Player, Null, Stunned, 0.500);
		Wait(0.500, Ignore Condition);
		Teleport(Event Player, Event Player.Readingiswhat);
		Play Effect(All Players(All Teams), Good Explosion, Color(Purple), Event Player.Readingiswhat, 1);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Event Player.Readingiswhat, 50);
		Set Ability Cooldown(Event Player, Button(Ability 1), 7);
		Heal(Event Player, Event Player, 60);
	}
}

rule("Rule 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junker Queen;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Alive(Event Player) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Event Player.UltWeewoo != True;
	}

	actions
	{
		Event Player.Toxic = True;
		Create Projectile(Moira Damage Orb, Event Player, Null, Null, To World, Damage, All Teams, 20, 1, 0, Bad Explosion,
			Explosion Sound, 0, 150, 0.200, 0, 0, 0);
		Wait(0.200, Ignore Condition);
		Event Player.Toxic = False;
		Set Ability Cooldown(Event Player, Button(Ability 2), 7);
	}
}

rule("Rule 5")
{
	event
	{
		Player Took Damage;
		All;
		Junker Queen;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Stop Heal Over Time(Event Player.HOTID);
		Wait(3.350, Restart When True);
		Wait(0.150, Abort When False);
		Start Heal Over Time(Event Player, Event Player, 9999, 40);
		Event Player.HOTID = Last Heal Over Time ID;
	}
}

rule("Rule 6")
{
	event
	{
		Player Dealt Damage;
		All;
		Junker Queen;
	}

	conditions
	{
		Event Player.Toxic == True;
	}

	actions
	{
		Heal(Event Player, Event Player, 40);
		Event Player.Eeeek = Victim;
		Create Effect(All Players(All Teams), Widowmaker Venom Mine Target Effect, Color(White), Event Player.Eeeek, 1,
			Visible To Position and Radius);
		Event Player.ToxicActive = True;
		Event Player.ToxicDOT = 10;
		Chase Player Variable Over Time(Event Player, ToxicDOT, 60, 3.500, None);
		Wait(3.500, Ignore Condition);
		Event Player.ToxicActive = False;
		Destroy Effect(Last Created Entity);
		Stop Chasing Player Variable(Event Player, ToxicDOT);
	}
}

rule("Rule 7")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junker Queen;
	}

	conditions
	{
		Event Player.ToxicActive == True;
	}

	actions
	{
		Damage(Event Player.Eeeek, Event Player, Event Player.ToxicDOT / 10);
		Heal(Event Player, Event Player, Event Player.ToxicDOT / 10);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult Charge Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Junker Queen;
	}

	conditions
	{
		Event Player.UltEooowwww < 2730;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Ult Charge Healing")
{
	event
	{
		Player Dealt Healing;
		All;
		Junker Queen;
	}

	conditions
	{
		Event Player.UltEooowwww < 2730;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Healing;
	}
}

rule("Passive Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junker Queen;
	}

	conditions
	{
		Event Player.UltEooowwww < 2730;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += 5;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult charge ui")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junker Queen;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Ultimate Charge: {0}% {1}", Event Player.UltEooowwww / 27.300, Ability Icon String(
			Hero(Ramattra), Button(Ultimate))), Null, Null, Top, 0, Color(Purple), Color(Violet), Color(Violet), Visible To and String,
			Default Visibility);
		Wait Until(Event Player.UltEooowwww >= 2730, 99999);
		Destroy HUD Text(Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 75);
		Create HUD Text(Event Player, Custom String("Ultimate Ready!"), Null, Null, Top, 0, Color(Purple), Color(White), Color(Gray),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == True, 99999);
		Destroy HUD Text(Last Text ID);
		Create HUD Text(Event Player, Custom String("Using Sludge Wave... {0}", Ability Icon String(Hero(Sigma), Button(Ultimate))), Null,
			Null, Top, 0, Color(Purple), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == False, 99999);
		Destroy All HUD Text;
		Loop;
	}
}

rule("Rule 22")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junker Queen;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 13")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junker Queen;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.UltEooowwww >= 2730;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.UltWeewoo = True;
		Set Move Speed(Event Player, 100);
		Start Heal Over Time(Event Player, Event Player, 6, 40);
		Wait(6, Ignore Condition);
		Event Player.UltWeewoo = False;
		Event Player.UltEooowwww = 0;
		Set Move Speed(Event Player, 100);
	}
}

rule("Rule 14")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junker Queen;
	}

	conditions
	{
		Event Player.UltWeewoo == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create Projectile(Moira Damage Orb, Event Player, Null, Direction From Angles(Horizontal Facing Angle Of(Event Player) + -10,
			Vertical Facing Angle Of(Event Player)), To World, Damage, Opposite Team Of(Team Of(Event Player)), 5, 2, 0, Bad Explosion,
			Explosion Sound, 0, 90, 0.500, 9, 0, 0);
		Create Projectile(Moira Damage Orb, Event Player, Null, Direction From Angles(Horizontal Facing Angle Of(Event Player) + -8,
			Vertical Facing Angle Of(Event Player)), To World, Damage, Opposite Team Of(Team Of(Event Player)), 5, 2, 0, Bad Explosion,
			Explosion Sound, 0, 90, 0.500, 9, 0, 0);
		Create Projectile(Moira Damage Orb, Event Player, Null, Direction From Angles(Horizontal Facing Angle Of(Event Player) + -6,
			Vertical Facing Angle Of(Event Player)), To World, Damage, Opposite Team Of(Team Of(Event Player)), 5, 2, 0, Bad Explosion,
			Explosion Sound, 0, 90, 0.500, 9, 0, 0);
		Create Projectile(Moira Damage Orb, Event Player, Null, Direction From Angles(Horizontal Facing Angle Of(Event Player) + -4,
			Vertical Facing Angle Of(Event Player)), To World, Damage, Opposite Team Of(Team Of(Event Player)), 5, 2, 0, Bad Explosion,
			Explosion Sound, 0, 90, 0.500, 9, 0, 0);
		Create Projectile(Moira Damage Orb, Event Player, Null, Direction From Angles(Horizontal Facing Angle Of(Event Player) + -2,
			Vertical Facing Angle Of(Event Player)), To World, Damage, Opposite Team Of(Team Of(Event Player)), 5, 2, 0, Bad Explosion,
			Explosion Sound, 0, 90, 0.500, 9, 0, 0);
		Create Projectile(Moira Damage Orb, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 5, 2, 0,
			Bad Explosion, Explosion Sound, 0, 90, 0.500, 9, 0, 0);
		Create Projectile(Moira Damage Orb, Event Player, Null, Direction From Angles(Horizontal Facing Angle Of(Event Player) + 2,
			Vertical Facing Angle Of(Event Player)), To World, Damage, Opposite Team Of(Team Of(Event Player)), 5, 2, 0, Bad Explosion,
			Explosion Sound, 0, 90, 0.500, 9, 0, 0);
		Create Projectile(Moira Damage Orb, Event Player, Null, Direction From Angles(Horizontal Facing Angle Of(Event Player) + 4,
			Vertical Facing Angle Of(Event Player)), To World, Damage, Opposite Team Of(Team Of(Event Player)), 5, 2, 0, Bad Explosion,
			Explosion Sound, 0, 90, 0.500, 9, 0, 0);
		Create Projectile(Moira Damage Orb, Event Player, Null, Direction From Angles(Horizontal Facing Angle Of(Event Player) + 6,
			Vertical Facing Angle Of(Event Player)), To World, Damage, Opposite Team Of(Team Of(Event Player)), 5, 2, 0, Bad Explosion,
			Explosion Sound, 0, 90, 0.500, 9, 0, 0);
		Create Projectile(Moira Damage Orb, Event Player, Null, Direction From Angles(Horizontal Facing Angle Of(Event Player) + 8,
			Vertical Facing Angle Of(Event Player)), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 2, 0, Bad Explosion,
			Explosion Sound, 0, 90, 0.500, 9, 0, 0);
		Create Projectile(Moira Damage Orb, Event Player, Null, Direction From Angles(Horizontal Facing Angle Of(Event Player) + 10,
			Vertical Facing Angle Of(Event Player)), To World, Damage, Opposite Team Of(Team Of(Event Player)), 5, 2, 0, Bad Explosion,
			Explosion Sound, 0, 90, 0.500, 9, 0, 0);
		Wait(0.125, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 15")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junker Queen;
	}

	conditions
	{
		Max Health(Event Player) <= 460;
	}

	actions
	{
		Add Health Pool To Player(Event Player, Health, 75, True, True);
	}
}

rule("Rule 16")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junker Queen;
	}

	conditions
	{
		Health Of Type(Event Player, Health) > 530;
	}

	actions
	{
		Remove All Health Pools From Player(Event Player);
	}
}

rule("Rule 17")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Junker Queen);
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Remove All Health Pools From Player(Event Player);
	}
}

rule("Rule 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Ammo(Event Player, 0) > 0;
		Is Alive(Event Player) == True;
		Is Reloading(Event Player) == False;
	}

	actions
	{
		Create Projectile(Symmetra Photon Projector, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)),
			12, 2, 0, Bad Explosion, Explosion Sound, 0.040, 60, 5, 0, 3, 0);
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) - 1);
		Wait(0.125, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Alive(Event Player) == True;
		Event Player.IronDefenseCooldown == 0;
	}

	actions
	{
		Destroy Dummy Bot(Team Of(Event Player), 5);
		Destroy Effect(Event Player.IronDefenseEffects);
		Event Player.IronDefenseCooldown = 1;
		Event Player.IronDefenseLocation = Nearest Walkable Position(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * 15, Null, Event Player, True));
		Create Effect(All Players(Team Of(Event Player)), Ring, Color(Purple), Event Player.IronDefenseLocation, 25,
			Visible To Position and Radius);
		Event Player.IronDefenseEffects[0] = Last Created Entity;
		Create Effect(All Players(All Teams), Sphere, Color(Violet), Event Player.IronDefenseLocation, 1.500,
			Visible To Position and Radius);
		Event Player.IronDefenseEffects[1] = Last Created Entity;
		Create Effect(All Players(Team Of(Event Player)), Ring, Color(Yellow), Event Player.IronDefenseLocation, 15,
			Visible To Position and Radius);
		Event Player.IronDefenseEffects[2] = Last Created Entity;
		Create Dummy Bot(Hero(Sombra), Team Of(Event Player), 5, Event Player.IronDefenseLocation, Vector(0, 0, 0));
		Event Player.DummyBot = Last Created Entity;
		Set Invisible(Event Player.DummyBot, All);
		Set Status(Event Player.DummyBot, Null, Rooted, 9999);
		Set Knockback Received(Event Player.DummyBot, 0);
		Wait(1, Ignore Condition);
		Event Player.IronDefenseActive = True;
		Wait(10, Ignore Condition);
		Event Player.IronDefenseCooldown = 0;
		Small Message(Event Player, Custom String("Iron Defense ready. {0}", Ability Icon String(Hero(Zarya), Button(Ability 1))));
	}
}

rule("Rule 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Players On Hero(Hero(Baptiste), Team Of(Event Player)).IronDefenseLocation) <= 25;
		Players On Hero(Hero(Baptiste), Team Of(Event Player)).IronDefenseActive == True;
		Event Player.HasShields == False;
	}

	actions
	{
		Add Health Pool To Player(Event Player, Shields, 50, True, True);
		Event Player.HealthPool = Last Created Health Pool;
		Event Player.HasShields = True;
	}
}

rule("Rule 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Players On Hero(Hero(Baptiste), Team Of(Event Player)).IronDefenseLocation) > 25;
	}

	actions
	{
		Wait(3, Ignore Condition);
		Remove Health Pool From Player(Event Player.HealthPool);
		Event Player.HasShields = False;
	}
}

rule("Rule 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Players On Hero(Hero(Baptiste), Team Of(Event Player)).IronDefenseActive == False;
	}

	actions
	{
		Remove Health Pool From Player(Event Player.HealthPool);
		Event Player.HasShields = False;
	}
}

rule("Rule 6")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dead(Event Player.DummyBot) == True;
	}

	actions
	{
		Destroy Dummy Bot(Team Of(Event Player), 5);
		Event Player.IronDefenseCooldown = 1;
		Remove Health Pool From Player(All Players(Team Of(Event Player)).HealthPool);
		Event Player.IronDefenseActive = False;
		Destroy Effect(Event Player.IronDefenseEffects);
		Wait(15, Ignore Condition);
		Event Player.IronDefenseCooldown = 0;
		Small Message(Event Player, Custom String("Iron Defense ready. {0}", Ability Icon String(Hero(Zarya), Button(Ability 1))));
	}
}

rule("Rule 7")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Event Player.IronDefenseActive == True;
	}

	actions
	{
		Heal(Filtered Array(Players Within Radius(Event Player.IronDefenseLocation, 15, Team Of(Event Player),
			Surfaces And Enemy Barriers), !(Current Array Element == Event Player.DummyBot)), Event Player, 20);
		Wait(0.800, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 8")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Color(Violet), Nearest Walkable Position(Ray Cast Hit Position(Eye Position(
			Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 40, All Players(All Teams), Event Player,
			True)), 1, Visible To Position and Radius);
		Wait Until(Is Button Held(Event Player, Button(Primary Fire)), 99999);
		Destroy Effect(Last Created Entity);
		Event Player.StealthRock = Nearest Walkable Position(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 40, Null, Event Player, True)) + Vector(0, 1.300, 0);
		Play Effect(All Players(All Teams), Good Explosion, Color(Purple), Event Player.StealthRock, 1);
		Create Projectile(Sigma Hypersphere, Event Player, Ray Cast Hit Position(Event Player.StealthRock,
			Event Player.StealthRock + Vector(0, 0, 5), Null, Event Player, True), Down, To World, Damage, Opposite Team Of(Team Of(
			Event Player)), 100, 1, 0, Bad Explosion, Explosion Sound, 0.110, 0.100, 9, 8, 0, 0);
		Create Projectile(Sigma Hypersphere, Event Player, Ray Cast Hit Position(Event Player.StealthRock,
			Event Player.StealthRock + Vector(5, 0, 1.500), Null, Event Player, True), Down, To World, Damage, Opposite Team Of(Team Of(
			Event Player)), 100, 1, 0, Bad Explosion, Explosion Sound, 0.110, 0.100, 9, 8, 0, 0);
		Create Projectile(Sigma Hypersphere, Event Player, Ray Cast Hit Position(Event Player.StealthRock,
			Event Player.StealthRock + Vector(3, 0, -4), Null, Event Player, True), Down, To World, Damage, Opposite Team Of(Team Of(
			Event Player)), 100, 1, 0, Bad Explosion, Explosion Sound, 0.110, 0.100, 9, 8, 0, 0);
		Create Projectile(Sigma Hypersphere, Event Player, Ray Cast Hit Position(Event Player.StealthRock,
			Event Player.StealthRock + Vector(-3, 0, -4), Null, Event Player, True), Down, To World, Damage, Opposite Team Of(Team Of(
			Event Player)), 100, 1, 0, Bad Explosion, Explosion Sound, 0.110, 0.100, 9, 8, 0, 0);
		Create Projectile(Sigma Hypersphere, Event Player, Ray Cast Hit Position(Event Player.StealthRock,
			Event Player.StealthRock + Vector(-5, 0, 1.500), Null, Event Player, True), Down, To World, Damage, Opposite Team Of(Team Of(
			Event Player)), 100, 1, 0, Bad Explosion, Explosion Sound, 0.110, 0.100, 9, 8, 0, 0);
		Set Ability Cooldown(Event Player, Button(Ability 1), 8);
	}
}

rule("Rule 9")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Alive(Event Player) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Event Player.AcidSpray = True;
		Create Projectile(Moira Damage Orb, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 30, 1, 0,
			Bad Explosion, Explosion Sound, 0, 125, 0.200, 0, 0, 0);
		Wait(0.200, Ignore Condition);
		Event Player.AcidSpray = False;
		Set Ability Cooldown(Event Player, Button(Ability 2), 12);
	}
}

rule("Rule 10")
{
	event
	{
		Player Dealt Damage;
		All;
		Baptiste;
	}

	conditions
	{
		Event Player.AcidSpray == True;
	}

	actions
	{
		Event Player.AcidVictim = Victim;
		Start Assist(Event Player, Event Player.AcidVictim, Assisters and Targets);
		Set Move Speed(Event Player.AcidVictim, 80);
		Start Damage Over Time(Event Player.AcidVictim, Event Player, 4, 10);
		Set Damage Received(Event Player.AcidVictim, 125);
		Wait(4, Ignore Condition);
		Set Damage Received(Event Player.AcidVictim, 100);
		Set Move Speed(Event Player.AcidVictim, 100);
		Stop Assist(Last Assist ID);
	}
}

rule("Ult Charge Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Baptiste;
	}

	conditions
	{
		Event Player.UltEooowwww < 2380;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Ult Charge Healing")
{
	event
	{
		Player Dealt Healing;
		All;
		Baptiste;
	}

	conditions
	{
		Event Player.UltEooowwww < 2380;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Healing;
	}
}

rule("Passive Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Event Player.UltEooowwww < 2380;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += 5;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult charge ui")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Ultimate Charge: {0}% {1}", Event Player.UltEooowwww / 23.800, Ability Icon String(
			Hero(Sojourn), Button(Ultimate))), Null, Null, Top, 0, Color(Orange), Color(Violet), Color(Violet), Visible To and String,
			Default Visibility);
		Wait Until(Event Player.UltEooowwww >= 2380, 99999);
		Destroy HUD Text(Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 75);
		Create HUD Text(Event Player, Custom String("Ultimate Ready!"), Null, Null, Top, 0, Color(Orange), Color(White), Color(Gray),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == True, 99999);
		Destroy HUD Text(Last Text ID);
		Create HUD Text(Event Player, Custom String("Using Meteor Beam... {0}", Ability Icon String(Hero(Sojourn), Button(Ultimate))),
			Null, Null, Top, 0, Color(Orange), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == False, 99999);
		Destroy HUD Text(Last Text ID);
		Loop;
	}
}

rule("Rule 22")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 16")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.UltEooowwww >= 2380;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Orange), Nearest Walkable Position(Ray Cast Hit Position(Eye Position(
			Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 40, Null, Event Player, True)), 8,
			Visible To Position and Radius);
		Event Player.UltEffects = Last Created Entity;
		Wait Until(Is Button Held(Event Player, Button(Primary Fire)), 99999);
		Destroy Effect(Event Player.UltEffects);
		Event Player.UltWeewoo = True;
		Event Player.UltStart = Ray Cast Hit Position(Position Of(Event Player), Position Of(Event Player) + Vector(0, 12, 0), Null,
			Event Player, True);
		Event Player.UltTarget = Nearest Walkable Position(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 40, Null, Event Player, True));
		Create Effect(All Players(All Teams), Light Shaft, Color(Orange), Event Player.UltTarget, 8, Visible To Position and Radius);
		Event Player.UltEffects[0] = Last Created Entity;
		Create Effect(All Players(All Teams), Orb, Color(Orange), Event Player.UltStart, 1, Visible To Position and Radius);
		Event Player.UltEffects[1] = Last Created Entity;
		Wait(7, Ignore Condition);
		Create Projectile(Zarya Particle Cannon, Event Player, Event Player.UltStart, Direction Towards(Event Player.UltStart,
			Event Player.UltTarget), To World, Damage, Opposite Team Of(Team Of(Event Player)), 80, 1, 8, Bad Explosion, Explosion Sound,
			0, 50, 5, 0, 0, 0);
		Create Projectile(Zarya Particle Cannon, Event Player, Event Player.UltStart, Direction Towards(Event Player.UltStart,
			Event Player.UltTarget), To World, Heal, Team Of(Event Player), 120, 1, 8, Bad Explosion, Explosion Sound, 0, 50, 5, 0, 0, 0);
		Wait(1, Ignore Condition);
		Event Player.UltWeewoo = False;
		Event Player.UltEooowwww = 0;
		Destroy Effect(Event Player.UltEffects);
	}
}

rule("Rule 17")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Event Player.UltWeewoo == True;
	}

	actions
	{
		Create Projectile(Zarya Particle Cannon, Event Player, Event Player.UltStart, Direction Towards(Event Player.UltStart,
			Event Player.UltTarget), To World, Damage, Opposite Team Of(Team Of(Event Player)), 60, 1, 8, Bad Explosion, Explosion Sound,
			0, 60, 5, 0, 0, 0);
		Create Projectile(Zarya Particle Cannon, Event Player, Event Player.UltStart, Direction Towards(Event Player.UltStart,
			Event Player.UltTarget), To World, Heal, Team Of(Event Player), 90, 1, 8, Bad Explosion, Explosion Sound, 0, 60, 5, 0, 0, 0);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 18")
{
	event
	{
		Player Died;
		All;
		Baptiste;
	}

	actions
	{
		Create Projectile(Sigma Hypersphere, Event Player, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Vector(0, 0, 5), Null, Event Player, True), Down, To World, Damage, Opposite Team Of(Team Of(Event Player)), 30, 1, 0,
			Bad Explosion, Explosion Sound, 0.100, 0.100, 9, 8, 0, 0);
		Create Projectile(Sigma Hypersphere, Event Player, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Vector(5, 0, 1.500), Null, Event Player, True), Down, To World, Damage, Opposite Team Of(Team Of(Event Player)), 30, 1, 0,
			Bad Explosion, Explosion Sound, 0.100, 0.100, 9, 8, 0, 0);
		Create Projectile(Sigma Hypersphere, Event Player, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Vector(3, 0, -4), Null, Event Player, True), Down, To World, Damage, Opposite Team Of(Team Of(Event Player)), 30, 1, 0,
			Bad Explosion, Explosion Sound, 0.100, 0.100, 9, 8, 0, 0);
		Create Projectile(Sigma Hypersphere, Event Player, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Vector(-3, 0, -4), Null, Event Player, True), Down, To World, Damage, Opposite Team Of(Team Of(Event Player)), 30, 1, 0,
			Bad Explosion, Explosion Sound, 0.100, 0.100, 9, 8, 0, 0);
		Create Projectile(Sigma Hypersphere, Event Player, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Vector(-5, 0, 1.500), Null, Event Player, True), Down, To World, Damage, Opposite Team Of(Team Of(Event Player)), 30, 1, 0,
			Bad Explosion, Explosion Sound, 0.100, 0.100, 9, 8, 0, 0);
	}
}

rule("Rule 19")
{
	event
	{
		Player Dealt Damage;
		All;
		Baptiste;
	}

	conditions
	{
		Is Dead(Event Player) == True;
		Distance Between(Event Player, Victim) <= 8;
		Event Damage >= 15;
	}

	actions
	{
		Start Damage Over Time(Victim, Event Player, 3, 30);
	}
}

rule("Rule 20")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Jump));
		Wait Until(!Is Button Held(Event Player, Button(Crouch)), 99999);
		Wait(1, Ignore Condition);
		Allow Button(Event Player, Button(Jump));
	}
}

rule("Rule 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Alive(Event Player) == True;
		Event Player.UltWeewoo == False;
	}

	actions
	{
		Play Effect(All Players(All Teams), Bad Explosion, Color(White), Event Player, 1);
		Damage(Filtered Array(Players Within Radius(Event Player, 7.500, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Is In View Angle(Event Player, Current Array Element, 35)), Event Player, 45);
		Apply Impulse(Filtered Array(Players Within Radius(Event Player, 7.500, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Is In View Angle(Event Player, Current Array Element, 35)), Facing Direction Of(Event Player), 3, To World,
			Cancel Contrary Motion);
		Wait(0.150, Ignore Condition);
		Damage(Filtered Array(Players Within Radius(Event Player, 7.500, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Is In View Angle(Event Player, Current Array Element, 35)), Event Player, 45);
		Apply Impulse(Filtered Array(Players Within Radius(Event Player, 7.500, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Is In View Angle(Event Player, Current Array Element, 35)), Facing Direction Of(Event Player), 10, To World,
			Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Bad Explosion, Color(White), Event Player, 1);
		Wait(0.600, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 200);
		Wait(0.250, Ignore Condition);
		Wait Until(!Is Button Held(Event Player, Button(Secondary Fire)), 1.750);
		Set Move Speed(Event Player, 100);
		If(Event Player.UltWeewoo == True);
			Set Move Speed(Event Player, 140);
		End;
		Damage(Filtered Array(Players Within Radius(Event Player, 8, Opposite Team Of(Team Of(Event Player)), Surfaces), Is In View Angle(
			Event Player, Current Array Element, 35)), Event Player, 40);
		Set Status(Filtered Array(Players Within Radius(Event Player, 8, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Is In View Angle(Event Player, Current Array Element, 35)), Event Player, Stunned, 0.850);
		Wait(5, Ignore Condition);
		Small Message(Event Player, Custom String("Fake Out ready. {0}", Ability Icon String(Hero(Genji), Button(Ability 1))));
	}
}

rule("Rule 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), Vertical Angle From Direction(Up)), 20,
			To World, Cancel Contrary Motion);
		Set Move Speed(Event Player, 160);
		Wait(0.150, Ignore Condition);
		Wait Until(Is On Ground(Event Player), 99999);
		Set Move Speed(Event Player, 100);
		If(Event Player.UltWeewoo == True);
			Set Move Speed(Event Player, 140);
		End;
		Damage(Players Within Radius(Event Player, 7, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 80);
		Set Status(Players Within Radius(Event Player, 2, Opposite Team Of(Team Of(Event Player)), Surfaces), Null, Knocked Down, 0.900);
		Apply Impulse(Players Within Radius(Event Player, 7, Opposite Team Of(Team Of(Event Player)), Surfaces), Facing Direction Of(
			Event Player), 12, To World, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Ring Explosion, Color(White), Event Player, 14);
		Wait(5, Ignore Condition);
		Small Message(Event Player, Custom String("Bounce ready. {0}", Ability Icon String(Hero(Winston), Button(Ability 1))));
	}
}

rule("Rule 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Color(Rose), Event Player, 1, Visible To Position and Radius);
		Event Player.BubbleID1 = Last Created Entity;
		Wait Until(!Is Using Ability 2(Event Player), 99999);
		Destroy Effect(Event Player.BubbleID1);
	}
}

rule("Ult Charge Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Genji;
	}

	conditions
	{
		Event Player.UltEooowwww < 1680;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Passive Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Event Player.UltEooowwww < 1680;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += 5;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult charge ui")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Ultimate Charge: {0}% {1}", Event Player.UltEooowwww / 16.800, Ability Icon String(
			Hero(Symmetra), Button(Ultimate))), Null, Null, Top, 0, Color(White), Color(Violet), Color(Violet), Visible To and String,
			Default Visibility);
		Wait Until(Event Player.UltEooowwww >= 1680, 99999);
		Destroy HUD Text(Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 75);
		Create HUD Text(Event Player, Custom String("Ultimate Ready!"), Null, Null, Top, 0, Color(White), Color(White), Color(Gray),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == True, 99999);
		Destroy HUD Text(Last Text ID);
		Create HUD Text(Event Player, Custom String("Using Mega Evolution... {0}", Ability Icon String(Hero(Symmetra), Button(Ultimate))),
			Null, Null, Top, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == False, 99999);
		Destroy All HUD Text;
		Loop;
	}
}

rule("Rule 14")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 9")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Alive(Event Player) == True;
		Event Player.UltEooowwww >= 1680;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Color(Aqua), Event Player, 3, Visible To Position and Radius);
		Event Player.BubbleID2 = Last Created Entity;
		Set Status(Event Player, Null, Stunned, 1);
		Set Status(Event Player, Null, Invincible, 1);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Aqua), Event Player, 5);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Purple), Event Player, 8);
		Wait(1, Ignore Condition);
		Destroy Effect(Event Player.BubbleID2);
		Start Heal Over Time(Event Player, Event Player, 8, 20);
		Set Move Speed(Event Player, 140);
		Event Player.UltWeewoo = True;
		Wait(8, Ignore Condition);
		Set Move Speed(Event Player, 100);
		Event Player.UltEooowwww = 0;
		Event Player.UltWeewoo = False;
	}
}

rule("Rule 10")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Alive(Event Player) == True;
		Event Player.UltWeewoo == True;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Stunned) == False;
	}

	actions
	{
		Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Event Player, 1);
		Damage(Filtered Array(Players Within Radius(Event Player, 7.500, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Is In View Angle(Event Player, Current Array Element, 35)), Event Player, 25);
		Apply Impulse(Filtered Array(Players Within Radius(Event Player, 7.500, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Is In View Angle(Event Player, Current Array Element, 35)), Facing Direction Of(Event Player), 3, To World,
			Cancel Contrary Motion);
		Wait(0.175, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Alive(Event Player) == True;
		Event Player.Slashing != True;
	}

	actions
	{
		Create Beam Effect(All Players(All Teams), Echo Focusing Beam, Eye Position(Event Player) + Vector(0, -0.150, 0), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * 14, Color(Rose), Visible To Position and Radius);
		Event Player.FairyWind = Last Created Entity;
		While(Is Alive(Event Player) && Is Button Held(Event Player, Button(Primary Fire)));
			Damage(Filtered Array(Players Within Radius(Event Player, 14, Opposite Team Of(Team Of(Event Player)),
				Surfaces And Enemy Barriers), Is In View Angle(Event Player, Current Array Element, 9)), Event Player, 1.280);
			Wait(0.016, Ignore Condition);
		End;
		Destroy Effect(Event Player.FairyWind);
	}
}

rule("Rule 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create Projectile(Orb Projectile, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 60, 1, 3,
			Ring Explosion, Explosion Sound, 0, 80, 0.333, 10, 0, 0);
		Event Player.Slashing = True;
		Wait(0.350, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 5);
		Event Player.Slashing = False;
	}
}

rule("Rule 3")
{
	event
	{
		Player Dealt Damage;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.Slashing == True;
		Event Damage >= 5;
	}

	actions
	{
		Set Status(Victim, Event Player, Stunned, 0.750);
		Event Player.Slashing = False;
	}
}

rule("Rule 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Start Heal Over Time(Event Player, Event Player, 2, 112.500);
		Event Player.Roosting = True;
		Wait(2, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 2), 12);
		Event Player.Roosting = False;
	}
}

rule("Rule 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Jump)) == True;
		Is In Air(Event Player) == True;
		Event Player.Roosting != True;
	}

	actions
	{
		Set Gravity(Event Player, 15);
		Wait Until(!Is Button Held(Event Player, Button(Jump)), 99999);
		Set Gravity(Event Player, 100);
	}
}

rule("Rule 6")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Is Alive(Event Player) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Event Player.Roosting != True;
	}

	actions
	{
		Set Gravity(Event Player, 0);
		Set Move Speed(Event Player, 200);
		Apply Impulse(Event Player, Up, 12, To World, Cancel Contrary Motion);
		Start Accelerating(Event Player, Direction Towards(Eye Position(Event Player), Ray Cast Hit Position(Eye Position(Event Player),
			Eye Position(Event Player) + Facing Direction Of(Event Player) * 20, Null, Event Player, True)), 4, 12, To World,
			Direction Rate and Max Speed);
		Wait(0.500, Ignore Condition);
		Wait Until(Is Button Held(Event Player, Button(Ability 1)), 2.500);
		Set Ability Cooldown(Event Player, Button(Ability 1), 6);
		Set Move Speed(Event Player, 100);
		Stop Accelerating(Event Player);
		Set Gravity(Event Player, 100);
		If(Is Button Held(Event Player, Button(Jump)));
			Set Gravity(Event Player, 15);
	}
}

rule("Rule 10")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Alive(Event Player) == True;
		Event Player.UltEooowwww >= 2520;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Color(White), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * 30, Null, Event Player, True), 10, Visible To Position and Radius);
		Event Player.SkyAttackEffect = Last Created Entity;
		Wait Until(Is Button Held(Event Player, Button(Primary Fire)), 99999);
		Event Player.UltWeewoo = True;
		Destroy Effect(Event Player.SkyAttackEffect);
		Event Player.SkyAttackLocation = Eye Position(Event Player);
		Create Effect(All Players(All Teams), Sphere, Color(White), Event Player.SkyAttackLocation, 10, Visible To Position and Radius);
		Event Player.SkyAttackEffect = Last Created Entity;
		Event Player.SkyAttackDest = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 30, Null, Event Player, True);
		Set Gravity(Event Player, 0);
		Set Status(Event Player, Null, Invincible, 1.500);
		Set Status(Event Player, Null, Stunned, 1.500);
		Wait(1.500, Ignore Condition);
		Chase Player Variable At Rate(Event Player, SkyAttackLocation, Event Player.SkyAttackDest, 10, Destination and Rate);
		Wait(3, Ignore Condition);
		Damage(Players Within Radius(Event Player.SkyAttackLocation, 15, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player,
			100);
		Apply Impulse(Players Within Radius(Event Player.SkyAttackLocation, 15, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Facing Direction Of(Event Player), 12, To World, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Ring Explosion, Color(White), Event Player.SkyAttackLocation, 30);
		Destroy Effect(Event Player.SkyAttackEffect);
		Event Player.UltWeewoo = False;
		Event Player.UltEooowwww = 0;
	}
}

rule("Ult Charge Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.UltEooowwww < 2520;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Ult Charge Healing")
{
	event
	{
		Player Dealt Healing;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.UltEooowwww < 2520;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Healing;
	}
}

rule("Passive Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.UltEooowwww < 2520;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += 5;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult charge ui")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Ultimate Charge: {0}% {1}", Event Player.UltEooowwww / 25.200, Ability Icon String(
			Hero(Sojourn), Button(Ultimate))), Null, Null, Top, 0, Color(White), Color(Violet), Color(Violet), Visible To and String,
			Default Visibility);
		Wait Until(Event Player.UltEooowwww >= 2520, 99999);
		Destroy HUD Text(Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 75);
		Create HUD Text(Event Player, Custom String("Ultimate Ready!"), Null, Null, Top, 0, Color(White), Color(White), Color(Gray),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == True, 99999);
		Destroy HUD Text(Last Text ID);
		Create HUD Text(Event Player, Custom String("Using Sky Attack... {0}", Ability Icon String(Hero(Sojourn), Button(Ultimate))), Null,
			Null, Top, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == False, 99999);
		Destroy HUD Text(Last Text ID);
		Loop;
	}
}

rule("Rule 22")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 16")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.UltWeewoo == True;
	}

	actions
	{
		Damage(Players Within Radius(Event Player.SkyAttackLocation, 10, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player,
			7);
		Apply Impulse(Players Within Radius(Event Player.SkyAttackLocation, 10, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Direction Towards(Players Within Radius(Event Player.SkyAttackLocation, 10, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Event Player.SkyAttackLocation), 4, To World, Cancel Contrary Motion);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.Snatching != True;
		Is Button Held(Event Player, Button(Secondary Fire)) == False;
	}

	actions
	{
		Event Player.PsychicTarget = First Of(Sorted Array(Filtered Array(Players Within Radius(Event Player, 30, Opposite Team Of(Team Of(
			Event Player)), Surfaces), Is In View Angle(Event Player, Current Array Element, 8.500) && Is Alive(Current Array Element)),
			Health(Current Array Element) / Max Health(Current Array Element)));
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Rose), Event Player.PsychicTarget, 3);
		Damage(Event Player.PsychicTarget, Event Player,
			5 * Event Player.PsychicTarget.PsychicCount ^ 2 + 10 * Event Player.PsychicTarget.PsychicCount + 30);
		If(Event Player.PsychicTarget.PsychicCount < 3);
			Event Player.PsychicTarget.PsychicCount += 1;
		End;
		Wait(0.850, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.HealPulseTarget = First Of(Sorted Array(Filtered Array(Players Within Radius(Eye Position(Event Player), 40, Team Of(
			Event Player), Surfaces), Is In View Angle(Event Player, Current Array Element, 30) && Is Alive(Current Array Element)
			&& Current Array Element != Event Player), Health(Current Array Element) / Max Health(Current Array Element)));
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Rose), Event Player.HealPulseTarget, 3);
		Wait Until(!Is Button Held(Event Player, Button(Secondary Fire)), 99999);
		Event Player.HealPulseTarget = 0;
	}
}

rule("Rule 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		(!Is In Line of Sight(Event Player, Event Player.HealPulseTarget, Barriers Do Not Block LOS) || Distance Between(Event Player,
			Event Player.HealPulseTarget) > 40) == True;
	}

	actions
	{
		Wait(2, Abort When False);
		Event Player.HealPulseTarget = 0;
	}
}

rule("Rule 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Event Player.HealPulseTarget != 0;
	}

	actions
	{
		Event Player.BeamVisibility = All Players(All Teams);
		Wait Until(Event Player.HealPulseTarget == 0, 99999);
		Event Player.BeamVisibility = Null;
	}
}

rule("Rule 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	actions
	{
		Create Beam Effect(Event Player.BeamVisibility, Good Beam, Vector(0, 1, 0) + Eye Position(Event Player), Vector(0, 1, 0)
			+ Eye Position(Event Player.HealPulseTarget), Color(Rose), Visible To Position and Radius);
		Create HUD Text(Event Player, Custom String("{0}: {1} {2}", Icon String(Plus), Hero Icon String(Hero Of(
			Event Player.HealPulseTarget)), Event Player.HealPulseTarget), Null, Null, Left, 0, Color(Rose), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create Icon(Event Player.ShadowTagVisibility, Event Player.ShadowTag, Arrow: Down, Visible To and Position, Color(Rose), True);
		Create Effect(Event Player.BeamVisibility, Orb, Color(Rose), Eye Position(Event Player) + Vector(0, 1, 0), 1,
			Visible To Position and Radius);
		Create Effect(Event Player.BeamVisibility, Orb, Color(Rose), Eye Position(Event Player.HealPulseTarget) + Vector(0, 1, 0), 1,
			Visible To Position and Radius);
	}
}

rule("Rule 6")
{
	event
	{
		Player Died;
		All;
		Moira;
	}

	actions
	{
		Event Player.HealPulseTarget = 0;
	}
}

rule("Rule 7")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Event Player.HealPulseTarget != 0;
	}

	actions
	{
		Heal(Event Player.HealPulseTarget, Event Player, 6.500);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 8")
{
	event
	{
		Player Died;
		All;
		All;
	}

	actions
	{
		Event Player.PsychicCount = 0;
	}
}

rule("Rule 9")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.PsychicCount > 0;
	}

	actions
	{
		Wait(4, Restart When True);
		Event Player.PsychicCount -= 1;
	}
}

rule("Rule 10")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.PsychicCount > 0;
	}

	actions
	{
		Event Player.EffectVisibility = Players On Hero(Hero(Moira), Opposite Team Of(Team Of(Event Player)));
	}
}

rule("Rule 10")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.PsychicCount == 0;
	}

	actions
	{
		Event Player.EffectVisibility = Null;
	}
}

rule("Rule 12")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create Effect(Event Player.EffectVisibility, Cloud, Color(Rose), Event Player, 3, Visible To Position and Radius);
	}
}

rule("Rule 13")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Is Alive(Event Player) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Event Player, 50);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Rose), Event Player, 3);
		Set Damage Received(Event Player, 70);
		Set Damage Dealt(Event Player, 125);
		Start Heal Over Time(Event Player, Event Player, 4, 20);
		Wait(4, Ignore Condition);
		Set Damage Received(Event Player, 100);
		Set Damage Dealt(Event Player, 100);
		Set Ability Cooldown(Event Player, Button(Ability 1), 11);
	}
}

rule("Rule 14")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create Projectile(Orb Projectile, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 60, 1, 4,
			Bad Explosion, Explosion Sound, 0.030, 90, 0.500, 0, 0, 0);
		Event Player.Snatching = True;
		Wait(0.500, Ignore Condition);
		Event Player.Snatching = False;
		Set Ability Cooldown(Event Player, Button(Ability 2), 10);
	}
}

rule("Rule 15")
{
	event
	{
		Player Dealt Damage;
		All;
		Moira;
	}

	conditions
	{
		Event Player.Snatching == True;
	}

	actions
	{
		Start Assist(Event Player, Event Player.Snatched, Assisters and Targets);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Black), Victim, 4);
		Event Player.Snatched = Players Within Radius(Victim, 3, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers);
		Set Healing Received(Event Player.Snatched, 10);
		Wait(4, Ignore Condition);
		Set Healing Received(Event Player.Snatched, 100);
		Event Player.Snatched = 0;
		Stop Assist(Last Assist ID);
	}
}

rule("Rule 16")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Players On Hero(Hero(Moira), Opposite Team Of(Team Of(Event Player))).Snatched,
			Event Player == Current Array Element) == True;
	}

	actions
	{
		Heal(Players On Hero(Hero(Moira), Opposite Team Of(Team Of(Event Player))), Players On Hero(Hero(Moira), Opposite Team Of(Team Of(
			Event Player))), Event Healing * 9);
		Wait(0.016, Ignore Condition);
	}
}

rule("Rule 17")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))).PsychicCount > 0;
		Distance Between(Event Player, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)))) > 30;
	}

	actions
	{
		Event Player.ShadowTag = Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)));
	}
}

rule("Rule 18")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Event Player.ShadowTag != 0;
	}

	actions
	{
		Event Player.ShadowTagVisibility = Event Player;
		Wait Until(Event Player.ShadowTag == 0, 99999);
		Event Player.ShadowTagVisibility = Null;
	}
}

rule("Rule 19")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Distance Between(Event Player, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)))) <= 30;
	}

	actions
	{
		Event Player.ShadowTag = 0;
	}
}

rule("Rule 20")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Event Player.ShadowTag != 0;
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Teleport(Event Player, Position Of(Event Player.ShadowTag));
		Play Effect(All Players(All Teams), Bad Explosion, Color(Black), Event Player, 5);
		Wait(4, Ignore Condition);
	}
}

rule("Rule 17")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))).PsychicCount > 0;
		Is In Line of Sight(Eye Position(Event Player), Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))),
			Barriers Do Not Block LOS) == False;
	}

	actions
	{
		Event Player.ShadowTag = Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)));
	}
}

rule("Rule 19")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is In Line of Sight(Eye Position(Event Player), Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))),
			Barriers Do Not Block LOS) == True;
	}

	actions
	{
		Event Player.ShadowTag = 0;
	}
}

rule("Rule 19")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))).PsychicCount > 0) == False;
	}

	actions
	{
		Event Player.ShadowTag = 0;
	}
}

rule("Rule 24")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Event Player.PsychicCount = 0;
	}
}

rule("Ult Charge Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Moira;
	}

	conditions
	{
		Event Player.UltEooowwww < 2660;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Ult Charge Healing")
{
	event
	{
		Player Dealt Healing;
		All;
		Moira;
	}

	conditions
	{
		Event Player.UltEooowwww < 2660;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Healing;
	}
}

rule("Passive Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Event Player.UltEooowwww < 2660;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += 5;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult charge ui")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Ultimate Charge: {0}% {1}", Event Player.UltEooowwww / 26.600, Ability Icon String(
			Hero(Ramattra), Button(Ultimate))), Null, Null, Top, 0, Color(Rose), Color(Violet), Color(Violet), Visible To and String,
			Default Visibility);
		Wait Until(Event Player.UltEooowwww >= 2660, 99999);
		Destroy HUD Text(Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 75);
		Create HUD Text(Event Player, Custom String("Ultimate Ready!"), Null, Null, Top, 0, Color(Rose), Color(White), Color(Gray),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == True, 99999);
		Destroy HUD Text(Last Text ID);
		Create HUD Text(Event Player, Custom String("Using Expanding Force... {0}", Ability Icon String(Hero(Ramattra), Button(Ultimate))),
			Null, Null, Top, 0, Color(Rose), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == False, 99999);
		Destroy HUD Text(Last Text ID);
		Loop;
	}
}

rule("Rule 22")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 30")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Alive(Event Player) == True;
		Event Player.UltEooowwww >= 2660;
	}

	actions
	{
		Event Player.UltWeewoo = True;
		Create Effect(All Players(All Teams), Sphere, Color(Rose), Event Player, Event Player.UltimateSizeHenny,
			Visible To Position and Radius);
		Event Player.SphereID = Last Created Entity;
		Event Player.UltimateSizeHenny = 5;
		Chase Player Variable Over Time(Event Player, UltimateSizeHenny, 20, 8, Destination and Duration);
		Wait(8, Ignore Condition);
		Event Player.UltWeewoo = False;
		Event Player.UltEooowwww = 0;
		Destroy Effect(Event Player.SphereID);
		Stop Chasing Player Variable(Event Player, UltimateSizeHenny);
	}
}

rule("Rule 31")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Players On Hero(Hero(Moira), Team Of(Event Player)).UltWeewoo == True;
		Distance Between(Event Player, Players On Hero(Hero(Moira), Team Of(Event Player))) <= Players On Hero(Hero(Moira), Team Of(
			Event Player)).UltimateSizeHenny;
	}

	actions
	{
		Heal(Event Player, Players On Hero(Hero(Moira), Team Of(Event Player)), Event Damage);
		Wait(0.016, Ignore Condition);
	}
}

rule("Rule 32")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Event Player.UltWeewoo == True;
	}

	actions
	{
		Heal(Players Within Radius(Event Player, Event Player.UltimateSizeHenny, Team Of(Event Player), Surfaces), Event Player, 9);
		Damage(Players Within Radius(Event Player, Event Player.UltimateSizeHenny, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Event Player, 4);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Alive(Event Player) == True;
		Ammo(Event Player, 0) > 0;
		Is Reloading(Event Player) == False;
	}

	actions
	{
		Create Projectile(Mei Icicle, Event Player, Null, Direction From Angles(Horizontal Facing Angle Of(Event Player) + Random Real(
			-1.500, 1.500), Vertical Facing Angle Of(Event Player) + Random Real(-2, 2)), To World, Damage, Opposite Team Of(Team Of(
			Event Player)), 25, 2, 0, Bad Explosion, Explosion Sound, 0.035, 75, 5, 0, 0, 0);
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) - 1);
		Wait(0.180, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.HydroPump = True;
		Wait(1.500, Ignore Condition);
		Event Player.HydroPump = False;
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 7);
	}
}

rule("Rule 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Event Player.HydroPump == True;
	}

	actions
	{
		Create Projectile(Orb Projectile, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 5, 1, 3,
			Bad Explosion, Explosion Sound, 0, 80, 0.500, 3, 0, 0);
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.Mist = True;
		Create Effect(All Players(All Teams), Cloud, Color(White), Event Player, 15, Visible To Position and Radius);
		Add Health Pool To Player(Event Player, Health, 150, False, True);
		Start Heal Over Time(Event Player, Event Player, 5, 30);
		Wait(5, Ignore Condition);
		Remove Health Pool From Player(Last Created Health Pool);
		Event Player.Mist = False;
		Set Ability Cooldown(Event Player, Button(Ability 2), 15);
		Destroy Effect(Last Created Entity);
	}
}

rule("Rule 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Players On Hero(Hero(Wrecking Ball), Team Of(Event Player))) <= 15;
		Players On Hero(Hero(Wrecking Ball), Team Of(Event Player)).Mist == True;
		Is Alive(Players On Hero(Hero(Wrecking Ball), Team Of(Event Player))) == True;
		Is In Line of Sight(Event Player, Players On Hero(Hero(Wrecking Ball), Team Of(Event Player)), Enemy Barriers Block LOS) == True;
	}

	actions
	{
		Set Damage Received(Event Player, 70);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Set Damage Received(Event Player, 100);
	}
}

rule("Rule 6")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 165);
		Event Player.Surf = True;
		Wait(2.500, Ignore Condition);
		Set Move Speed(Event Player, 100);
		Event Player.Surf = False;
		Set Ability Cooldown(Event Player, Button(Ability 1), 6);
		Wait(6, Ignore Condition);
		Small Message(Event Player, Custom String("Surf ready. {0}", Ability Icon String(Hero(Junker Queen), Button(Ability 1))));
	}
}

rule("Rule 7")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Event Player.Surf == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Damage(Players Within Radius(Event Player, 10, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 10);
		Apply Impulse(Players Within Radius(Event Player, 10, Opposite Team Of(Team Of(Event Player)), Surfaces), Facing Direction Of(
			Event Player), 4, To World, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Aqua), Event Player, 20);
		Wait(0.200, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 8")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Is Dead(Event Player) == True;
	}

	actions
	{
		Wait Until(Is Alive(Event Player), 99999);
		Wait(1, Ignore Condition);
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("Ult Charge Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Event Player.UltEooowwww < 2380;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Damage;
	}
}

rule("Ult Charge Healing")
{
	event
	{
		Player Dealt Healing;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Event Player.UltEooowwww < 2380;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += Event Healing;
	}
}

rule("Passive Ult Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Event Player.UltEooowwww < 2380;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.UltEooowwww += 5;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ult charge ui")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Ultimate Charge: {0}% {1}", Event Player.UltEooowwww / 23.800, Ability Icon String(
			Hero(Lúcio), Button(Ability 2))), Null, Null, Top, 0, Color(Sky Blue), Color(Violet), Color(Violet), Visible To and String,
			Default Visibility);
		Wait Until(Event Player.UltEooowwww >= 2380, 99999);
		Destroy HUD Text(Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 75);
		Create HUD Text(Event Player, Custom String("Ultimate Ready!"), Null, Null, Top, 0, Color(Sky Blue), Color(White), Color(Gray),
			Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == True, 99999);
		Destroy HUD Text(Last Text ID);
		Create HUD Text(Event Player, Custom String("Using Perish Song... {0}", Ability Icon String(Hero(Lúcio), Button(Ability 2))), Null,
			Null, Top, 0, Color(Sky Blue), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait Until(Event Player.UltWeewoo == False, 99999);
		Destroy All HUD Text;
		Loop;
	}
}

rule("Rule 22")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Event Player.UltEooowwww = 0;
	}
}

rule("Rule 14")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.UltEooowwww >= 2380;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Explosion, Color(White), Event Player, 15);
		Play Effect(All Players(All Teams), Ring Explosion, Color(White), Event Player, 30);
		Event Player.UltWeewoo = True;
		Event Player.PerishSongTargets = Filtered Array(Players Within Radius(Event Player, 15, Opposite Team Of(Team Of(Event Player)),
			Surfaces), Is Alive(Current Array Element));
		Set Move Speed(Event Player.PerishSongTargets, 80);
		Start Damage Over Time(Event Player.PerishSongTargets, Event Player, 6, 20);
		Wait(6, Ignore Condition);
		Kill(Filtered Array(Event Player.PerishSongTargets, Health(Current Array Element) / Max Health(Current Array Element) <= 0.500),
			Event Player);
		Play Effect(All Players(All Teams), Bad Explosion, Color(White), First Of(Filtered Array(Event Player.PerishSongTargets, Health(
			Current Array Element) / Max Health(Current Array Element) <= 0.400)), 5);
		Play Effect(All Players(All Teams), Bad Explosion, Color(White), Filtered Array(Event Player.PerishSongTargets, Health(
			Current Array Element) / Max Health(Current Array Element) <= 0.400)[1], 5);
		Play Effect(All Players(All Teams), Bad Explosion, Color(White), Filtered Array(Event Player.PerishSongTargets, Health(
			Current Array Element) / Max Health(Current Array Element) <= 0.400)[2], 5);
		Play Effect(All Players(All Teams), Bad Explosion, Color(White), Filtered Array(Event Player.PerishSongTargets, Health(
			Current Array Element) / Max Health(Current Array Element) <= 0.400)[3], 5);
		Play Effect(All Players(All Teams), Bad Explosion, Color(White), Filtered Array(Event Player.PerishSongTargets, Health(
			Current Array Element) / Max Health(Current Array Element) <= 0.400)[4], 5);
		Set Move Speed(Event Player.PerishSongTargets, 100);
		Wait(0.250, Ignore Condition);
		Event Player.UltWeewoo = False;
		Event Player.UltEooowwww = 0;
	}
}